using System.Collections.Generic;

namespace CV_Generator.OBO_Objects
{
    public class OBO_Header
    {
        // Ignore Spelling: idspace, namespace, OBO, subsetdef, synonymtypedef

        public OBO_Header(List<KeyValuePair<string, string>> data = null)
        {
            if (data == null)
                return;

            foreach (var datum in data)
            {
                switch (datum.Key.ToLower())
                {
                    case "format-version":
                        FormatVersion = datum.Value;
                        break;
                    case "data-version":
                        DataVersion = datum.Value;
                        break;
                    case "version":
                        Version = datum.Value;
                        break;
                    case "date":
                        Date = datum.Value;
                        break;
                    case "saved-by":
                        SavedBy = datum.Value;
                        break;
                    case "auto-generated-by":
                        AutoGeneratedBy = datum.Value;
                        break;
                    case "import":
                        Import.Add(datum.Value);
                        break;
                    case "subsetdef":
                        SubsetDef.Add(datum.Value);
                        break;
                    case "synonymtypedef":
                        SynonymTypeDef.Add(datum.Value);
                        break;
                    case "default-namespace":
                        DefaultNamespace = datum.Value;
                        break;
                    case "idspace":
                        IdSpace.Add(datum.Value);
                        break;
                    case "default-relationship-id-prefix":
                        DefaultRelationshipIdPrefix.Add(datum.Value);
                        break;
                    case "id-mapping":
                        IdMapping.Add(datum.Value);
                        break;
                    case "remark":
                        Remark.Add(datum.Value);
                        break;
                    default:
                        Other.Add(datum);
                        break;
                }
            }
        }

        // Required
        public string FormatVersion;

        // Optional
        public string DataVersion;

        public string Version
        {
            get => DataVersion;
            set => DataVersion = value;
        }

        public string Date;
        public string SavedBy;
        public string AutoGeneratedBy;

        public readonly List<string> Import = new List<string>();
        public readonly List<string> SubsetDef = new List<string>();
        public readonly List<string> SynonymTypeDef = new List<string>();
        public string DefaultNamespace;
        public readonly List<string> Remark = new List<string>();
        public readonly List<string> IdSpace = new List<string>();
        public readonly List<string> DefaultRelationshipIdPrefix = new List<string>();
        public readonly List<string> IdMapping = new List<string>();
        public readonly List<KeyValuePair<string, string>> Other = new List<KeyValuePair<string, string>>();
    }
}
