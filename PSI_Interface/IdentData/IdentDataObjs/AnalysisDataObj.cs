using System;
using PSI_Interface.IdentData.mzIdentML;

namespace PSI_Interface.IdentData.IdentDataObjs
{
    /// <summary>
    /// MzIdentML AnalysisDataType
    /// </summary>
    /// <remarks>Data sets generated by the analyses, including peptide and protein lists.</remarks>
    public class AnalysisDataObj : IdentDataInternalTypeAbstract, IEquatable<AnalysisDataObj>
    {
        private ProteinDetectionListObj _proteinDetectionList;

        private IdentDataList<SpectrumIdentificationListObj> _spectrumIdentificationList;

        /// <summary>
        /// Constructor
        /// </summary>
        public AnalysisDataObj()
        {
            SpectrumIdentificationList = new IdentDataList<SpectrumIdentificationListObj>(1);
            _proteinDetectionList = null;
        }

        /// <summary>
        /// Create an object using the contents of the corresponding MzIdentML object
        /// </summary>
        /// <param name="ad"></param>
        /// <param name="idata"></param>
        public AnalysisDataObj(AnalysisDataType ad, IdentDataObj idata)
            : base(idata)
        {
            SpectrumIdentificationList = new IdentDataList<SpectrumIdentificationListObj>(1);
            _proteinDetectionList = null;

            if (ad.SpectrumIdentificationList != null && ad.SpectrumIdentificationList.Count > 0)
            {
                SpectrumIdentificationList.AddRange(ad.SpectrumIdentificationList, sil => new SpectrumIdentificationListObj(sil, IdentData));
            }
            if (ad.ProteinDetectionList != null)
            {
                _proteinDetectionList = new ProteinDetectionListObj(ad.ProteinDetectionList, IdentData);
            }
        }

        /// <summary>min 1, max unbounded</summary>
        public IdentDataList<SpectrumIdentificationListObj> SpectrumIdentificationList
        {
            get => _spectrumIdentificationList;
            set
            {
                _spectrumIdentificationList = value;
                if (_spectrumIdentificationList != null)
                {
                    _spectrumIdentificationList.IdentData = IdentData;
                }
            }
        }

        /// <summary>min 0, max 1</summary>
        public ProteinDetectionListObj ProteinDetectionList
        {
            get => _proteinDetectionList;
            set
            {
                _proteinDetectionList = value;
                if (_proteinDetectionList != null)
                {
                    _proteinDetectionList.IdentData = IdentData;
                }
            }
        }

        //private long _idCounter = 0;

        internal void RebuildLists()
        {
            // Don't do anything; we'll assume this data is correct, to avoid losing any data.
            //_idCounter = 0;
            // Don't clear; primary data container
            //_spectrumIdentificationList.Clear();
        }

        #region Object Equality

        /// <summary>
        /// Object equality
        /// </summary>
        /// <param name="other"></param>
        /// <returns></returns>
        public override bool Equals(object other)
        {
            var o = other as AnalysisDataObj;
            if (o == null)
            {
                return false;
            }
            return Equals(o);
        }

        /// <summary>
        /// Object equality
        /// </summary>
        /// <param name="other"></param>
        /// <returns></returns>
        public bool Equals(AnalysisDataObj other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }
            if (other == null)
            {
                return false;
            }

            if (Equals(SpectrumIdentificationList, other.SpectrumIdentificationList) &&
                Equals(ProteinDetectionList, other.ProteinDetectionList))
            {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Object hash code
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = SpectrumIdentificationList != null ? SpectrumIdentificationList.GetHashCode() : 0;
                hashCode = (hashCode * 397) ^ (ProteinDetectionList != null ? ProteinDetectionList.GetHashCode() : 0);
                return hashCode;
            }
        }

        #endregion
    }
}