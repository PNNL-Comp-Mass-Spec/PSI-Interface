//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 
namespace PSI_Interface.mzML_DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("IndexedMzMLDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class IndexedMzMLDataSet : global::System.Data.DataSet {
        
        private indexedmzMLDataTable tableindexedmzML;
        
        private mzMLDataTable tablemzML;
        
        private cvListDataTable tablecvList;
        
        private cvDataTable tablecv;
        
        private fileDescriptionDataTable tablefileDescription;
        
        private fileContentDataTable tablefileContent;
        
        private referenceableParamGroupRefDataTable tablereferenceableParamGroupRef;
        
        private cvParamDataTable tablecvParam;
        
        private userParamDataTable tableuserParam;
        
        private sourceFileListDataTable tablesourceFileList;
        
        private sourceFileDataTable tablesourceFile;
        
        private contactDataTable tablecontact;
        
        private referenceableParamGroupListDataTable tablereferenceableParamGroupList;
        
        private referenceableParamGroupDataTable tablereferenceableParamGroup;
        
        private sampleListDataTable tablesampleList;
        
        private sampleDataTable tablesample;
        
        private softwareListDataTable tablesoftwareList;
        
        private softwareDataTable tablesoftware;
        
        private scanSettingsListDataTable tablescanSettingsList;
        
        private scanSettingsDataTable tablescanSettings;
        
        private sourceFileRefListDataTable tablesourceFileRefList;
        
        private sourceFileRefDataTable tablesourceFileRef;
        
        private targetListDataTable tabletargetList;
        
        private targetDataTable tabletarget;
        
        private instrumentConfigurationListDataTable tableinstrumentConfigurationList;
        
        private instrumentConfigurationDataTable tableinstrumentConfiguration;
        
        private componentListDataTable tablecomponentList;
        
        private sourceDataTable tablesource;
        
        private analyzerDataTable tableanalyzer;
        
        private detectorDataTable tabledetector;
        
        private softwareRefDataTable tablesoftwareRef;
        
        private dataProcessingListDataTable tabledataProcessingList;
        
        private dataProcessingDataTable tabledataProcessing;
        
        private processingMethodDataTable tableprocessingMethod;
        
        private runDataTable tablerun;
        
        private spectrumListDataTable tablespectrumList;
        
        private spectrumDataTable tablespectrum;
        
        private scanListDataTable tablescanList;
        
        private scanDataTable tablescan;
        
        private scanWindowListDataTable tablescanWindowList;
        
        private scanWindowDataTable tablescanWindow;
        
        private precursorListDataTable tableprecursorList;
        
        private precursorDataTable tableprecursor;
        
        private isolationWindowDataTable tableisolationWindow;
        
        private selectedIonListDataTable tableselectedIonList;
        
        private selectedIonDataTable tableselectedIon;
        
        private activationDataTable tableactivation;
        
        private productListDataTable tableproductList;
        
        private productDataTable tableproduct;
        
        private binaryDataArrayListDataTable tablebinaryDataArrayList;
        
        private binaryDataArrayDataTable tablebinaryDataArray;
        
        private chromatogramListDataTable tablechromatogramList;
        
        private chromatogramDataTable tablechromatogram;
        
        private indexListDataTable tableindexList;
        
        private indexDataTable tableindex;
        
        private offsetDataTable tableoffset;
        
        private global::System.Data.DataRelation relationindexedmzML_mzML;
        
        private global::System.Data.DataRelation relationmzML_cvList;
        
        private global::System.Data.DataRelation relationcvList_cv;
        
        private global::System.Data.DataRelation relationmzML_fileDescription;
        
        private global::System.Data.DataRelation relationfileDescription_fileContent;
        
        private global::System.Data.DataRelation relationfileContent_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationsourceFile_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationcontact_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationsample_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationsoftware_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationtarget_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationscanSettings_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationsource_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationanalyzer_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationdetector_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationinstrumentConfiguration_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationprocessingMethod_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationscanWindow_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationscan_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationscanList_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationisolationWindow_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationselectedIon_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationactivation_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationbinaryDataArray_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationspectrum_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationchromatogram_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationrun_referenceableParamGroupRef;
        
        private global::System.Data.DataRelation relationfileContent_cvParam;
        
        private global::System.Data.DataRelation relationsourceFile_cvParam;
        
        private global::System.Data.DataRelation relationcontact_cvParam;
        
        private global::System.Data.DataRelation relationreferenceableParamGroup_cvParam;
        
        private global::System.Data.DataRelation relationsample_cvParam;
        
        private global::System.Data.DataRelation relationsoftware_cvParam;
        
        private global::System.Data.DataRelation relationtarget_cvParam;
        
        private global::System.Data.DataRelation relationscanSettings_cvParam;
        
        private global::System.Data.DataRelation relationsource_cvParam;
        
        private global::System.Data.DataRelation relationanalyzer_cvParam;
        
        private global::System.Data.DataRelation relationdetector_cvParam;
        
        private global::System.Data.DataRelation relationinstrumentConfiguration_cvParam;
        
        private global::System.Data.DataRelation relationprocessingMethod_cvParam;
        
        private global::System.Data.DataRelation relationscanWindow_cvParam;
        
        private global::System.Data.DataRelation relationscan_cvParam;
        
        private global::System.Data.DataRelation relationscanList_cvParam;
        
        private global::System.Data.DataRelation relationisolationWindow_cvParam;
        
        private global::System.Data.DataRelation relationselectedIon_cvParam;
        
        private global::System.Data.DataRelation relationactivation_cvParam;
        
        private global::System.Data.DataRelation relationbinaryDataArray_cvParam;
        
        private global::System.Data.DataRelation relationspectrum_cvParam;
        
        private global::System.Data.DataRelation relationchromatogram_cvParam;
        
        private global::System.Data.DataRelation relationrun_cvParam;
        
        private global::System.Data.DataRelation relationfileContent_userParam;
        
        private global::System.Data.DataRelation relationsourceFile_userParam;
        
        private global::System.Data.DataRelation relationcontact_userParam;
        
        private global::System.Data.DataRelation relationreferenceableParamGroup_userParam;
        
        private global::System.Data.DataRelation relationsample_userParam;
        
        private global::System.Data.DataRelation relationsoftware_userParam;
        
        private global::System.Data.DataRelation relationtarget_userParam;
        
        private global::System.Data.DataRelation relationscanSettings_userParam;
        
        private global::System.Data.DataRelation relationsource_userParam;
        
        private global::System.Data.DataRelation relationanalyzer_userParam;
        
        private global::System.Data.DataRelation relationdetector_userParam;
        
        private global::System.Data.DataRelation relationinstrumentConfiguration_userParam;
        
        private global::System.Data.DataRelation relationprocessingMethod_userParam;
        
        private global::System.Data.DataRelation relationscanWindow_userParam;
        
        private global::System.Data.DataRelation relationscan_userParam;
        
        private global::System.Data.DataRelation relationscanList_userParam;
        
        private global::System.Data.DataRelation relationisolationWindow_userParam;
        
        private global::System.Data.DataRelation relationselectedIon_userParam;
        
        private global::System.Data.DataRelation relationactivation_userParam;
        
        private global::System.Data.DataRelation relationbinaryDataArray_userParam;
        
        private global::System.Data.DataRelation relationspectrum_userParam;
        
        private global::System.Data.DataRelation relationchromatogram_userParam;
        
        private global::System.Data.DataRelation relationrun_userParam;
        
        private global::System.Data.DataRelation relationfileDescription_sourceFileList;
        
        private global::System.Data.DataRelation relationsourceFileList_sourceFile;
        
        private global::System.Data.DataRelation relationfileDescription_contact;
        
        private global::System.Data.DataRelation relationmzML_referenceableParamGroupList;
        
        private global::System.Data.DataRelation relationreferenceableParamGroupList_referenceableParamGroup;
        
        private global::System.Data.DataRelation relationmzML_sampleList;
        
        private global::System.Data.DataRelation relationsampleList_sample;
        
        private global::System.Data.DataRelation relationmzML_softwareList;
        
        private global::System.Data.DataRelation relationsoftwareList_software;
        
        private global::System.Data.DataRelation relationmzML_scanSettingsList;
        
        private global::System.Data.DataRelation relationscanSettingsList_scanSettings;
        
        private global::System.Data.DataRelation relationscanSettings_sourceFileRefList;
        
        private global::System.Data.DataRelation relationsourceFileRefList_sourceFileRef;
        
        private global::System.Data.DataRelation relationscanSettings_targetList;
        
        private global::System.Data.DataRelation relationtargetList_target;
        
        private global::System.Data.DataRelation relationmzML_instrumentConfigurationList;
        
        private global::System.Data.DataRelation relationinstrumentConfigurationList_instrumentConfiguration;
        
        private global::System.Data.DataRelation relationinstrumentConfiguration_componentList;
        
        private global::System.Data.DataRelation relationcomponentList_source;
        
        private global::System.Data.DataRelation relationcomponentList_analyzer;
        
        private global::System.Data.DataRelation relationcomponentList_detector;
        
        private global::System.Data.DataRelation relationinstrumentConfiguration_softwareRef;
        
        private global::System.Data.DataRelation relationmzML_dataProcessingList;
        
        private global::System.Data.DataRelation relationdataProcessingList_dataProcessing;
        
        private global::System.Data.DataRelation relationdataProcessing_processingMethod;
        
        private global::System.Data.DataRelation relationmzML_run;
        
        private global::System.Data.DataRelation relationrun_spectrumList;
        
        private global::System.Data.DataRelation relationspectrumList_spectrum;
        
        private global::System.Data.DataRelation relationspectrum_scanList;
        
        private global::System.Data.DataRelation relationscanList_scan;
        
        private global::System.Data.DataRelation relationscan_scanWindowList;
        
        private global::System.Data.DataRelation relationscanWindowList_scanWindow;
        
        private global::System.Data.DataRelation relationspectrum_precursorList;
        
        private global::System.Data.DataRelation relationprecursorList_precursor;
        
        private global::System.Data.DataRelation relationchromatogram_precursor;
        
        private global::System.Data.DataRelation relationprecursor_isolationWindow;
        
        private global::System.Data.DataRelation relationproduct_isolationWindow;
        
        private global::System.Data.DataRelation relationprecursor_selectedIonList;
        
        private global::System.Data.DataRelation relationselectedIonList_selectedIon;
        
        private global::System.Data.DataRelation relationprecursor_activation;
        
        private global::System.Data.DataRelation relationspectrum_productList;
        
        private global::System.Data.DataRelation relationproductList_product;
        
        private global::System.Data.DataRelation relationchromatogram_product;
        
        private global::System.Data.DataRelation relationspectrum_binaryDataArrayList;
        
        private global::System.Data.DataRelation relationchromatogram_binaryDataArrayList;
        
        private global::System.Data.DataRelation relationbinaryDataArrayList_binaryDataArray;
        
        private global::System.Data.DataRelation relationrun_chromatogramList;
        
        private global::System.Data.DataRelation relationchromatogramList_chromatogram;
        
        private global::System.Data.DataRelation relationindexedmzML_indexList;
        
        private global::System.Data.DataRelation relationindexList_index;
        
        private global::System.Data.DataRelation relationindex_offset;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IndexedMzMLDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected IndexedMzMLDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["indexedmzML"] != null)) {
                    base.Tables.Add(new indexedmzMLDataTable(ds.Tables["indexedmzML"]));
                }
                if ((ds.Tables["mzML"] != null)) {
                    base.Tables.Add(new mzMLDataTable(ds.Tables["mzML"]));
                }
                if ((ds.Tables["cvList"] != null)) {
                    base.Tables.Add(new cvListDataTable(ds.Tables["cvList"]));
                }
                if ((ds.Tables["cv"] != null)) {
                    base.Tables.Add(new cvDataTable(ds.Tables["cv"]));
                }
                if ((ds.Tables["fileDescription"] != null)) {
                    base.Tables.Add(new fileDescriptionDataTable(ds.Tables["fileDescription"]));
                }
                if ((ds.Tables["fileContent"] != null)) {
                    base.Tables.Add(new fileContentDataTable(ds.Tables["fileContent"]));
                }
                if ((ds.Tables["referenceableParamGroupRef"] != null)) {
                    base.Tables.Add(new referenceableParamGroupRefDataTable(ds.Tables["referenceableParamGroupRef"]));
                }
                if ((ds.Tables["cvParam"] != null)) {
                    base.Tables.Add(new cvParamDataTable(ds.Tables["cvParam"]));
                }
                if ((ds.Tables["userParam"] != null)) {
                    base.Tables.Add(new userParamDataTable(ds.Tables["userParam"]));
                }
                if ((ds.Tables["sourceFileList"] != null)) {
                    base.Tables.Add(new sourceFileListDataTable(ds.Tables["sourceFileList"]));
                }
                if ((ds.Tables["sourceFile"] != null)) {
                    base.Tables.Add(new sourceFileDataTable(ds.Tables["sourceFile"]));
                }
                if ((ds.Tables["contact"] != null)) {
                    base.Tables.Add(new contactDataTable(ds.Tables["contact"]));
                }
                if ((ds.Tables["referenceableParamGroupList"] != null)) {
                    base.Tables.Add(new referenceableParamGroupListDataTable(ds.Tables["referenceableParamGroupList"]));
                }
                if ((ds.Tables["referenceableParamGroup"] != null)) {
                    base.Tables.Add(new referenceableParamGroupDataTable(ds.Tables["referenceableParamGroup"]));
                }
                if ((ds.Tables["sampleList"] != null)) {
                    base.Tables.Add(new sampleListDataTable(ds.Tables["sampleList"]));
                }
                if ((ds.Tables["sample"] != null)) {
                    base.Tables.Add(new sampleDataTable(ds.Tables["sample"]));
                }
                if ((ds.Tables["softwareList"] != null)) {
                    base.Tables.Add(new softwareListDataTable(ds.Tables["softwareList"]));
                }
                if ((ds.Tables["software"] != null)) {
                    base.Tables.Add(new softwareDataTable(ds.Tables["software"]));
                }
                if ((ds.Tables["scanSettingsList"] != null)) {
                    base.Tables.Add(new scanSettingsListDataTable(ds.Tables["scanSettingsList"]));
                }
                if ((ds.Tables["scanSettings"] != null)) {
                    base.Tables.Add(new scanSettingsDataTable(ds.Tables["scanSettings"]));
                }
                if ((ds.Tables["sourceFileRefList"] != null)) {
                    base.Tables.Add(new sourceFileRefListDataTable(ds.Tables["sourceFileRefList"]));
                }
                if ((ds.Tables["sourceFileRef"] != null)) {
                    base.Tables.Add(new sourceFileRefDataTable(ds.Tables["sourceFileRef"]));
                }
                if ((ds.Tables["targetList"] != null)) {
                    base.Tables.Add(new targetListDataTable(ds.Tables["targetList"]));
                }
                if ((ds.Tables["target"] != null)) {
                    base.Tables.Add(new targetDataTable(ds.Tables["target"]));
                }
                if ((ds.Tables["instrumentConfigurationList"] != null)) {
                    base.Tables.Add(new instrumentConfigurationListDataTable(ds.Tables["instrumentConfigurationList"]));
                }
                if ((ds.Tables["instrumentConfiguration"] != null)) {
                    base.Tables.Add(new instrumentConfigurationDataTable(ds.Tables["instrumentConfiguration"]));
                }
                if ((ds.Tables["componentList"] != null)) {
                    base.Tables.Add(new componentListDataTable(ds.Tables["componentList"]));
                }
                if ((ds.Tables["source"] != null)) {
                    base.Tables.Add(new sourceDataTable(ds.Tables["source"]));
                }
                if ((ds.Tables["analyzer"] != null)) {
                    base.Tables.Add(new analyzerDataTable(ds.Tables["analyzer"]));
                }
                if ((ds.Tables["detector"] != null)) {
                    base.Tables.Add(new detectorDataTable(ds.Tables["detector"]));
                }
                if ((ds.Tables["softwareRef"] != null)) {
                    base.Tables.Add(new softwareRefDataTable(ds.Tables["softwareRef"]));
                }
                if ((ds.Tables["dataProcessingList"] != null)) {
                    base.Tables.Add(new dataProcessingListDataTable(ds.Tables["dataProcessingList"]));
                }
                if ((ds.Tables["dataProcessing"] != null)) {
                    base.Tables.Add(new dataProcessingDataTable(ds.Tables["dataProcessing"]));
                }
                if ((ds.Tables["processingMethod"] != null)) {
                    base.Tables.Add(new processingMethodDataTable(ds.Tables["processingMethod"]));
                }
                if ((ds.Tables["run"] != null)) {
                    base.Tables.Add(new runDataTable(ds.Tables["run"]));
                }
                if ((ds.Tables["spectrumList"] != null)) {
                    base.Tables.Add(new spectrumListDataTable(ds.Tables["spectrumList"]));
                }
                if ((ds.Tables["spectrum"] != null)) {
                    base.Tables.Add(new spectrumDataTable(ds.Tables["spectrum"]));
                }
                if ((ds.Tables["scanList"] != null)) {
                    base.Tables.Add(new scanListDataTable(ds.Tables["scanList"]));
                }
                if ((ds.Tables["scan"] != null)) {
                    base.Tables.Add(new scanDataTable(ds.Tables["scan"]));
                }
                if ((ds.Tables["scanWindowList"] != null)) {
                    base.Tables.Add(new scanWindowListDataTable(ds.Tables["scanWindowList"]));
                }
                if ((ds.Tables["scanWindow"] != null)) {
                    base.Tables.Add(new scanWindowDataTable(ds.Tables["scanWindow"]));
                }
                if ((ds.Tables["precursorList"] != null)) {
                    base.Tables.Add(new precursorListDataTable(ds.Tables["precursorList"]));
                }
                if ((ds.Tables["precursor"] != null)) {
                    base.Tables.Add(new precursorDataTable(ds.Tables["precursor"]));
                }
                if ((ds.Tables["isolationWindow"] != null)) {
                    base.Tables.Add(new isolationWindowDataTable(ds.Tables["isolationWindow"]));
                }
                if ((ds.Tables["selectedIonList"] != null)) {
                    base.Tables.Add(new selectedIonListDataTable(ds.Tables["selectedIonList"]));
                }
                if ((ds.Tables["selectedIon"] != null)) {
                    base.Tables.Add(new selectedIonDataTable(ds.Tables["selectedIon"]));
                }
                if ((ds.Tables["activation"] != null)) {
                    base.Tables.Add(new activationDataTable(ds.Tables["activation"]));
                }
                if ((ds.Tables["productList"] != null)) {
                    base.Tables.Add(new productListDataTable(ds.Tables["productList"]));
                }
                if ((ds.Tables["product"] != null)) {
                    base.Tables.Add(new productDataTable(ds.Tables["product"]));
                }
                if ((ds.Tables["binaryDataArrayList"] != null)) {
                    base.Tables.Add(new binaryDataArrayListDataTable(ds.Tables["binaryDataArrayList"]));
                }
                if ((ds.Tables["binaryDataArray"] != null)) {
                    base.Tables.Add(new binaryDataArrayDataTable(ds.Tables["binaryDataArray"]));
                }
                if ((ds.Tables["chromatogramList"] != null)) {
                    base.Tables.Add(new chromatogramListDataTable(ds.Tables["chromatogramList"]));
                }
                if ((ds.Tables["chromatogram"] != null)) {
                    base.Tables.Add(new chromatogramDataTable(ds.Tables["chromatogram"]));
                }
                if ((ds.Tables["indexList"] != null)) {
                    base.Tables.Add(new indexListDataTable(ds.Tables["indexList"]));
                }
                if ((ds.Tables["index"] != null)) {
                    base.Tables.Add(new indexDataTable(ds.Tables["index"]));
                }
                if ((ds.Tables["offset"] != null)) {
                    base.Tables.Add(new offsetDataTable(ds.Tables["offset"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public indexedmzMLDataTable indexedmzML {
            get {
                return this.tableindexedmzML;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public mzMLDataTable mzML {
            get {
                return this.tablemzML;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public cvListDataTable cvList {
            get {
                return this.tablecvList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public cvDataTable cv {
            get {
                return this.tablecv;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public fileDescriptionDataTable fileDescription {
            get {
                return this.tablefileDescription;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public fileContentDataTable fileContent {
            get {
                return this.tablefileContent;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public referenceableParamGroupRefDataTable referenceableParamGroupRef {
            get {
                return this.tablereferenceableParamGroupRef;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public cvParamDataTable cvParam {
            get {
                return this.tablecvParam;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public userParamDataTable userParam {
            get {
                return this.tableuserParam;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sourceFileListDataTable sourceFileList {
            get {
                return this.tablesourceFileList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sourceFileDataTable sourceFile {
            get {
                return this.tablesourceFile;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public contactDataTable contact {
            get {
                return this.tablecontact;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public referenceableParamGroupListDataTable referenceableParamGroupList {
            get {
                return this.tablereferenceableParamGroupList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public referenceableParamGroupDataTable referenceableParamGroup {
            get {
                return this.tablereferenceableParamGroup;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sampleListDataTable sampleList {
            get {
                return this.tablesampleList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sampleDataTable sample {
            get {
                return this.tablesample;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public softwareListDataTable softwareList {
            get {
                return this.tablesoftwareList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public softwareDataTable software {
            get {
                return this.tablesoftware;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public scanSettingsListDataTable scanSettingsList {
            get {
                return this.tablescanSettingsList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public scanSettingsDataTable scanSettings {
            get {
                return this.tablescanSettings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sourceFileRefListDataTable sourceFileRefList {
            get {
                return this.tablesourceFileRefList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sourceFileRefDataTable sourceFileRef {
            get {
                return this.tablesourceFileRef;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public targetListDataTable targetList {
            get {
                return this.tabletargetList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public targetDataTable target {
            get {
                return this.tabletarget;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public instrumentConfigurationListDataTable instrumentConfigurationList {
            get {
                return this.tableinstrumentConfigurationList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public instrumentConfigurationDataTable instrumentConfiguration {
            get {
                return this.tableinstrumentConfiguration;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public componentListDataTable componentList {
            get {
                return this.tablecomponentList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sourceDataTable source {
            get {
                return this.tablesource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public analyzerDataTable analyzer {
            get {
                return this.tableanalyzer;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public detectorDataTable detector {
            get {
                return this.tabledetector;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public softwareRefDataTable softwareRef {
            get {
                return this.tablesoftwareRef;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dataProcessingListDataTable dataProcessingList {
            get {
                return this.tabledataProcessingList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dataProcessingDataTable dataProcessing {
            get {
                return this.tabledataProcessing;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public processingMethodDataTable processingMethod {
            get {
                return this.tableprocessingMethod;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public runDataTable run {
            get {
                return this.tablerun;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public spectrumListDataTable spectrumList {
            get {
                return this.tablespectrumList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public spectrumDataTable spectrum {
            get {
                return this.tablespectrum;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public scanListDataTable scanList {
            get {
                return this.tablescanList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public scanDataTable scan {
            get {
                return this.tablescan;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public scanWindowListDataTable scanWindowList {
            get {
                return this.tablescanWindowList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public scanWindowDataTable scanWindow {
            get {
                return this.tablescanWindow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public precursorListDataTable precursorList {
            get {
                return this.tableprecursorList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public precursorDataTable precursor {
            get {
                return this.tableprecursor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isolationWindowDataTable isolationWindow {
            get {
                return this.tableisolationWindow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public selectedIonListDataTable selectedIonList {
            get {
                return this.tableselectedIonList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public selectedIonDataTable selectedIon {
            get {
                return this.tableselectedIon;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public activationDataTable activation {
            get {
                return this.tableactivation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public productListDataTable productList {
            get {
                return this.tableproductList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public productDataTable product {
            get {
                return this.tableproduct;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public binaryDataArrayListDataTable binaryDataArrayList {
            get {
                return this.tablebinaryDataArrayList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public binaryDataArrayDataTable binaryDataArray {
            get {
                return this.tablebinaryDataArray;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public chromatogramListDataTable chromatogramList {
            get {
                return this.tablechromatogramList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public chromatogramDataTable chromatogram {
            get {
                return this.tablechromatogram;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public indexListDataTable indexList {
            get {
                return this.tableindexList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public indexDataTable index {
            get {
                return this.tableindex;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public offsetDataTable offset {
            get {
                return this.tableoffset;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
			IndexedMzMLDataSet cln = ((IndexedMzMLDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["indexedmzML"] != null)) {
                    base.Tables.Add(new indexedmzMLDataTable(ds.Tables["indexedmzML"]));
                }
                if ((ds.Tables["mzML"] != null)) {
                    base.Tables.Add(new mzMLDataTable(ds.Tables["mzML"]));
                }
                if ((ds.Tables["cvList"] != null)) {
                    base.Tables.Add(new cvListDataTable(ds.Tables["cvList"]));
                }
                if ((ds.Tables["cv"] != null)) {
                    base.Tables.Add(new cvDataTable(ds.Tables["cv"]));
                }
                if ((ds.Tables["fileDescription"] != null)) {
                    base.Tables.Add(new fileDescriptionDataTable(ds.Tables["fileDescription"]));
                }
                if ((ds.Tables["fileContent"] != null)) {
                    base.Tables.Add(new fileContentDataTable(ds.Tables["fileContent"]));
                }
                if ((ds.Tables["referenceableParamGroupRef"] != null)) {
                    base.Tables.Add(new referenceableParamGroupRefDataTable(ds.Tables["referenceableParamGroupRef"]));
                }
                if ((ds.Tables["cvParam"] != null)) {
                    base.Tables.Add(new cvParamDataTable(ds.Tables["cvParam"]));
                }
                if ((ds.Tables["userParam"] != null)) {
                    base.Tables.Add(new userParamDataTable(ds.Tables["userParam"]));
                }
                if ((ds.Tables["sourceFileList"] != null)) {
                    base.Tables.Add(new sourceFileListDataTable(ds.Tables["sourceFileList"]));
                }
                if ((ds.Tables["sourceFile"] != null)) {
                    base.Tables.Add(new sourceFileDataTable(ds.Tables["sourceFile"]));
                }
                if ((ds.Tables["contact"] != null)) {
                    base.Tables.Add(new contactDataTable(ds.Tables["contact"]));
                }
                if ((ds.Tables["referenceableParamGroupList"] != null)) {
                    base.Tables.Add(new referenceableParamGroupListDataTable(ds.Tables["referenceableParamGroupList"]));
                }
                if ((ds.Tables["referenceableParamGroup"] != null)) {
                    base.Tables.Add(new referenceableParamGroupDataTable(ds.Tables["referenceableParamGroup"]));
                }
                if ((ds.Tables["sampleList"] != null)) {
                    base.Tables.Add(new sampleListDataTable(ds.Tables["sampleList"]));
                }
                if ((ds.Tables["sample"] != null)) {
                    base.Tables.Add(new sampleDataTable(ds.Tables["sample"]));
                }
                if ((ds.Tables["softwareList"] != null)) {
                    base.Tables.Add(new softwareListDataTable(ds.Tables["softwareList"]));
                }
                if ((ds.Tables["software"] != null)) {
                    base.Tables.Add(new softwareDataTable(ds.Tables["software"]));
                }
                if ((ds.Tables["scanSettingsList"] != null)) {
                    base.Tables.Add(new scanSettingsListDataTable(ds.Tables["scanSettingsList"]));
                }
                if ((ds.Tables["scanSettings"] != null)) {
                    base.Tables.Add(new scanSettingsDataTable(ds.Tables["scanSettings"]));
                }
                if ((ds.Tables["sourceFileRefList"] != null)) {
                    base.Tables.Add(new sourceFileRefListDataTable(ds.Tables["sourceFileRefList"]));
                }
                if ((ds.Tables["sourceFileRef"] != null)) {
                    base.Tables.Add(new sourceFileRefDataTable(ds.Tables["sourceFileRef"]));
                }
                if ((ds.Tables["targetList"] != null)) {
                    base.Tables.Add(new targetListDataTable(ds.Tables["targetList"]));
                }
                if ((ds.Tables["target"] != null)) {
                    base.Tables.Add(new targetDataTable(ds.Tables["target"]));
                }
                if ((ds.Tables["instrumentConfigurationList"] != null)) {
                    base.Tables.Add(new instrumentConfigurationListDataTable(ds.Tables["instrumentConfigurationList"]));
                }
                if ((ds.Tables["instrumentConfiguration"] != null)) {
                    base.Tables.Add(new instrumentConfigurationDataTable(ds.Tables["instrumentConfiguration"]));
                }
                if ((ds.Tables["componentList"] != null)) {
                    base.Tables.Add(new componentListDataTable(ds.Tables["componentList"]));
                }
                if ((ds.Tables["source"] != null)) {
                    base.Tables.Add(new sourceDataTable(ds.Tables["source"]));
                }
                if ((ds.Tables["analyzer"] != null)) {
                    base.Tables.Add(new analyzerDataTable(ds.Tables["analyzer"]));
                }
                if ((ds.Tables["detector"] != null)) {
                    base.Tables.Add(new detectorDataTable(ds.Tables["detector"]));
                }
                if ((ds.Tables["softwareRef"] != null)) {
                    base.Tables.Add(new softwareRefDataTable(ds.Tables["softwareRef"]));
                }
                if ((ds.Tables["dataProcessingList"] != null)) {
                    base.Tables.Add(new dataProcessingListDataTable(ds.Tables["dataProcessingList"]));
                }
                if ((ds.Tables["dataProcessing"] != null)) {
                    base.Tables.Add(new dataProcessingDataTable(ds.Tables["dataProcessing"]));
                }
                if ((ds.Tables["processingMethod"] != null)) {
                    base.Tables.Add(new processingMethodDataTable(ds.Tables["processingMethod"]));
                }
                if ((ds.Tables["run"] != null)) {
                    base.Tables.Add(new runDataTable(ds.Tables["run"]));
                }
                if ((ds.Tables["spectrumList"] != null)) {
                    base.Tables.Add(new spectrumListDataTable(ds.Tables["spectrumList"]));
                }
                if ((ds.Tables["spectrum"] != null)) {
                    base.Tables.Add(new spectrumDataTable(ds.Tables["spectrum"]));
                }
                if ((ds.Tables["scanList"] != null)) {
                    base.Tables.Add(new scanListDataTable(ds.Tables["scanList"]));
                }
                if ((ds.Tables["scan"] != null)) {
                    base.Tables.Add(new scanDataTable(ds.Tables["scan"]));
                }
                if ((ds.Tables["scanWindowList"] != null)) {
                    base.Tables.Add(new scanWindowListDataTable(ds.Tables["scanWindowList"]));
                }
                if ((ds.Tables["scanWindow"] != null)) {
                    base.Tables.Add(new scanWindowDataTable(ds.Tables["scanWindow"]));
                }
                if ((ds.Tables["precursorList"] != null)) {
                    base.Tables.Add(new precursorListDataTable(ds.Tables["precursorList"]));
                }
                if ((ds.Tables["precursor"] != null)) {
                    base.Tables.Add(new precursorDataTable(ds.Tables["precursor"]));
                }
                if ((ds.Tables["isolationWindow"] != null)) {
                    base.Tables.Add(new isolationWindowDataTable(ds.Tables["isolationWindow"]));
                }
                if ((ds.Tables["selectedIonList"] != null)) {
                    base.Tables.Add(new selectedIonListDataTable(ds.Tables["selectedIonList"]));
                }
                if ((ds.Tables["selectedIon"] != null)) {
                    base.Tables.Add(new selectedIonDataTable(ds.Tables["selectedIon"]));
                }
                if ((ds.Tables["activation"] != null)) {
                    base.Tables.Add(new activationDataTable(ds.Tables["activation"]));
                }
                if ((ds.Tables["productList"] != null)) {
                    base.Tables.Add(new productListDataTable(ds.Tables["productList"]));
                }
                if ((ds.Tables["product"] != null)) {
                    base.Tables.Add(new productDataTable(ds.Tables["product"]));
                }
                if ((ds.Tables["binaryDataArrayList"] != null)) {
                    base.Tables.Add(new binaryDataArrayListDataTable(ds.Tables["binaryDataArrayList"]));
                }
                if ((ds.Tables["binaryDataArray"] != null)) {
                    base.Tables.Add(new binaryDataArrayDataTable(ds.Tables["binaryDataArray"]));
                }
                if ((ds.Tables["chromatogramList"] != null)) {
                    base.Tables.Add(new chromatogramListDataTable(ds.Tables["chromatogramList"]));
                }
                if ((ds.Tables["chromatogram"] != null)) {
                    base.Tables.Add(new chromatogramDataTable(ds.Tables["chromatogram"]));
                }
                if ((ds.Tables["indexList"] != null)) {
                    base.Tables.Add(new indexListDataTable(ds.Tables["indexList"]));
                }
                if ((ds.Tables["index"] != null)) {
                    base.Tables.Add(new indexDataTable(ds.Tables["index"]));
                }
                if ((ds.Tables["offset"] != null)) {
                    base.Tables.Add(new offsetDataTable(ds.Tables["offset"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableindexedmzML = ((indexedmzMLDataTable)(base.Tables["indexedmzML"]));
            if ((initTable == true)) {
                if ((this.tableindexedmzML != null)) {
                    this.tableindexedmzML.InitVars();
                }
            }
            this.tablemzML = ((mzMLDataTable)(base.Tables["mzML"]));
            if ((initTable == true)) {
                if ((this.tablemzML != null)) {
                    this.tablemzML.InitVars();
                }
            }
            this.tablecvList = ((cvListDataTable)(base.Tables["cvList"]));
            if ((initTable == true)) {
                if ((this.tablecvList != null)) {
                    this.tablecvList.InitVars();
                }
            }
            this.tablecv = ((cvDataTable)(base.Tables["cv"]));
            if ((initTable == true)) {
                if ((this.tablecv != null)) {
                    this.tablecv.InitVars();
                }
            }
            this.tablefileDescription = ((fileDescriptionDataTable)(base.Tables["fileDescription"]));
            if ((initTable == true)) {
                if ((this.tablefileDescription != null)) {
                    this.tablefileDescription.InitVars();
                }
            }
            this.tablefileContent = ((fileContentDataTable)(base.Tables["fileContent"]));
            if ((initTable == true)) {
                if ((this.tablefileContent != null)) {
                    this.tablefileContent.InitVars();
                }
            }
            this.tablereferenceableParamGroupRef = ((referenceableParamGroupRefDataTable)(base.Tables["referenceableParamGroupRef"]));
            if ((initTable == true)) {
                if ((this.tablereferenceableParamGroupRef != null)) {
                    this.tablereferenceableParamGroupRef.InitVars();
                }
            }
            this.tablecvParam = ((cvParamDataTable)(base.Tables["cvParam"]));
            if ((initTable == true)) {
                if ((this.tablecvParam != null)) {
                    this.tablecvParam.InitVars();
                }
            }
            this.tableuserParam = ((userParamDataTable)(base.Tables["userParam"]));
            if ((initTable == true)) {
                if ((this.tableuserParam != null)) {
                    this.tableuserParam.InitVars();
                }
            }
            this.tablesourceFileList = ((sourceFileListDataTable)(base.Tables["sourceFileList"]));
            if ((initTable == true)) {
                if ((this.tablesourceFileList != null)) {
                    this.tablesourceFileList.InitVars();
                }
            }
            this.tablesourceFile = ((sourceFileDataTable)(base.Tables["sourceFile"]));
            if ((initTable == true)) {
                if ((this.tablesourceFile != null)) {
                    this.tablesourceFile.InitVars();
                }
            }
            this.tablecontact = ((contactDataTable)(base.Tables["contact"]));
            if ((initTable == true)) {
                if ((this.tablecontact != null)) {
                    this.tablecontact.InitVars();
                }
            }
            this.tablereferenceableParamGroupList = ((referenceableParamGroupListDataTable)(base.Tables["referenceableParamGroupList"]));
            if ((initTable == true)) {
                if ((this.tablereferenceableParamGroupList != null)) {
                    this.tablereferenceableParamGroupList.InitVars();
                }
            }
            this.tablereferenceableParamGroup = ((referenceableParamGroupDataTable)(base.Tables["referenceableParamGroup"]));
            if ((initTable == true)) {
                if ((this.tablereferenceableParamGroup != null)) {
                    this.tablereferenceableParamGroup.InitVars();
                }
            }
            this.tablesampleList = ((sampleListDataTable)(base.Tables["sampleList"]));
            if ((initTable == true)) {
                if ((this.tablesampleList != null)) {
                    this.tablesampleList.InitVars();
                }
            }
            this.tablesample = ((sampleDataTable)(base.Tables["sample"]));
            if ((initTable == true)) {
                if ((this.tablesample != null)) {
                    this.tablesample.InitVars();
                }
            }
            this.tablesoftwareList = ((softwareListDataTable)(base.Tables["softwareList"]));
            if ((initTable == true)) {
                if ((this.tablesoftwareList != null)) {
                    this.tablesoftwareList.InitVars();
                }
            }
            this.tablesoftware = ((softwareDataTable)(base.Tables["software"]));
            if ((initTable == true)) {
                if ((this.tablesoftware != null)) {
                    this.tablesoftware.InitVars();
                }
            }
            this.tablescanSettingsList = ((scanSettingsListDataTable)(base.Tables["scanSettingsList"]));
            if ((initTable == true)) {
                if ((this.tablescanSettingsList != null)) {
                    this.tablescanSettingsList.InitVars();
                }
            }
            this.tablescanSettings = ((scanSettingsDataTable)(base.Tables["scanSettings"]));
            if ((initTable == true)) {
                if ((this.tablescanSettings != null)) {
                    this.tablescanSettings.InitVars();
                }
            }
            this.tablesourceFileRefList = ((sourceFileRefListDataTable)(base.Tables["sourceFileRefList"]));
            if ((initTable == true)) {
                if ((this.tablesourceFileRefList != null)) {
                    this.tablesourceFileRefList.InitVars();
                }
            }
            this.tablesourceFileRef = ((sourceFileRefDataTable)(base.Tables["sourceFileRef"]));
            if ((initTable == true)) {
                if ((this.tablesourceFileRef != null)) {
                    this.tablesourceFileRef.InitVars();
                }
            }
            this.tabletargetList = ((targetListDataTable)(base.Tables["targetList"]));
            if ((initTable == true)) {
                if ((this.tabletargetList != null)) {
                    this.tabletargetList.InitVars();
                }
            }
            this.tabletarget = ((targetDataTable)(base.Tables["target"]));
            if ((initTable == true)) {
                if ((this.tabletarget != null)) {
                    this.tabletarget.InitVars();
                }
            }
            this.tableinstrumentConfigurationList = ((instrumentConfigurationListDataTable)(base.Tables["instrumentConfigurationList"]));
            if ((initTable == true)) {
                if ((this.tableinstrumentConfigurationList != null)) {
                    this.tableinstrumentConfigurationList.InitVars();
                }
            }
            this.tableinstrumentConfiguration = ((instrumentConfigurationDataTable)(base.Tables["instrumentConfiguration"]));
            if ((initTable == true)) {
                if ((this.tableinstrumentConfiguration != null)) {
                    this.tableinstrumentConfiguration.InitVars();
                }
            }
            this.tablecomponentList = ((componentListDataTable)(base.Tables["componentList"]));
            if ((initTable == true)) {
                if ((this.tablecomponentList != null)) {
                    this.tablecomponentList.InitVars();
                }
            }
            this.tablesource = ((sourceDataTable)(base.Tables["source"]));
            if ((initTable == true)) {
                if ((this.tablesource != null)) {
                    this.tablesource.InitVars();
                }
            }
            this.tableanalyzer = ((analyzerDataTable)(base.Tables["analyzer"]));
            if ((initTable == true)) {
                if ((this.tableanalyzer != null)) {
                    this.tableanalyzer.InitVars();
                }
            }
            this.tabledetector = ((detectorDataTable)(base.Tables["detector"]));
            if ((initTable == true)) {
                if ((this.tabledetector != null)) {
                    this.tabledetector.InitVars();
                }
            }
            this.tablesoftwareRef = ((softwareRefDataTable)(base.Tables["softwareRef"]));
            if ((initTable == true)) {
                if ((this.tablesoftwareRef != null)) {
                    this.tablesoftwareRef.InitVars();
                }
            }
            this.tabledataProcessingList = ((dataProcessingListDataTable)(base.Tables["dataProcessingList"]));
            if ((initTable == true)) {
                if ((this.tabledataProcessingList != null)) {
                    this.tabledataProcessingList.InitVars();
                }
            }
            this.tabledataProcessing = ((dataProcessingDataTable)(base.Tables["dataProcessing"]));
            if ((initTable == true)) {
                if ((this.tabledataProcessing != null)) {
                    this.tabledataProcessing.InitVars();
                }
            }
            this.tableprocessingMethod = ((processingMethodDataTable)(base.Tables["processingMethod"]));
            if ((initTable == true)) {
                if ((this.tableprocessingMethod != null)) {
                    this.tableprocessingMethod.InitVars();
                }
            }
            this.tablerun = ((runDataTable)(base.Tables["run"]));
            if ((initTable == true)) {
                if ((this.tablerun != null)) {
                    this.tablerun.InitVars();
                }
            }
            this.tablespectrumList = ((spectrumListDataTable)(base.Tables["spectrumList"]));
            if ((initTable == true)) {
                if ((this.tablespectrumList != null)) {
                    this.tablespectrumList.InitVars();
                }
            }
            this.tablespectrum = ((spectrumDataTable)(base.Tables["spectrum"]));
            if ((initTable == true)) {
                if ((this.tablespectrum != null)) {
                    this.tablespectrum.InitVars();
                }
            }
            this.tablescanList = ((scanListDataTable)(base.Tables["scanList"]));
            if ((initTable == true)) {
                if ((this.tablescanList != null)) {
                    this.tablescanList.InitVars();
                }
            }
            this.tablescan = ((scanDataTable)(base.Tables["scan"]));
            if ((initTable == true)) {
                if ((this.tablescan != null)) {
                    this.tablescan.InitVars();
                }
            }
            this.tablescanWindowList = ((scanWindowListDataTable)(base.Tables["scanWindowList"]));
            if ((initTable == true)) {
                if ((this.tablescanWindowList != null)) {
                    this.tablescanWindowList.InitVars();
                }
            }
            this.tablescanWindow = ((scanWindowDataTable)(base.Tables["scanWindow"]));
            if ((initTable == true)) {
                if ((this.tablescanWindow != null)) {
                    this.tablescanWindow.InitVars();
                }
            }
            this.tableprecursorList = ((precursorListDataTable)(base.Tables["precursorList"]));
            if ((initTable == true)) {
                if ((this.tableprecursorList != null)) {
                    this.tableprecursorList.InitVars();
                }
            }
            this.tableprecursor = ((precursorDataTable)(base.Tables["precursor"]));
            if ((initTable == true)) {
                if ((this.tableprecursor != null)) {
                    this.tableprecursor.InitVars();
                }
            }
            this.tableisolationWindow = ((isolationWindowDataTable)(base.Tables["isolationWindow"]));
            if ((initTable == true)) {
                if ((this.tableisolationWindow != null)) {
                    this.tableisolationWindow.InitVars();
                }
            }
            this.tableselectedIonList = ((selectedIonListDataTable)(base.Tables["selectedIonList"]));
            if ((initTable == true)) {
                if ((this.tableselectedIonList != null)) {
                    this.tableselectedIonList.InitVars();
                }
            }
            this.tableselectedIon = ((selectedIonDataTable)(base.Tables["selectedIon"]));
            if ((initTable == true)) {
                if ((this.tableselectedIon != null)) {
                    this.tableselectedIon.InitVars();
                }
            }
            this.tableactivation = ((activationDataTable)(base.Tables["activation"]));
            if ((initTable == true)) {
                if ((this.tableactivation != null)) {
                    this.tableactivation.InitVars();
                }
            }
            this.tableproductList = ((productListDataTable)(base.Tables["productList"]));
            if ((initTable == true)) {
                if ((this.tableproductList != null)) {
                    this.tableproductList.InitVars();
                }
            }
            this.tableproduct = ((productDataTable)(base.Tables["product"]));
            if ((initTable == true)) {
                if ((this.tableproduct != null)) {
                    this.tableproduct.InitVars();
                }
            }
            this.tablebinaryDataArrayList = ((binaryDataArrayListDataTable)(base.Tables["binaryDataArrayList"]));
            if ((initTable == true)) {
                if ((this.tablebinaryDataArrayList != null)) {
                    this.tablebinaryDataArrayList.InitVars();
                }
            }
            this.tablebinaryDataArray = ((binaryDataArrayDataTable)(base.Tables["binaryDataArray"]));
            if ((initTable == true)) {
                if ((this.tablebinaryDataArray != null)) {
                    this.tablebinaryDataArray.InitVars();
                }
            }
            this.tablechromatogramList = ((chromatogramListDataTable)(base.Tables["chromatogramList"]));
            if ((initTable == true)) {
                if ((this.tablechromatogramList != null)) {
                    this.tablechromatogramList.InitVars();
                }
            }
            this.tablechromatogram = ((chromatogramDataTable)(base.Tables["chromatogram"]));
            if ((initTable == true)) {
                if ((this.tablechromatogram != null)) {
                    this.tablechromatogram.InitVars();
                }
            }
            this.tableindexList = ((indexListDataTable)(base.Tables["indexList"]));
            if ((initTable == true)) {
                if ((this.tableindexList != null)) {
                    this.tableindexList.InitVars();
                }
            }
            this.tableindex = ((indexDataTable)(base.Tables["index"]));
            if ((initTable == true)) {
                if ((this.tableindex != null)) {
                    this.tableindex.InitVars();
                }
            }
            this.tableoffset = ((offsetDataTable)(base.Tables["offset"]));
            if ((initTable == true)) {
                if ((this.tableoffset != null)) {
                    this.tableoffset.InitVars();
                }
            }
            this.relationindexedmzML_mzML = this.Relations["indexedmzML_mzML"];
            this.relationmzML_cvList = this.Relations["mzML_cvList"];
            this.relationcvList_cv = this.Relations["cvList_cv"];
            this.relationmzML_fileDescription = this.Relations["mzML_fileDescription"];
            this.relationfileDescription_fileContent = this.Relations["fileDescription_fileContent"];
            this.relationfileContent_referenceableParamGroupRef = this.Relations["fileContent_referenceableParamGroupRef"];
            this.relationsourceFile_referenceableParamGroupRef = this.Relations["sourceFile_referenceableParamGroupRef"];
            this.relationcontact_referenceableParamGroupRef = this.Relations["contact_referenceableParamGroupRef"];
            this.relationsample_referenceableParamGroupRef = this.Relations["sample_referenceableParamGroupRef"];
            this.relationsoftware_referenceableParamGroupRef = this.Relations["software_referenceableParamGroupRef"];
            this.relationtarget_referenceableParamGroupRef = this.Relations["target_referenceableParamGroupRef"];
            this.relationscanSettings_referenceableParamGroupRef = this.Relations["scanSettings_referenceableParamGroupRef"];
            this.relationsource_referenceableParamGroupRef = this.Relations["source_referenceableParamGroupRef"];
            this.relationanalyzer_referenceableParamGroupRef = this.Relations["analyzer_referenceableParamGroupRef"];
            this.relationdetector_referenceableParamGroupRef = this.Relations["detector_referenceableParamGroupRef"];
            this.relationinstrumentConfiguration_referenceableParamGroupRef = this.Relations["instrumentConfiguration_referenceableParamGroupRef"];
            this.relationprocessingMethod_referenceableParamGroupRef = this.Relations["processingMethod_referenceableParamGroupRef"];
            this.relationscanWindow_referenceableParamGroupRef = this.Relations["scanWindow_referenceableParamGroupRef"];
            this.relationscan_referenceableParamGroupRef = this.Relations["scan_referenceableParamGroupRef"];
            this.relationscanList_referenceableParamGroupRef = this.Relations["scanList_referenceableParamGroupRef"];
            this.relationisolationWindow_referenceableParamGroupRef = this.Relations["isolationWindow_referenceableParamGroupRef"];
            this.relationselectedIon_referenceableParamGroupRef = this.Relations["selectedIon_referenceableParamGroupRef"];
            this.relationactivation_referenceableParamGroupRef = this.Relations["activation_referenceableParamGroupRef"];
            this.relationbinaryDataArray_referenceableParamGroupRef = this.Relations["binaryDataArray_referenceableParamGroupRef"];
            this.relationspectrum_referenceableParamGroupRef = this.Relations["spectrum_referenceableParamGroupRef"];
            this.relationchromatogram_referenceableParamGroupRef = this.Relations["chromatogram_referenceableParamGroupRef"];
            this.relationrun_referenceableParamGroupRef = this.Relations["run_referenceableParamGroupRef"];
            this.relationfileContent_cvParam = this.Relations["fileContent_cvParam"];
            this.relationsourceFile_cvParam = this.Relations["sourceFile_cvParam"];
            this.relationcontact_cvParam = this.Relations["contact_cvParam"];
            this.relationreferenceableParamGroup_cvParam = this.Relations["referenceableParamGroup_cvParam"];
            this.relationsample_cvParam = this.Relations["sample_cvParam"];
            this.relationsoftware_cvParam = this.Relations["software_cvParam"];
            this.relationtarget_cvParam = this.Relations["target_cvParam"];
            this.relationscanSettings_cvParam = this.Relations["scanSettings_cvParam"];
            this.relationsource_cvParam = this.Relations["source_cvParam"];
            this.relationanalyzer_cvParam = this.Relations["analyzer_cvParam"];
            this.relationdetector_cvParam = this.Relations["detector_cvParam"];
            this.relationinstrumentConfiguration_cvParam = this.Relations["instrumentConfiguration_cvParam"];
            this.relationprocessingMethod_cvParam = this.Relations["processingMethod_cvParam"];
            this.relationscanWindow_cvParam = this.Relations["scanWindow_cvParam"];
            this.relationscan_cvParam = this.Relations["scan_cvParam"];
            this.relationscanList_cvParam = this.Relations["scanList_cvParam"];
            this.relationisolationWindow_cvParam = this.Relations["isolationWindow_cvParam"];
            this.relationselectedIon_cvParam = this.Relations["selectedIon_cvParam"];
            this.relationactivation_cvParam = this.Relations["activation_cvParam"];
            this.relationbinaryDataArray_cvParam = this.Relations["binaryDataArray_cvParam"];
            this.relationspectrum_cvParam = this.Relations["spectrum_cvParam"];
            this.relationchromatogram_cvParam = this.Relations["chromatogram_cvParam"];
            this.relationrun_cvParam = this.Relations["run_cvParam"];
            this.relationfileContent_userParam = this.Relations["fileContent_userParam"];
            this.relationsourceFile_userParam = this.Relations["sourceFile_userParam"];
            this.relationcontact_userParam = this.Relations["contact_userParam"];
            this.relationreferenceableParamGroup_userParam = this.Relations["referenceableParamGroup_userParam"];
            this.relationsample_userParam = this.Relations["sample_userParam"];
            this.relationsoftware_userParam = this.Relations["software_userParam"];
            this.relationtarget_userParam = this.Relations["target_userParam"];
            this.relationscanSettings_userParam = this.Relations["scanSettings_userParam"];
            this.relationsource_userParam = this.Relations["source_userParam"];
            this.relationanalyzer_userParam = this.Relations["analyzer_userParam"];
            this.relationdetector_userParam = this.Relations["detector_userParam"];
            this.relationinstrumentConfiguration_userParam = this.Relations["instrumentConfiguration_userParam"];
            this.relationprocessingMethod_userParam = this.Relations["processingMethod_userParam"];
            this.relationscanWindow_userParam = this.Relations["scanWindow_userParam"];
            this.relationscan_userParam = this.Relations["scan_userParam"];
            this.relationscanList_userParam = this.Relations["scanList_userParam"];
            this.relationisolationWindow_userParam = this.Relations["isolationWindow_userParam"];
            this.relationselectedIon_userParam = this.Relations["selectedIon_userParam"];
            this.relationactivation_userParam = this.Relations["activation_userParam"];
            this.relationbinaryDataArray_userParam = this.Relations["binaryDataArray_userParam"];
            this.relationspectrum_userParam = this.Relations["spectrum_userParam"];
            this.relationchromatogram_userParam = this.Relations["chromatogram_userParam"];
            this.relationrun_userParam = this.Relations["run_userParam"];
            this.relationfileDescription_sourceFileList = this.Relations["fileDescription_sourceFileList"];
            this.relationsourceFileList_sourceFile = this.Relations["sourceFileList_sourceFile"];
            this.relationfileDescription_contact = this.Relations["fileDescription_contact"];
            this.relationmzML_referenceableParamGroupList = this.Relations["mzML_referenceableParamGroupList"];
            this.relationreferenceableParamGroupList_referenceableParamGroup = this.Relations["referenceableParamGroupList_referenceableParamGroup"];
            this.relationmzML_sampleList = this.Relations["mzML_sampleList"];
            this.relationsampleList_sample = this.Relations["sampleList_sample"];
            this.relationmzML_softwareList = this.Relations["mzML_softwareList"];
            this.relationsoftwareList_software = this.Relations["softwareList_software"];
            this.relationmzML_scanSettingsList = this.Relations["mzML_scanSettingsList"];
            this.relationscanSettingsList_scanSettings = this.Relations["scanSettingsList_scanSettings"];
            this.relationscanSettings_sourceFileRefList = this.Relations["scanSettings_sourceFileRefList"];
            this.relationsourceFileRefList_sourceFileRef = this.Relations["sourceFileRefList_sourceFileRef"];
            this.relationscanSettings_targetList = this.Relations["scanSettings_targetList"];
            this.relationtargetList_target = this.Relations["targetList_target"];
            this.relationmzML_instrumentConfigurationList = this.Relations["mzML_instrumentConfigurationList"];
            this.relationinstrumentConfigurationList_instrumentConfiguration = this.Relations["instrumentConfigurationList_instrumentConfiguration"];
            this.relationinstrumentConfiguration_componentList = this.Relations["instrumentConfiguration_componentList"];
            this.relationcomponentList_source = this.Relations["componentList_source"];
            this.relationcomponentList_analyzer = this.Relations["componentList_analyzer"];
            this.relationcomponentList_detector = this.Relations["componentList_detector"];
            this.relationinstrumentConfiguration_softwareRef = this.Relations["instrumentConfiguration_softwareRef"];
            this.relationmzML_dataProcessingList = this.Relations["mzML_dataProcessingList"];
            this.relationdataProcessingList_dataProcessing = this.Relations["dataProcessingList_dataProcessing"];
            this.relationdataProcessing_processingMethod = this.Relations["dataProcessing_processingMethod"];
            this.relationmzML_run = this.Relations["mzML_run"];
            this.relationrun_spectrumList = this.Relations["run_spectrumList"];
            this.relationspectrumList_spectrum = this.Relations["spectrumList_spectrum"];
            this.relationspectrum_scanList = this.Relations["spectrum_scanList"];
            this.relationscanList_scan = this.Relations["scanList_scan"];
            this.relationscan_scanWindowList = this.Relations["scan_scanWindowList"];
            this.relationscanWindowList_scanWindow = this.Relations["scanWindowList_scanWindow"];
            this.relationspectrum_precursorList = this.Relations["spectrum_precursorList"];
            this.relationprecursorList_precursor = this.Relations["precursorList_precursor"];
            this.relationchromatogram_precursor = this.Relations["chromatogram_precursor"];
            this.relationprecursor_isolationWindow = this.Relations["precursor_isolationWindow"];
            this.relationproduct_isolationWindow = this.Relations["product_isolationWindow"];
            this.relationprecursor_selectedIonList = this.Relations["precursor_selectedIonList"];
            this.relationselectedIonList_selectedIon = this.Relations["selectedIonList_selectedIon"];
            this.relationprecursor_activation = this.Relations["precursor_activation"];
            this.relationspectrum_productList = this.Relations["spectrum_productList"];
            this.relationproductList_product = this.Relations["productList_product"];
            this.relationchromatogram_product = this.Relations["chromatogram_product"];
            this.relationspectrum_binaryDataArrayList = this.Relations["spectrum_binaryDataArrayList"];
            this.relationchromatogram_binaryDataArrayList = this.Relations["chromatogram_binaryDataArrayList"];
            this.relationbinaryDataArrayList_binaryDataArray = this.Relations["binaryDataArrayList_binaryDataArray"];
            this.relationrun_chromatogramList = this.Relations["run_chromatogramList"];
            this.relationchromatogramList_chromatogram = this.Relations["chromatogramList_chromatogram"];
            this.relationindexedmzML_indexList = this.Relations["indexedmzML_indexList"];
            this.relationindexList_index = this.Relations["indexList_index"];
            this.relationindex_offset = this.Relations["index_offset"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "IndexedMzMLDataSet";
            this.Prefix = "";
            this.Namespace = "http://psi.hupo.org/ms/mzml";
            this.Locale = new global::System.Globalization.CultureInfo("");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableindexedmzML = new indexedmzMLDataTable();
            base.Tables.Add(this.tableindexedmzML);
            this.tablemzML = new mzMLDataTable();
            base.Tables.Add(this.tablemzML);
            this.tablecvList = new cvListDataTable();
            base.Tables.Add(this.tablecvList);
            this.tablecv = new cvDataTable();
            base.Tables.Add(this.tablecv);
            this.tablefileDescription = new fileDescriptionDataTable();
            base.Tables.Add(this.tablefileDescription);
            this.tablefileContent = new fileContentDataTable();
            base.Tables.Add(this.tablefileContent);
            this.tablereferenceableParamGroupRef = new referenceableParamGroupRefDataTable();
            base.Tables.Add(this.tablereferenceableParamGroupRef);
            this.tablecvParam = new cvParamDataTable();
            base.Tables.Add(this.tablecvParam);
            this.tableuserParam = new userParamDataTable();
            base.Tables.Add(this.tableuserParam);
            this.tablesourceFileList = new sourceFileListDataTable();
            base.Tables.Add(this.tablesourceFileList);
            this.tablesourceFile = new sourceFileDataTable();
            base.Tables.Add(this.tablesourceFile);
            this.tablecontact = new contactDataTable();
            base.Tables.Add(this.tablecontact);
            this.tablereferenceableParamGroupList = new referenceableParamGroupListDataTable();
            base.Tables.Add(this.tablereferenceableParamGroupList);
            this.tablereferenceableParamGroup = new referenceableParamGroupDataTable();
            base.Tables.Add(this.tablereferenceableParamGroup);
            this.tablesampleList = new sampleListDataTable();
            base.Tables.Add(this.tablesampleList);
            this.tablesample = new sampleDataTable();
            base.Tables.Add(this.tablesample);
            this.tablesoftwareList = new softwareListDataTable();
            base.Tables.Add(this.tablesoftwareList);
            this.tablesoftware = new softwareDataTable();
            base.Tables.Add(this.tablesoftware);
            this.tablescanSettingsList = new scanSettingsListDataTable();
            base.Tables.Add(this.tablescanSettingsList);
            this.tablescanSettings = new scanSettingsDataTable();
            base.Tables.Add(this.tablescanSettings);
            this.tablesourceFileRefList = new sourceFileRefListDataTable();
            base.Tables.Add(this.tablesourceFileRefList);
            this.tablesourceFileRef = new sourceFileRefDataTable();
            base.Tables.Add(this.tablesourceFileRef);
            this.tabletargetList = new targetListDataTable();
            base.Tables.Add(this.tabletargetList);
            this.tabletarget = new targetDataTable();
            base.Tables.Add(this.tabletarget);
            this.tableinstrumentConfigurationList = new instrumentConfigurationListDataTable();
            base.Tables.Add(this.tableinstrumentConfigurationList);
            this.tableinstrumentConfiguration = new instrumentConfigurationDataTable();
            base.Tables.Add(this.tableinstrumentConfiguration);
            this.tablecomponentList = new componentListDataTable();
            base.Tables.Add(this.tablecomponentList);
            this.tablesource = new sourceDataTable();
            base.Tables.Add(this.tablesource);
            this.tableanalyzer = new analyzerDataTable();
            base.Tables.Add(this.tableanalyzer);
            this.tabledetector = new detectorDataTable();
            base.Tables.Add(this.tabledetector);
            this.tablesoftwareRef = new softwareRefDataTable();
            base.Tables.Add(this.tablesoftwareRef);
            this.tabledataProcessingList = new dataProcessingListDataTable();
            base.Tables.Add(this.tabledataProcessingList);
            this.tabledataProcessing = new dataProcessingDataTable();
            base.Tables.Add(this.tabledataProcessing);
            this.tableprocessingMethod = new processingMethodDataTable();
            base.Tables.Add(this.tableprocessingMethod);
            this.tablerun = new runDataTable();
            base.Tables.Add(this.tablerun);
            this.tablespectrumList = new spectrumListDataTable();
            base.Tables.Add(this.tablespectrumList);
            this.tablespectrum = new spectrumDataTable();
            base.Tables.Add(this.tablespectrum);
            this.tablescanList = new scanListDataTable();
            base.Tables.Add(this.tablescanList);
            this.tablescan = new scanDataTable();
            base.Tables.Add(this.tablescan);
            this.tablescanWindowList = new scanWindowListDataTable();
            base.Tables.Add(this.tablescanWindowList);
            this.tablescanWindow = new scanWindowDataTable();
            base.Tables.Add(this.tablescanWindow);
            this.tableprecursorList = new precursorListDataTable();
            base.Tables.Add(this.tableprecursorList);
            this.tableprecursor = new precursorDataTable();
            base.Tables.Add(this.tableprecursor);
            this.tableisolationWindow = new isolationWindowDataTable();
            base.Tables.Add(this.tableisolationWindow);
            this.tableselectedIonList = new selectedIonListDataTable();
            base.Tables.Add(this.tableselectedIonList);
            this.tableselectedIon = new selectedIonDataTable();
            base.Tables.Add(this.tableselectedIon);
            this.tableactivation = new activationDataTable();
            base.Tables.Add(this.tableactivation);
            this.tableproductList = new productListDataTable();
            base.Tables.Add(this.tableproductList);
            this.tableproduct = new productDataTable();
            base.Tables.Add(this.tableproduct);
            this.tablebinaryDataArrayList = new binaryDataArrayListDataTable();
            base.Tables.Add(this.tablebinaryDataArrayList);
            this.tablebinaryDataArray = new binaryDataArrayDataTable();
            base.Tables.Add(this.tablebinaryDataArray);
            this.tablechromatogramList = new chromatogramListDataTable();
            base.Tables.Add(this.tablechromatogramList);
            this.tablechromatogram = new chromatogramDataTable();
            base.Tables.Add(this.tablechromatogram);
            this.tableindexList = new indexListDataTable();
            base.Tables.Add(this.tableindexList);
            this.tableindex = new indexDataTable();
            base.Tables.Add(this.tableindex);
            this.tableoffset = new offsetDataTable();
            base.Tables.Add(this.tableoffset);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("indexedmzML_mzML", new global::System.Data.DataColumn[] {
                        this.tableindexedmzML.indexedmzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablemzML.indexedmzML_IdColumn});
            this.tablemzML.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("mzML_cvList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvList.mzML_IdColumn});
            this.tablecvList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("cvList_cv", new global::System.Data.DataColumn[] {
                        this.tablecvList.cvList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecv.cvList_IdColumn});
            this.tablecv.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("mzML_fileDescription", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablefileDescription.mzML_IdColumn});
            this.tablefileDescription.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("fileDescription_fileContent", new global::System.Data.DataColumn[] {
                        this.tablefileDescription.fileDescription_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablefileContent.fileDescription_IdColumn});
            this.tablefileContent.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("fileContent_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablefileContent.fileContent_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.fileContent_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("sourceFile_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablesourceFile.sourceFile_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.sourceFile_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("contact_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablecontact.contact_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.contact_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("sample_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablesample.sample_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.sample_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("software_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablesoftware.software_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.software_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("target_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tabletarget.target_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.target_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanSettings_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.scanSettings_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("source_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablesource.source_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.source_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("analyzer_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableanalyzer.analyzer_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.analyzer_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("detector_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tabledetector.detector_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.detector_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("instrumentConfiguration_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.instrumentConfiguration_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("processingMethod_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableprocessingMethod.processingMethod_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.processingMethod_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanWindow_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablescanWindow.scanWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.scanWindow_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scan_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablescan.scan_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.scan_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanList_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablescanList.scanList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.scanList_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("isolationWindow_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableisolationWindow.isolationWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.isolationWindow_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("selectedIon_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableselectedIon.selectedIon_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.selectedIon_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("activation_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableactivation.activation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.activation_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("binaryDataArray_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArray.binaryDataArray_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.binaryDataArray_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("spectrum_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.spectrum_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("chromatogram_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.chromatogram_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("run_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablerun.run_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.run_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("fileContent_cvParam", new global::System.Data.DataColumn[] {
                        this.tablefileContent.fileContent_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.fileContent_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("sourceFile_cvParam", new global::System.Data.DataColumn[] {
                        this.tablesourceFile.sourceFile_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.sourceFile_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("contact_cvParam", new global::System.Data.DataColumn[] {
                        this.tablecontact.contact_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.contact_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("referenceableParamGroup_cvParam", new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroup.referenceableParamGroup_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.referenceableParamGroup_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("sample_cvParam", new global::System.Data.DataColumn[] {
                        this.tablesample.sample_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.sample_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("software_cvParam", new global::System.Data.DataColumn[] {
                        this.tablesoftware.software_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.software_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("target_cvParam", new global::System.Data.DataColumn[] {
                        this.tabletarget.target_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.target_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanSettings_cvParam", new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.scanSettings_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("source_cvParam", new global::System.Data.DataColumn[] {
                        this.tablesource.source_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.source_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("analyzer_cvParam", new global::System.Data.DataColumn[] {
                        this.tableanalyzer.analyzer_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.analyzer_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("detector_cvParam", new global::System.Data.DataColumn[] {
                        this.tabledetector.detector_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.detector_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("instrumentConfiguration_cvParam", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.instrumentConfiguration_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("processingMethod_cvParam", new global::System.Data.DataColumn[] {
                        this.tableprocessingMethod.processingMethod_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.processingMethod_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanWindow_cvParam", new global::System.Data.DataColumn[] {
                        this.tablescanWindow.scanWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.scanWindow_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scan_cvParam", new global::System.Data.DataColumn[] {
                        this.tablescan.scan_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.scan_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanList_cvParam", new global::System.Data.DataColumn[] {
                        this.tablescanList.scanList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.scanList_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("isolationWindow_cvParam", new global::System.Data.DataColumn[] {
                        this.tableisolationWindow.isolationWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.isolationWindow_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("selectedIon_cvParam", new global::System.Data.DataColumn[] {
                        this.tableselectedIon.selectedIon_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.selectedIon_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("activation_cvParam", new global::System.Data.DataColumn[] {
                        this.tableactivation.activation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.activation_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("binaryDataArray_cvParam", new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArray.binaryDataArray_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.binaryDataArray_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("spectrum_cvParam", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.spectrum_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("chromatogram_cvParam", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.chromatogram_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("run_cvParam", new global::System.Data.DataColumn[] {
                        this.tablerun.run_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.run_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("fileContent_userParam", new global::System.Data.DataColumn[] {
                        this.tablefileContent.fileContent_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.fileContent_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("sourceFile_userParam", new global::System.Data.DataColumn[] {
                        this.tablesourceFile.sourceFile_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.sourceFile_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("contact_userParam", new global::System.Data.DataColumn[] {
                        this.tablecontact.contact_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.contact_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("referenceableParamGroup_userParam", new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroup.referenceableParamGroup_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.referenceableParamGroup_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("sample_userParam", new global::System.Data.DataColumn[] {
                        this.tablesample.sample_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.sample_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("software_userParam", new global::System.Data.DataColumn[] {
                        this.tablesoftware.software_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.software_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("target_userParam", new global::System.Data.DataColumn[] {
                        this.tabletarget.target_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.target_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanSettings_userParam", new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.scanSettings_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("source_userParam", new global::System.Data.DataColumn[] {
                        this.tablesource.source_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.source_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("analyzer_userParam", new global::System.Data.DataColumn[] {
                        this.tableanalyzer.analyzer_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.analyzer_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("detector_userParam", new global::System.Data.DataColumn[] {
                        this.tabledetector.detector_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.detector_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("instrumentConfiguration_userParam", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.instrumentConfiguration_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("processingMethod_userParam", new global::System.Data.DataColumn[] {
                        this.tableprocessingMethod.processingMethod_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.processingMethod_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanWindow_userParam", new global::System.Data.DataColumn[] {
                        this.tablescanWindow.scanWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.scanWindow_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scan_userParam", new global::System.Data.DataColumn[] {
                        this.tablescan.scan_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.scan_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanList_userParam", new global::System.Data.DataColumn[] {
                        this.tablescanList.scanList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.scanList_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("isolationWindow_userParam", new global::System.Data.DataColumn[] {
                        this.tableisolationWindow.isolationWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.isolationWindow_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("selectedIon_userParam", new global::System.Data.DataColumn[] {
                        this.tableselectedIon.selectedIon_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.selectedIon_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("activation_userParam", new global::System.Data.DataColumn[] {
                        this.tableactivation.activation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.activation_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("binaryDataArray_userParam", new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArray.binaryDataArray_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.binaryDataArray_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("spectrum_userParam", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.spectrum_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("chromatogram_userParam", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.chromatogram_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("run_userParam", new global::System.Data.DataColumn[] {
                        this.tablerun.run_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.run_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("fileDescription_sourceFileList", new global::System.Data.DataColumn[] {
                        this.tablefileDescription.fileDescription_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesourceFileList.fileDescription_IdColumn});
            this.tablesourceFileList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("sourceFileList_sourceFile", new global::System.Data.DataColumn[] {
                        this.tablesourceFileList.sourceFileList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesourceFile.sourceFileList_IdColumn});
            this.tablesourceFile.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("fileDescription_contact", new global::System.Data.DataColumn[] {
                        this.tablefileDescription.fileDescription_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecontact.fileDescription_IdColumn});
            this.tablecontact.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("mzML_referenceableParamGroupList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupList.mzML_IdColumn});
            this.tablereferenceableParamGroupList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("referenceableParamGroupList_referenceableParamGroup", new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupList.referenceableParamGroupList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroup.referenceableParamGroupList_IdColumn});
            this.tablereferenceableParamGroup.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("mzML_sampleList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesampleList.mzML_IdColumn});
            this.tablesampleList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("sampleList_sample", new global::System.Data.DataColumn[] {
                        this.tablesampleList.sampleList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesample.sampleList_IdColumn});
            this.tablesample.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("mzML_softwareList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesoftwareList.mzML_IdColumn});
            this.tablesoftwareList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("softwareList_software", new global::System.Data.DataColumn[] {
                        this.tablesoftwareList.softwareList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesoftware.softwareList_IdColumn});
            this.tablesoftware.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("mzML_scanSettingsList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescanSettingsList.mzML_IdColumn});
            this.tablescanSettingsList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanSettingsList_scanSettings", new global::System.Data.DataColumn[] {
                        this.tablescanSettingsList.scanSettingsList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettingsList_IdColumn});
            this.tablescanSettings.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanSettings_sourceFileRefList", new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesourceFileRefList.scanSettings_IdColumn});
            this.tablesourceFileRefList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("sourceFileRefList_sourceFileRef", new global::System.Data.DataColumn[] {
                        this.tablesourceFileRefList.sourceFileRefList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesourceFileRef.sourceFileRefList_IdColumn});
            this.tablesourceFileRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanSettings_targetList", new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletargetList.scanSettings_IdColumn});
            this.tabletargetList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("targetList_target", new global::System.Data.DataColumn[] {
                        this.tabletargetList.targetList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletarget.targetList_IdColumn});
            this.tabletarget.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("mzML_instrumentConfigurationList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfigurationList.mzML_IdColumn});
            this.tableinstrumentConfigurationList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("instrumentConfigurationList_instrumentConfiguration", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfigurationList.instrumentConfigurationList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfigurationList_IdColumn});
            this.tableinstrumentConfiguration.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("instrumentConfiguration_componentList", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecomponentList.instrumentConfiguration_IdColumn});
            this.tablecomponentList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("componentList_source", new global::System.Data.DataColumn[] {
                        this.tablecomponentList.componentList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesource.componentList_IdColumn});
            this.tablesource.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("componentList_analyzer", new global::System.Data.DataColumn[] {
                        this.tablecomponentList.componentList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableanalyzer.componentList_IdColumn});
            this.tableanalyzer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("componentList_detector", new global::System.Data.DataColumn[] {
                        this.tablecomponentList.componentList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledetector.componentList_IdColumn});
            this.tabledetector.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("instrumentConfiguration_softwareRef", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesoftwareRef.instrumentConfiguration_IdColumn});
            this.tablesoftwareRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("mzML_dataProcessingList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledataProcessingList.mzML_IdColumn});
            this.tabledataProcessingList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("dataProcessingList_dataProcessing", new global::System.Data.DataColumn[] {
                        this.tabledataProcessingList.dataProcessingList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledataProcessing.dataProcessingList_IdColumn});
            this.tabledataProcessing.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("dataProcessing_processingMethod", new global::System.Data.DataColumn[] {
                        this.tabledataProcessing.dataProcessing_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprocessingMethod.dataProcessing_IdColumn});
            this.tableprocessingMethod.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("mzML_run", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablerun.mzML_IdColumn});
            this.tablerun.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("run_spectrumList", new global::System.Data.DataColumn[] {
                        this.tablerun.run_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablespectrumList.run_IdColumn});
            this.tablespectrumList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("spectrumList_spectrum", new global::System.Data.DataColumn[] {
                        this.tablespectrumList.spectrumList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrumList_IdColumn});
            this.tablespectrum.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("spectrum_scanList", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescanList.spectrum_IdColumn});
            this.tablescanList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanList_scan", new global::System.Data.DataColumn[] {
                        this.tablescanList.scanList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescan.scanList_IdColumn});
            this.tablescan.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scan_scanWindowList", new global::System.Data.DataColumn[] {
                        this.tablescan.scan_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescanWindowList.scan_IdColumn});
            this.tablescanWindowList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanWindowList_scanWindow", new global::System.Data.DataColumn[] {
                        this.tablescanWindowList.scanWindowList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescanWindow.scanWindowList_IdColumn});
            this.tablescanWindow.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("spectrum_precursorList", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprecursorList.spectrum_IdColumn});
            this.tableprecursorList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("precursorList_precursor", new global::System.Data.DataColumn[] {
                        this.tableprecursorList.precursorList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprecursor.precursorList_IdColumn});
            this.tableprecursor.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("chromatogram_precursor", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprecursor.chromatogram_IdColumn});
            this.tableprecursor.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("precursor_isolationWindow", new global::System.Data.DataColumn[] {
                        this.tableprecursor.precursor_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableisolationWindow.precursor_IdColumn});
            this.tableisolationWindow.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("product_isolationWindow", new global::System.Data.DataColumn[] {
                        this.tableproduct.product_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableisolationWindow.product_IdColumn});
            this.tableisolationWindow.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("precursor_selectedIonList", new global::System.Data.DataColumn[] {
                        this.tableprecursor.precursor_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableselectedIonList.precursor_IdColumn});
            this.tableselectedIonList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("selectedIonList_selectedIon", new global::System.Data.DataColumn[] {
                        this.tableselectedIonList.selectedIonList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableselectedIon.selectedIonList_IdColumn});
            this.tableselectedIon.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("precursor_activation", new global::System.Data.DataColumn[] {
                        this.tableprecursor.precursor_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableactivation.precursor_IdColumn});
            this.tableactivation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("spectrum_productList", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableproductList.spectrum_IdColumn});
            this.tableproductList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("productList_product", new global::System.Data.DataColumn[] {
                        this.tableproductList.productList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableproduct.productList_IdColumn});
            this.tableproduct.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("chromatogram_product", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableproduct.chromatogram_IdColumn});
            this.tableproduct.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("spectrum_binaryDataArrayList", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArrayList.spectrum_IdColumn});
            this.tablebinaryDataArrayList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("chromatogram_binaryDataArrayList", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArrayList.chromatogram_IdColumn});
            this.tablebinaryDataArrayList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("binaryDataArrayList_binaryDataArray", new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArrayList.binaryDataArrayList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArray.binaryDataArrayList_IdColumn});
            this.tablebinaryDataArray.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("run_chromatogramList", new global::System.Data.DataColumn[] {
                        this.tablerun.run_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablechromatogramList.run_IdColumn});
            this.tablechromatogramList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("chromatogramList_chromatogram", new global::System.Data.DataColumn[] {
                        this.tablechromatogramList.chromatogramList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogramList_IdColumn});
            this.tablechromatogram.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("indexedmzML_indexList", new global::System.Data.DataColumn[] {
                        this.tableindexedmzML.indexedmzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableindexList.indexedmzML_IdColumn});
            this.tableindexList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("indexList_index", new global::System.Data.DataColumn[] {
                        this.tableindexList.indexList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableindex.indexList_IdColumn});
            this.tableindex.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("index_offset", new global::System.Data.DataColumn[] {
                        this.tableindex.index_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableoffset.index_IdColumn});
            this.tableoffset.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationindexedmzML_mzML = new global::System.Data.DataRelation("indexedmzML_mzML", new global::System.Data.DataColumn[] {
                        this.tableindexedmzML.indexedmzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablemzML.indexedmzML_IdColumn}, false);
            this.relationindexedmzML_mzML.Nested = true;
            this.Relations.Add(this.relationindexedmzML_mzML);
            this.relationmzML_cvList = new global::System.Data.DataRelation("mzML_cvList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvList.mzML_IdColumn}, false);
            this.relationmzML_cvList.Nested = true;
            this.Relations.Add(this.relationmzML_cvList);
            this.relationcvList_cv = new global::System.Data.DataRelation("cvList_cv", new global::System.Data.DataColumn[] {
                        this.tablecvList.cvList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecv.cvList_IdColumn}, false);
            this.relationcvList_cv.Nested = true;
            this.Relations.Add(this.relationcvList_cv);
            this.relationmzML_fileDescription = new global::System.Data.DataRelation("mzML_fileDescription", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablefileDescription.mzML_IdColumn}, false);
            this.relationmzML_fileDescription.Nested = true;
            this.Relations.Add(this.relationmzML_fileDescription);
            this.relationfileDescription_fileContent = new global::System.Data.DataRelation("fileDescription_fileContent", new global::System.Data.DataColumn[] {
                        this.tablefileDescription.fileDescription_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablefileContent.fileDescription_IdColumn}, false);
            this.relationfileDescription_fileContent.Nested = true;
            this.Relations.Add(this.relationfileDescription_fileContent);
            this.relationfileContent_referenceableParamGroupRef = new global::System.Data.DataRelation("fileContent_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablefileContent.fileContent_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.fileContent_IdColumn}, false);
            this.relationfileContent_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationfileContent_referenceableParamGroupRef);
            this.relationsourceFile_referenceableParamGroupRef = new global::System.Data.DataRelation("sourceFile_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablesourceFile.sourceFile_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.sourceFile_IdColumn}, false);
            this.relationsourceFile_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationsourceFile_referenceableParamGroupRef);
            this.relationcontact_referenceableParamGroupRef = new global::System.Data.DataRelation("contact_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablecontact.contact_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.contact_IdColumn}, false);
            this.relationcontact_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationcontact_referenceableParamGroupRef);
            this.relationsample_referenceableParamGroupRef = new global::System.Data.DataRelation("sample_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablesample.sample_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.sample_IdColumn}, false);
            this.relationsample_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationsample_referenceableParamGroupRef);
            this.relationsoftware_referenceableParamGroupRef = new global::System.Data.DataRelation("software_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablesoftware.software_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.software_IdColumn}, false);
            this.relationsoftware_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationsoftware_referenceableParamGroupRef);
            this.relationtarget_referenceableParamGroupRef = new global::System.Data.DataRelation("target_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tabletarget.target_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.target_IdColumn}, false);
            this.relationtarget_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationtarget_referenceableParamGroupRef);
            this.relationscanSettings_referenceableParamGroupRef = new global::System.Data.DataRelation("scanSettings_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.scanSettings_IdColumn}, false);
            this.relationscanSettings_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationscanSettings_referenceableParamGroupRef);
            this.relationsource_referenceableParamGroupRef = new global::System.Data.DataRelation("source_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablesource.source_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.source_IdColumn}, false);
            this.relationsource_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationsource_referenceableParamGroupRef);
            this.relationanalyzer_referenceableParamGroupRef = new global::System.Data.DataRelation("analyzer_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableanalyzer.analyzer_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.analyzer_IdColumn}, false);
            this.relationanalyzer_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationanalyzer_referenceableParamGroupRef);
            this.relationdetector_referenceableParamGroupRef = new global::System.Data.DataRelation("detector_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tabledetector.detector_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.detector_IdColumn}, false);
            this.relationdetector_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationdetector_referenceableParamGroupRef);
            this.relationinstrumentConfiguration_referenceableParamGroupRef = new global::System.Data.DataRelation("instrumentConfiguration_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.instrumentConfiguration_IdColumn}, false);
            this.relationinstrumentConfiguration_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationinstrumentConfiguration_referenceableParamGroupRef);
            this.relationprocessingMethod_referenceableParamGroupRef = new global::System.Data.DataRelation("processingMethod_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableprocessingMethod.processingMethod_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.processingMethod_IdColumn}, false);
            this.relationprocessingMethod_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationprocessingMethod_referenceableParamGroupRef);
            this.relationscanWindow_referenceableParamGroupRef = new global::System.Data.DataRelation("scanWindow_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablescanWindow.scanWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.scanWindow_IdColumn}, false);
            this.relationscanWindow_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationscanWindow_referenceableParamGroupRef);
            this.relationscan_referenceableParamGroupRef = new global::System.Data.DataRelation("scan_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablescan.scan_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.scan_IdColumn}, false);
            this.relationscan_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationscan_referenceableParamGroupRef);
            this.relationscanList_referenceableParamGroupRef = new global::System.Data.DataRelation("scanList_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablescanList.scanList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.scanList_IdColumn}, false);
            this.relationscanList_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationscanList_referenceableParamGroupRef);
            this.relationisolationWindow_referenceableParamGroupRef = new global::System.Data.DataRelation("isolationWindow_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableisolationWindow.isolationWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.isolationWindow_IdColumn}, false);
            this.relationisolationWindow_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationisolationWindow_referenceableParamGroupRef);
            this.relationselectedIon_referenceableParamGroupRef = new global::System.Data.DataRelation("selectedIon_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableselectedIon.selectedIon_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.selectedIon_IdColumn}, false);
            this.relationselectedIon_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationselectedIon_referenceableParamGroupRef);
            this.relationactivation_referenceableParamGroupRef = new global::System.Data.DataRelation("activation_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableactivation.activation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.activation_IdColumn}, false);
            this.relationactivation_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationactivation_referenceableParamGroupRef);
            this.relationbinaryDataArray_referenceableParamGroupRef = new global::System.Data.DataRelation("binaryDataArray_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArray.binaryDataArray_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.binaryDataArray_IdColumn}, false);
            this.relationbinaryDataArray_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationbinaryDataArray_referenceableParamGroupRef);
            this.relationspectrum_referenceableParamGroupRef = new global::System.Data.DataRelation("spectrum_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.spectrum_IdColumn}, false);
            this.relationspectrum_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationspectrum_referenceableParamGroupRef);
            this.relationchromatogram_referenceableParamGroupRef = new global::System.Data.DataRelation("chromatogram_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.chromatogram_IdColumn}, false);
            this.relationchromatogram_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationchromatogram_referenceableParamGroupRef);
            this.relationrun_referenceableParamGroupRef = new global::System.Data.DataRelation("run_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablerun.run_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.run_IdColumn}, false);
            this.relationrun_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationrun_referenceableParamGroupRef);
            this.relationfileContent_cvParam = new global::System.Data.DataRelation("fileContent_cvParam", new global::System.Data.DataColumn[] {
                        this.tablefileContent.fileContent_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.fileContent_IdColumn}, false);
            this.relationfileContent_cvParam.Nested = true;
            this.Relations.Add(this.relationfileContent_cvParam);
            this.relationsourceFile_cvParam = new global::System.Data.DataRelation("sourceFile_cvParam", new global::System.Data.DataColumn[] {
                        this.tablesourceFile.sourceFile_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.sourceFile_IdColumn}, false);
            this.relationsourceFile_cvParam.Nested = true;
            this.Relations.Add(this.relationsourceFile_cvParam);
            this.relationcontact_cvParam = new global::System.Data.DataRelation("contact_cvParam", new global::System.Data.DataColumn[] {
                        this.tablecontact.contact_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.contact_IdColumn}, false);
            this.relationcontact_cvParam.Nested = true;
            this.Relations.Add(this.relationcontact_cvParam);
            this.relationreferenceableParamGroup_cvParam = new global::System.Data.DataRelation("referenceableParamGroup_cvParam", new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroup.referenceableParamGroup_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.referenceableParamGroup_IdColumn}, false);
            this.relationreferenceableParamGroup_cvParam.Nested = true;
            this.Relations.Add(this.relationreferenceableParamGroup_cvParam);
            this.relationsample_cvParam = new global::System.Data.DataRelation("sample_cvParam", new global::System.Data.DataColumn[] {
                        this.tablesample.sample_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.sample_IdColumn}, false);
            this.relationsample_cvParam.Nested = true;
            this.Relations.Add(this.relationsample_cvParam);
            this.relationsoftware_cvParam = new global::System.Data.DataRelation("software_cvParam", new global::System.Data.DataColumn[] {
                        this.tablesoftware.software_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.software_IdColumn}, false);
            this.relationsoftware_cvParam.Nested = true;
            this.Relations.Add(this.relationsoftware_cvParam);
            this.relationtarget_cvParam = new global::System.Data.DataRelation("target_cvParam", new global::System.Data.DataColumn[] {
                        this.tabletarget.target_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.target_IdColumn}, false);
            this.relationtarget_cvParam.Nested = true;
            this.Relations.Add(this.relationtarget_cvParam);
            this.relationscanSettings_cvParam = new global::System.Data.DataRelation("scanSettings_cvParam", new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.scanSettings_IdColumn}, false);
            this.relationscanSettings_cvParam.Nested = true;
            this.Relations.Add(this.relationscanSettings_cvParam);
            this.relationsource_cvParam = new global::System.Data.DataRelation("source_cvParam", new global::System.Data.DataColumn[] {
                        this.tablesource.source_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.source_IdColumn}, false);
            this.relationsource_cvParam.Nested = true;
            this.Relations.Add(this.relationsource_cvParam);
            this.relationanalyzer_cvParam = new global::System.Data.DataRelation("analyzer_cvParam", new global::System.Data.DataColumn[] {
                        this.tableanalyzer.analyzer_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.analyzer_IdColumn}, false);
            this.relationanalyzer_cvParam.Nested = true;
            this.Relations.Add(this.relationanalyzer_cvParam);
            this.relationdetector_cvParam = new global::System.Data.DataRelation("detector_cvParam", new global::System.Data.DataColumn[] {
                        this.tabledetector.detector_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.detector_IdColumn}, false);
            this.relationdetector_cvParam.Nested = true;
            this.Relations.Add(this.relationdetector_cvParam);
            this.relationinstrumentConfiguration_cvParam = new global::System.Data.DataRelation("instrumentConfiguration_cvParam", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.instrumentConfiguration_IdColumn}, false);
            this.relationinstrumentConfiguration_cvParam.Nested = true;
            this.Relations.Add(this.relationinstrumentConfiguration_cvParam);
            this.relationprocessingMethod_cvParam = new global::System.Data.DataRelation("processingMethod_cvParam", new global::System.Data.DataColumn[] {
                        this.tableprocessingMethod.processingMethod_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.processingMethod_IdColumn}, false);
            this.relationprocessingMethod_cvParam.Nested = true;
            this.Relations.Add(this.relationprocessingMethod_cvParam);
            this.relationscanWindow_cvParam = new global::System.Data.DataRelation("scanWindow_cvParam", new global::System.Data.DataColumn[] {
                        this.tablescanWindow.scanWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.scanWindow_IdColumn}, false);
            this.relationscanWindow_cvParam.Nested = true;
            this.Relations.Add(this.relationscanWindow_cvParam);
            this.relationscan_cvParam = new global::System.Data.DataRelation("scan_cvParam", new global::System.Data.DataColumn[] {
                        this.tablescan.scan_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.scan_IdColumn}, false);
            this.relationscan_cvParam.Nested = true;
            this.Relations.Add(this.relationscan_cvParam);
            this.relationscanList_cvParam = new global::System.Data.DataRelation("scanList_cvParam", new global::System.Data.DataColumn[] {
                        this.tablescanList.scanList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.scanList_IdColumn}, false);
            this.relationscanList_cvParam.Nested = true;
            this.Relations.Add(this.relationscanList_cvParam);
            this.relationisolationWindow_cvParam = new global::System.Data.DataRelation("isolationWindow_cvParam", new global::System.Data.DataColumn[] {
                        this.tableisolationWindow.isolationWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.isolationWindow_IdColumn}, false);
            this.relationisolationWindow_cvParam.Nested = true;
            this.Relations.Add(this.relationisolationWindow_cvParam);
            this.relationselectedIon_cvParam = new global::System.Data.DataRelation("selectedIon_cvParam", new global::System.Data.DataColumn[] {
                        this.tableselectedIon.selectedIon_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.selectedIon_IdColumn}, false);
            this.relationselectedIon_cvParam.Nested = true;
            this.Relations.Add(this.relationselectedIon_cvParam);
            this.relationactivation_cvParam = new global::System.Data.DataRelation("activation_cvParam", new global::System.Data.DataColumn[] {
                        this.tableactivation.activation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.activation_IdColumn}, false);
            this.relationactivation_cvParam.Nested = true;
            this.Relations.Add(this.relationactivation_cvParam);
            this.relationbinaryDataArray_cvParam = new global::System.Data.DataRelation("binaryDataArray_cvParam", new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArray.binaryDataArray_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.binaryDataArray_IdColumn}, false);
            this.relationbinaryDataArray_cvParam.Nested = true;
            this.Relations.Add(this.relationbinaryDataArray_cvParam);
            this.relationspectrum_cvParam = new global::System.Data.DataRelation("spectrum_cvParam", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.spectrum_IdColumn}, false);
            this.relationspectrum_cvParam.Nested = true;
            this.Relations.Add(this.relationspectrum_cvParam);
            this.relationchromatogram_cvParam = new global::System.Data.DataRelation("chromatogram_cvParam", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.chromatogram_IdColumn}, false);
            this.relationchromatogram_cvParam.Nested = true;
            this.Relations.Add(this.relationchromatogram_cvParam);
            this.relationrun_cvParam = new global::System.Data.DataRelation("run_cvParam", new global::System.Data.DataColumn[] {
                        this.tablerun.run_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.run_IdColumn}, false);
            this.relationrun_cvParam.Nested = true;
            this.Relations.Add(this.relationrun_cvParam);
            this.relationfileContent_userParam = new global::System.Data.DataRelation("fileContent_userParam", new global::System.Data.DataColumn[] {
                        this.tablefileContent.fileContent_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.fileContent_IdColumn}, false);
            this.relationfileContent_userParam.Nested = true;
            this.Relations.Add(this.relationfileContent_userParam);
            this.relationsourceFile_userParam = new global::System.Data.DataRelation("sourceFile_userParam", new global::System.Data.DataColumn[] {
                        this.tablesourceFile.sourceFile_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.sourceFile_IdColumn}, false);
            this.relationsourceFile_userParam.Nested = true;
            this.Relations.Add(this.relationsourceFile_userParam);
            this.relationcontact_userParam = new global::System.Data.DataRelation("contact_userParam", new global::System.Data.DataColumn[] {
                        this.tablecontact.contact_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.contact_IdColumn}, false);
            this.relationcontact_userParam.Nested = true;
            this.Relations.Add(this.relationcontact_userParam);
            this.relationreferenceableParamGroup_userParam = new global::System.Data.DataRelation("referenceableParamGroup_userParam", new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroup.referenceableParamGroup_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.referenceableParamGroup_IdColumn}, false);
            this.relationreferenceableParamGroup_userParam.Nested = true;
            this.Relations.Add(this.relationreferenceableParamGroup_userParam);
            this.relationsample_userParam = new global::System.Data.DataRelation("sample_userParam", new global::System.Data.DataColumn[] {
                        this.tablesample.sample_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.sample_IdColumn}, false);
            this.relationsample_userParam.Nested = true;
            this.Relations.Add(this.relationsample_userParam);
            this.relationsoftware_userParam = new global::System.Data.DataRelation("software_userParam", new global::System.Data.DataColumn[] {
                        this.tablesoftware.software_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.software_IdColumn}, false);
            this.relationsoftware_userParam.Nested = true;
            this.Relations.Add(this.relationsoftware_userParam);
            this.relationtarget_userParam = new global::System.Data.DataRelation("target_userParam", new global::System.Data.DataColumn[] {
                        this.tabletarget.target_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.target_IdColumn}, false);
            this.relationtarget_userParam.Nested = true;
            this.Relations.Add(this.relationtarget_userParam);
            this.relationscanSettings_userParam = new global::System.Data.DataRelation("scanSettings_userParam", new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.scanSettings_IdColumn}, false);
            this.relationscanSettings_userParam.Nested = true;
            this.Relations.Add(this.relationscanSettings_userParam);
            this.relationsource_userParam = new global::System.Data.DataRelation("source_userParam", new global::System.Data.DataColumn[] {
                        this.tablesource.source_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.source_IdColumn}, false);
            this.relationsource_userParam.Nested = true;
            this.Relations.Add(this.relationsource_userParam);
            this.relationanalyzer_userParam = new global::System.Data.DataRelation("analyzer_userParam", new global::System.Data.DataColumn[] {
                        this.tableanalyzer.analyzer_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.analyzer_IdColumn}, false);
            this.relationanalyzer_userParam.Nested = true;
            this.Relations.Add(this.relationanalyzer_userParam);
            this.relationdetector_userParam = new global::System.Data.DataRelation("detector_userParam", new global::System.Data.DataColumn[] {
                        this.tabledetector.detector_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.detector_IdColumn}, false);
            this.relationdetector_userParam.Nested = true;
            this.Relations.Add(this.relationdetector_userParam);
            this.relationinstrumentConfiguration_userParam = new global::System.Data.DataRelation("instrumentConfiguration_userParam", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.instrumentConfiguration_IdColumn}, false);
            this.relationinstrumentConfiguration_userParam.Nested = true;
            this.Relations.Add(this.relationinstrumentConfiguration_userParam);
            this.relationprocessingMethod_userParam = new global::System.Data.DataRelation("processingMethod_userParam", new global::System.Data.DataColumn[] {
                        this.tableprocessingMethod.processingMethod_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.processingMethod_IdColumn}, false);
            this.relationprocessingMethod_userParam.Nested = true;
            this.Relations.Add(this.relationprocessingMethod_userParam);
            this.relationscanWindow_userParam = new global::System.Data.DataRelation("scanWindow_userParam", new global::System.Data.DataColumn[] {
                        this.tablescanWindow.scanWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.scanWindow_IdColumn}, false);
            this.relationscanWindow_userParam.Nested = true;
            this.Relations.Add(this.relationscanWindow_userParam);
            this.relationscan_userParam = new global::System.Data.DataRelation("scan_userParam", new global::System.Data.DataColumn[] {
                        this.tablescan.scan_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.scan_IdColumn}, false);
            this.relationscan_userParam.Nested = true;
            this.Relations.Add(this.relationscan_userParam);
            this.relationscanList_userParam = new global::System.Data.DataRelation("scanList_userParam", new global::System.Data.DataColumn[] {
                        this.tablescanList.scanList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.scanList_IdColumn}, false);
            this.relationscanList_userParam.Nested = true;
            this.Relations.Add(this.relationscanList_userParam);
            this.relationisolationWindow_userParam = new global::System.Data.DataRelation("isolationWindow_userParam", new global::System.Data.DataColumn[] {
                        this.tableisolationWindow.isolationWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.isolationWindow_IdColumn}, false);
            this.relationisolationWindow_userParam.Nested = true;
            this.Relations.Add(this.relationisolationWindow_userParam);
            this.relationselectedIon_userParam = new global::System.Data.DataRelation("selectedIon_userParam", new global::System.Data.DataColumn[] {
                        this.tableselectedIon.selectedIon_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.selectedIon_IdColumn}, false);
            this.relationselectedIon_userParam.Nested = true;
            this.Relations.Add(this.relationselectedIon_userParam);
            this.relationactivation_userParam = new global::System.Data.DataRelation("activation_userParam", new global::System.Data.DataColumn[] {
                        this.tableactivation.activation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.activation_IdColumn}, false);
            this.relationactivation_userParam.Nested = true;
            this.Relations.Add(this.relationactivation_userParam);
            this.relationbinaryDataArray_userParam = new global::System.Data.DataRelation("binaryDataArray_userParam", new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArray.binaryDataArray_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.binaryDataArray_IdColumn}, false);
            this.relationbinaryDataArray_userParam.Nested = true;
            this.Relations.Add(this.relationbinaryDataArray_userParam);
            this.relationspectrum_userParam = new global::System.Data.DataRelation("spectrum_userParam", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.spectrum_IdColumn}, false);
            this.relationspectrum_userParam.Nested = true;
            this.Relations.Add(this.relationspectrum_userParam);
            this.relationchromatogram_userParam = new global::System.Data.DataRelation("chromatogram_userParam", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.chromatogram_IdColumn}, false);
            this.relationchromatogram_userParam.Nested = true;
            this.Relations.Add(this.relationchromatogram_userParam);
            this.relationrun_userParam = new global::System.Data.DataRelation("run_userParam", new global::System.Data.DataColumn[] {
                        this.tablerun.run_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.run_IdColumn}, false);
            this.relationrun_userParam.Nested = true;
            this.Relations.Add(this.relationrun_userParam);
            this.relationfileDescription_sourceFileList = new global::System.Data.DataRelation("fileDescription_sourceFileList", new global::System.Data.DataColumn[] {
                        this.tablefileDescription.fileDescription_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesourceFileList.fileDescription_IdColumn}, false);
            this.relationfileDescription_sourceFileList.Nested = true;
            this.Relations.Add(this.relationfileDescription_sourceFileList);
            this.relationsourceFileList_sourceFile = new global::System.Data.DataRelation("sourceFileList_sourceFile", new global::System.Data.DataColumn[] {
                        this.tablesourceFileList.sourceFileList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesourceFile.sourceFileList_IdColumn}, false);
            this.relationsourceFileList_sourceFile.Nested = true;
            this.Relations.Add(this.relationsourceFileList_sourceFile);
            this.relationfileDescription_contact = new global::System.Data.DataRelation("fileDescription_contact", new global::System.Data.DataColumn[] {
                        this.tablefileDescription.fileDescription_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecontact.fileDescription_IdColumn}, false);
            this.relationfileDescription_contact.Nested = true;
            this.Relations.Add(this.relationfileDescription_contact);
            this.relationmzML_referenceableParamGroupList = new global::System.Data.DataRelation("mzML_referenceableParamGroupList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupList.mzML_IdColumn}, false);
            this.relationmzML_referenceableParamGroupList.Nested = true;
            this.Relations.Add(this.relationmzML_referenceableParamGroupList);
            this.relationreferenceableParamGroupList_referenceableParamGroup = new global::System.Data.DataRelation("referenceableParamGroupList_referenceableParamGroup", new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupList.referenceableParamGroupList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroup.referenceableParamGroupList_IdColumn}, false);
            this.relationreferenceableParamGroupList_referenceableParamGroup.Nested = true;
            this.Relations.Add(this.relationreferenceableParamGroupList_referenceableParamGroup);
            this.relationmzML_sampleList = new global::System.Data.DataRelation("mzML_sampleList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesampleList.mzML_IdColumn}, false);
            this.relationmzML_sampleList.Nested = true;
            this.Relations.Add(this.relationmzML_sampleList);
            this.relationsampleList_sample = new global::System.Data.DataRelation("sampleList_sample", new global::System.Data.DataColumn[] {
                        this.tablesampleList.sampleList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesample.sampleList_IdColumn}, false);
            this.relationsampleList_sample.Nested = true;
            this.Relations.Add(this.relationsampleList_sample);
            this.relationmzML_softwareList = new global::System.Data.DataRelation("mzML_softwareList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesoftwareList.mzML_IdColumn}, false);
            this.relationmzML_softwareList.Nested = true;
            this.Relations.Add(this.relationmzML_softwareList);
            this.relationsoftwareList_software = new global::System.Data.DataRelation("softwareList_software", new global::System.Data.DataColumn[] {
                        this.tablesoftwareList.softwareList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesoftware.softwareList_IdColumn}, false);
            this.relationsoftwareList_software.Nested = true;
            this.Relations.Add(this.relationsoftwareList_software);
            this.relationmzML_scanSettingsList = new global::System.Data.DataRelation("mzML_scanSettingsList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescanSettingsList.mzML_IdColumn}, false);
            this.relationmzML_scanSettingsList.Nested = true;
            this.Relations.Add(this.relationmzML_scanSettingsList);
            this.relationscanSettingsList_scanSettings = new global::System.Data.DataRelation("scanSettingsList_scanSettings", new global::System.Data.DataColumn[] {
                        this.tablescanSettingsList.scanSettingsList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettingsList_IdColumn}, false);
            this.relationscanSettingsList_scanSettings.Nested = true;
            this.Relations.Add(this.relationscanSettingsList_scanSettings);
            this.relationscanSettings_sourceFileRefList = new global::System.Data.DataRelation("scanSettings_sourceFileRefList", new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesourceFileRefList.scanSettings_IdColumn}, false);
            this.relationscanSettings_sourceFileRefList.Nested = true;
            this.Relations.Add(this.relationscanSettings_sourceFileRefList);
            this.relationsourceFileRefList_sourceFileRef = new global::System.Data.DataRelation("sourceFileRefList_sourceFileRef", new global::System.Data.DataColumn[] {
                        this.tablesourceFileRefList.sourceFileRefList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesourceFileRef.sourceFileRefList_IdColumn}, false);
            this.relationsourceFileRefList_sourceFileRef.Nested = true;
            this.Relations.Add(this.relationsourceFileRefList_sourceFileRef);
            this.relationscanSettings_targetList = new global::System.Data.DataRelation("scanSettings_targetList", new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletargetList.scanSettings_IdColumn}, false);
            this.relationscanSettings_targetList.Nested = true;
            this.Relations.Add(this.relationscanSettings_targetList);
            this.relationtargetList_target = new global::System.Data.DataRelation("targetList_target", new global::System.Data.DataColumn[] {
                        this.tabletargetList.targetList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletarget.targetList_IdColumn}, false);
            this.relationtargetList_target.Nested = true;
            this.Relations.Add(this.relationtargetList_target);
            this.relationmzML_instrumentConfigurationList = new global::System.Data.DataRelation("mzML_instrumentConfigurationList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfigurationList.mzML_IdColumn}, false);
            this.relationmzML_instrumentConfigurationList.Nested = true;
            this.Relations.Add(this.relationmzML_instrumentConfigurationList);
            this.relationinstrumentConfigurationList_instrumentConfiguration = new global::System.Data.DataRelation("instrumentConfigurationList_instrumentConfiguration", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfigurationList.instrumentConfigurationList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfigurationList_IdColumn}, false);
            this.relationinstrumentConfigurationList_instrumentConfiguration.Nested = true;
            this.Relations.Add(this.relationinstrumentConfigurationList_instrumentConfiguration);
            this.relationinstrumentConfiguration_componentList = new global::System.Data.DataRelation("instrumentConfiguration_componentList", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecomponentList.instrumentConfiguration_IdColumn}, false);
            this.relationinstrumentConfiguration_componentList.Nested = true;
            this.Relations.Add(this.relationinstrumentConfiguration_componentList);
            this.relationcomponentList_source = new global::System.Data.DataRelation("componentList_source", new global::System.Data.DataColumn[] {
                        this.tablecomponentList.componentList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesource.componentList_IdColumn}, false);
            this.relationcomponentList_source.Nested = true;
            this.Relations.Add(this.relationcomponentList_source);
            this.relationcomponentList_analyzer = new global::System.Data.DataRelation("componentList_analyzer", new global::System.Data.DataColumn[] {
                        this.tablecomponentList.componentList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableanalyzer.componentList_IdColumn}, false);
            this.relationcomponentList_analyzer.Nested = true;
            this.Relations.Add(this.relationcomponentList_analyzer);
            this.relationcomponentList_detector = new global::System.Data.DataRelation("componentList_detector", new global::System.Data.DataColumn[] {
                        this.tablecomponentList.componentList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledetector.componentList_IdColumn}, false);
            this.relationcomponentList_detector.Nested = true;
            this.Relations.Add(this.relationcomponentList_detector);
            this.relationinstrumentConfiguration_softwareRef = new global::System.Data.DataRelation("instrumentConfiguration_softwareRef", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesoftwareRef.instrumentConfiguration_IdColumn}, false);
            this.relationinstrumentConfiguration_softwareRef.Nested = true;
            this.Relations.Add(this.relationinstrumentConfiguration_softwareRef);
            this.relationmzML_dataProcessingList = new global::System.Data.DataRelation("mzML_dataProcessingList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledataProcessingList.mzML_IdColumn}, false);
            this.relationmzML_dataProcessingList.Nested = true;
            this.Relations.Add(this.relationmzML_dataProcessingList);
            this.relationdataProcessingList_dataProcessing = new global::System.Data.DataRelation("dataProcessingList_dataProcessing", new global::System.Data.DataColumn[] {
                        this.tabledataProcessingList.dataProcessingList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledataProcessing.dataProcessingList_IdColumn}, false);
            this.relationdataProcessingList_dataProcessing.Nested = true;
            this.Relations.Add(this.relationdataProcessingList_dataProcessing);
            this.relationdataProcessing_processingMethod = new global::System.Data.DataRelation("dataProcessing_processingMethod", new global::System.Data.DataColumn[] {
                        this.tabledataProcessing.dataProcessing_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprocessingMethod.dataProcessing_IdColumn}, false);
            this.relationdataProcessing_processingMethod.Nested = true;
            this.Relations.Add(this.relationdataProcessing_processingMethod);
            this.relationmzML_run = new global::System.Data.DataRelation("mzML_run", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablerun.mzML_IdColumn}, false);
            this.relationmzML_run.Nested = true;
            this.Relations.Add(this.relationmzML_run);
            this.relationrun_spectrumList = new global::System.Data.DataRelation("run_spectrumList", new global::System.Data.DataColumn[] {
                        this.tablerun.run_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablespectrumList.run_IdColumn}, false);
            this.relationrun_spectrumList.Nested = true;
            this.Relations.Add(this.relationrun_spectrumList);
            this.relationspectrumList_spectrum = new global::System.Data.DataRelation("spectrumList_spectrum", new global::System.Data.DataColumn[] {
                        this.tablespectrumList.spectrumList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrumList_IdColumn}, false);
            this.relationspectrumList_spectrum.Nested = true;
            this.Relations.Add(this.relationspectrumList_spectrum);
            this.relationspectrum_scanList = new global::System.Data.DataRelation("spectrum_scanList", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescanList.spectrum_IdColumn}, false);
            this.relationspectrum_scanList.Nested = true;
            this.Relations.Add(this.relationspectrum_scanList);
            this.relationscanList_scan = new global::System.Data.DataRelation("scanList_scan", new global::System.Data.DataColumn[] {
                        this.tablescanList.scanList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescan.scanList_IdColumn}, false);
            this.relationscanList_scan.Nested = true;
            this.Relations.Add(this.relationscanList_scan);
            this.relationscan_scanWindowList = new global::System.Data.DataRelation("scan_scanWindowList", new global::System.Data.DataColumn[] {
                        this.tablescan.scan_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescanWindowList.scan_IdColumn}, false);
            this.relationscan_scanWindowList.Nested = true;
            this.Relations.Add(this.relationscan_scanWindowList);
            this.relationscanWindowList_scanWindow = new global::System.Data.DataRelation("scanWindowList_scanWindow", new global::System.Data.DataColumn[] {
                        this.tablescanWindowList.scanWindowList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescanWindow.scanWindowList_IdColumn}, false);
            this.relationscanWindowList_scanWindow.Nested = true;
            this.Relations.Add(this.relationscanWindowList_scanWindow);
            this.relationspectrum_precursorList = new global::System.Data.DataRelation("spectrum_precursorList", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprecursorList.spectrum_IdColumn}, false);
            this.relationspectrum_precursorList.Nested = true;
            this.Relations.Add(this.relationspectrum_precursorList);
            this.relationprecursorList_precursor = new global::System.Data.DataRelation("precursorList_precursor", new global::System.Data.DataColumn[] {
                        this.tableprecursorList.precursorList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprecursor.precursorList_IdColumn}, false);
            this.relationprecursorList_precursor.Nested = true;
            this.Relations.Add(this.relationprecursorList_precursor);
            this.relationchromatogram_precursor = new global::System.Data.DataRelation("chromatogram_precursor", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprecursor.chromatogram_IdColumn}, false);
            this.relationchromatogram_precursor.Nested = true;
            this.Relations.Add(this.relationchromatogram_precursor);
            this.relationprecursor_isolationWindow = new global::System.Data.DataRelation("precursor_isolationWindow", new global::System.Data.DataColumn[] {
                        this.tableprecursor.precursor_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableisolationWindow.precursor_IdColumn}, false);
            this.relationprecursor_isolationWindow.Nested = true;
            this.Relations.Add(this.relationprecursor_isolationWindow);
            this.relationproduct_isolationWindow = new global::System.Data.DataRelation("product_isolationWindow", new global::System.Data.DataColumn[] {
                        this.tableproduct.product_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableisolationWindow.product_IdColumn}, false);
            this.relationproduct_isolationWindow.Nested = true;
            this.Relations.Add(this.relationproduct_isolationWindow);
            this.relationprecursor_selectedIonList = new global::System.Data.DataRelation("precursor_selectedIonList", new global::System.Data.DataColumn[] {
                        this.tableprecursor.precursor_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableselectedIonList.precursor_IdColumn}, false);
            this.relationprecursor_selectedIonList.Nested = true;
            this.Relations.Add(this.relationprecursor_selectedIonList);
            this.relationselectedIonList_selectedIon = new global::System.Data.DataRelation("selectedIonList_selectedIon", new global::System.Data.DataColumn[] {
                        this.tableselectedIonList.selectedIonList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableselectedIon.selectedIonList_IdColumn}, false);
            this.relationselectedIonList_selectedIon.Nested = true;
            this.Relations.Add(this.relationselectedIonList_selectedIon);
            this.relationprecursor_activation = new global::System.Data.DataRelation("precursor_activation", new global::System.Data.DataColumn[] {
                        this.tableprecursor.precursor_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableactivation.precursor_IdColumn}, false);
            this.relationprecursor_activation.Nested = true;
            this.Relations.Add(this.relationprecursor_activation);
            this.relationspectrum_productList = new global::System.Data.DataRelation("spectrum_productList", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableproductList.spectrum_IdColumn}, false);
            this.relationspectrum_productList.Nested = true;
            this.Relations.Add(this.relationspectrum_productList);
            this.relationproductList_product = new global::System.Data.DataRelation("productList_product", new global::System.Data.DataColumn[] {
                        this.tableproductList.productList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableproduct.productList_IdColumn}, false);
            this.relationproductList_product.Nested = true;
            this.Relations.Add(this.relationproductList_product);
            this.relationchromatogram_product = new global::System.Data.DataRelation("chromatogram_product", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableproduct.chromatogram_IdColumn}, false);
            this.relationchromatogram_product.Nested = true;
            this.Relations.Add(this.relationchromatogram_product);
            this.relationspectrum_binaryDataArrayList = new global::System.Data.DataRelation("spectrum_binaryDataArrayList", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArrayList.spectrum_IdColumn}, false);
            this.relationspectrum_binaryDataArrayList.Nested = true;
            this.Relations.Add(this.relationspectrum_binaryDataArrayList);
            this.relationchromatogram_binaryDataArrayList = new global::System.Data.DataRelation("chromatogram_binaryDataArrayList", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArrayList.chromatogram_IdColumn}, false);
            this.relationchromatogram_binaryDataArrayList.Nested = true;
            this.Relations.Add(this.relationchromatogram_binaryDataArrayList);
            this.relationbinaryDataArrayList_binaryDataArray = new global::System.Data.DataRelation("binaryDataArrayList_binaryDataArray", new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArrayList.binaryDataArrayList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArray.binaryDataArrayList_IdColumn}, false);
            this.relationbinaryDataArrayList_binaryDataArray.Nested = true;
            this.Relations.Add(this.relationbinaryDataArrayList_binaryDataArray);
            this.relationrun_chromatogramList = new global::System.Data.DataRelation("run_chromatogramList", new global::System.Data.DataColumn[] {
                        this.tablerun.run_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablechromatogramList.run_IdColumn}, false);
            this.relationrun_chromatogramList.Nested = true;
            this.Relations.Add(this.relationrun_chromatogramList);
            this.relationchromatogramList_chromatogram = new global::System.Data.DataRelation("chromatogramList_chromatogram", new global::System.Data.DataColumn[] {
                        this.tablechromatogramList.chromatogramList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogramList_IdColumn}, false);
            this.relationchromatogramList_chromatogram.Nested = true;
            this.Relations.Add(this.relationchromatogramList_chromatogram);
            this.relationindexedmzML_indexList = new global::System.Data.DataRelation("indexedmzML_indexList", new global::System.Data.DataColumn[] {
                        this.tableindexedmzML.indexedmzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableindexList.indexedmzML_IdColumn}, false);
            this.relationindexedmzML_indexList.Nested = true;
            this.Relations.Add(this.relationindexedmzML_indexList);
            this.relationindexList_index = new global::System.Data.DataRelation("indexList_index", new global::System.Data.DataColumn[] {
                        this.tableindexList.indexList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableindex.indexList_IdColumn}, false);
            this.relationindexList_index.Nested = true;
            this.Relations.Add(this.relationindexList_index);
            this.relationindex_offset = new global::System.Data.DataRelation("index_offset", new global::System.Data.DataColumn[] {
                        this.tableindex.index_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableoffset.index_IdColumn}, false);
            this.relationindex_offset.Nested = true;
            this.Relations.Add(this.relationindex_offset);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeindexedmzML() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemzML() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecvList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecv() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializefileDescription() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializefileContent() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializereferenceableParamGroupRef() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecvParam() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeuserParam() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesourceFileList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesourceFile() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecontact() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializereferenceableParamGroupList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializereferenceableParamGroup() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesampleList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesample() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesoftwareList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesoftware() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializescanSettingsList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializescanSettings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesourceFileRefList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesourceFileRef() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetargetList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetarget() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeinstrumentConfigurationList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeinstrumentConfiguration() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecomponentList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeanalyzer() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedetector() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesoftwareRef() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedataProcessingList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedataProcessing() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeprocessingMethod() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerun() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializespectrumList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializespectrum() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializescanList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializescan() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializescanWindowList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializescanWindow() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeprecursorList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeprecursor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisolationWindow() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeselectedIonList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeselectedIon() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeactivation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeproductList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeproduct() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializebinaryDataArrayList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializebinaryDataArray() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializechromatogramList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializechromatogram() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeindexList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeindex() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeoffset() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
			IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void indexedmzMLRowChangeEventHandler(object sender, indexedmzMLRowChangeEvent e);
        
        public delegate void mzMLRowChangeEventHandler(object sender, mzMLRowChangeEvent e);
        
        public delegate void cvListRowChangeEventHandler(object sender, cvListRowChangeEvent e);
        
        public delegate void cvRowChangeEventHandler(object sender, cvRowChangeEvent e);
        
        public delegate void fileDescriptionRowChangeEventHandler(object sender, fileDescriptionRowChangeEvent e);
        
        public delegate void fileContentRowChangeEventHandler(object sender, fileContentRowChangeEvent e);
        
        public delegate void referenceableParamGroupRefRowChangeEventHandler(object sender, referenceableParamGroupRefRowChangeEvent e);
        
        public delegate void cvParamRowChangeEventHandler(object sender, cvParamRowChangeEvent e);
        
        public delegate void userParamRowChangeEventHandler(object sender, userParamRowChangeEvent e);
        
        public delegate void sourceFileListRowChangeEventHandler(object sender, sourceFileListRowChangeEvent e);
        
        public delegate void sourceFileRowChangeEventHandler(object sender, sourceFileRowChangeEvent e);
        
        public delegate void contactRowChangeEventHandler(object sender, contactRowChangeEvent e);
        
        public delegate void referenceableParamGroupListRowChangeEventHandler(object sender, referenceableParamGroupListRowChangeEvent e);
        
        public delegate void referenceableParamGroupRowChangeEventHandler(object sender, referenceableParamGroupRowChangeEvent e);
        
        public delegate void sampleListRowChangeEventHandler(object sender, sampleListRowChangeEvent e);
        
        public delegate void sampleRowChangeEventHandler(object sender, sampleRowChangeEvent e);
        
        public delegate void softwareListRowChangeEventHandler(object sender, softwareListRowChangeEvent e);
        
        public delegate void softwareRowChangeEventHandler(object sender, softwareRowChangeEvent e);
        
        public delegate void scanSettingsListRowChangeEventHandler(object sender, scanSettingsListRowChangeEvent e);
        
        public delegate void scanSettingsRowChangeEventHandler(object sender, scanSettingsRowChangeEvent e);
        
        public delegate void sourceFileRefListRowChangeEventHandler(object sender, sourceFileRefListRowChangeEvent e);
        
        public delegate void sourceFileRefRowChangeEventHandler(object sender, sourceFileRefRowChangeEvent e);
        
        public delegate void targetListRowChangeEventHandler(object sender, targetListRowChangeEvent e);
        
        public delegate void targetRowChangeEventHandler(object sender, targetRowChangeEvent e);
        
        public delegate void instrumentConfigurationListRowChangeEventHandler(object sender, instrumentConfigurationListRowChangeEvent e);
        
        public delegate void instrumentConfigurationRowChangeEventHandler(object sender, instrumentConfigurationRowChangeEvent e);
        
        public delegate void componentListRowChangeEventHandler(object sender, componentListRowChangeEvent e);
        
        public delegate void sourceRowChangeEventHandler(object sender, sourceRowChangeEvent e);
        
        public delegate void analyzerRowChangeEventHandler(object sender, analyzerRowChangeEvent e);
        
        public delegate void detectorRowChangeEventHandler(object sender, detectorRowChangeEvent e);
        
        public delegate void softwareRefRowChangeEventHandler(object sender, softwareRefRowChangeEvent e);
        
        public delegate void dataProcessingListRowChangeEventHandler(object sender, dataProcessingListRowChangeEvent e);
        
        public delegate void dataProcessingRowChangeEventHandler(object sender, dataProcessingRowChangeEvent e);
        
        public delegate void processingMethodRowChangeEventHandler(object sender, processingMethodRowChangeEvent e);
        
        public delegate void runRowChangeEventHandler(object sender, runRowChangeEvent e);
        
        public delegate void spectrumListRowChangeEventHandler(object sender, spectrumListRowChangeEvent e);
        
        public delegate void spectrumRowChangeEventHandler(object sender, spectrumRowChangeEvent e);
        
        public delegate void scanListRowChangeEventHandler(object sender, scanListRowChangeEvent e);
        
        public delegate void scanRowChangeEventHandler(object sender, scanRowChangeEvent e);
        
        public delegate void scanWindowListRowChangeEventHandler(object sender, scanWindowListRowChangeEvent e);
        
        public delegate void scanWindowRowChangeEventHandler(object sender, scanWindowRowChangeEvent e);
        
        public delegate void precursorListRowChangeEventHandler(object sender, precursorListRowChangeEvent e);
        
        public delegate void precursorRowChangeEventHandler(object sender, precursorRowChangeEvent e);
        
        public delegate void isolationWindowRowChangeEventHandler(object sender, isolationWindowRowChangeEvent e);
        
        public delegate void selectedIonListRowChangeEventHandler(object sender, selectedIonListRowChangeEvent e);
        
        public delegate void selectedIonRowChangeEventHandler(object sender, selectedIonRowChangeEvent e);
        
        public delegate void activationRowChangeEventHandler(object sender, activationRowChangeEvent e);
        
        public delegate void productListRowChangeEventHandler(object sender, productListRowChangeEvent e);
        
        public delegate void productRowChangeEventHandler(object sender, productRowChangeEvent e);
        
        public delegate void binaryDataArrayListRowChangeEventHandler(object sender, binaryDataArrayListRowChangeEvent e);
        
        public delegate void binaryDataArrayRowChangeEventHandler(object sender, binaryDataArrayRowChangeEvent e);
        
        public delegate void chromatogramListRowChangeEventHandler(object sender, chromatogramListRowChangeEvent e);
        
        public delegate void chromatogramRowChangeEventHandler(object sender, chromatogramRowChangeEvent e);
        
        public delegate void indexListRowChangeEventHandler(object sender, indexListRowChangeEvent e);
        
        public delegate void indexRowChangeEventHandler(object sender, indexRowChangeEvent e);
        
        public delegate void offsetRowChangeEventHandler(object sender, offsetRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class indexedmzMLDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnindexListOffset;
            
            private global::System.Data.DataColumn columnfileChecksum;
            
            private global::System.Data.DataColumn columnindexedmzML_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexedmzMLDataTable() {
                this.TableName = "indexedmzML";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal indexedmzMLDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected indexedmzMLDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn indexListOffsetColumn {
                get {
                    return this.columnindexListOffset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fileChecksumColumn {
                get {
                    return this.columnfileChecksum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn indexedmzML_IdColumn {
                get {
                    return this.columnindexedmzML_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexedmzMLRow this[int index] {
                get {
                    return ((indexedmzMLRow)(this.Rows[index]));
                }
            }
            
            public event indexedmzMLRowChangeEventHandler indexedmzMLRowChanging;
            
            public event indexedmzMLRowChangeEventHandler indexedmzMLRowChanged;
            
            public event indexedmzMLRowChangeEventHandler indexedmzMLRowDeleting;
            
            public event indexedmzMLRowChangeEventHandler indexedmzMLRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddindexedmzMLRow(indexedmzMLRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexedmzMLRow AddindexedmzMLRow(long indexListOffset, string fileChecksum) {
                indexedmzMLRow rowindexedmzMLRow = ((indexedmzMLRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        indexListOffset,
                        fileChecksum,
                        null};
                rowindexedmzMLRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowindexedmzMLRow);
                return rowindexedmzMLRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                indexedmzMLDataTable cln = ((indexedmzMLDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new indexedmzMLDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnindexListOffset = base.Columns["indexListOffset"];
                this.columnfileChecksum = base.Columns["fileChecksum"];
                this.columnindexedmzML_Id = base.Columns["indexedmzML_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnindexListOffset = new global::System.Data.DataColumn("indexListOffset", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnindexListOffset);
                this.columnfileChecksum = new global::System.Data.DataColumn("fileChecksum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfileChecksum);
                this.columnindexedmzML_Id = new global::System.Data.DataColumn("indexedmzML_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnindexedmzML_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnindexedmzML_Id}, true));
                this.columnfileChecksum.AllowDBNull = false;
                this.columnindexedmzML_Id.AutoIncrement = true;
                this.columnindexedmzML_Id.AllowDBNull = false;
                this.columnindexedmzML_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexedmzMLRow NewindexedmzMLRow() {
                return ((indexedmzMLRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new indexedmzMLRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(indexedmzMLRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.indexedmzMLRowChanged != null)) {
                    this.indexedmzMLRowChanged(this, new indexedmzMLRowChangeEvent(((indexedmzMLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.indexedmzMLRowChanging != null)) {
                    this.indexedmzMLRowChanging(this, new indexedmzMLRowChangeEvent(((indexedmzMLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.indexedmzMLRowDeleted != null)) {
                    this.indexedmzMLRowDeleted(this, new indexedmzMLRowChangeEvent(((indexedmzMLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.indexedmzMLRowDeleting != null)) {
                    this.indexedmzMLRowDeleting(this, new indexedmzMLRowChangeEvent(((indexedmzMLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveindexedmzMLRow(indexedmzMLRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "indexedmzMLDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class mzMLDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnaccession;
            
            private global::System.Data.DataColumn columnversion;
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnmzML_Id;
            
            private global::System.Data.DataColumn columnindexedmzML_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mzMLDataTable() {
                this.TableName = "mzML";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal mzMLDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected mzMLDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accessionColumn {
                get {
                    return this.columnaccession;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn versionColumn {
                get {
                    return this.columnversion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mzML_IdColumn {
                get {
                    return this.columnmzML_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn indexedmzML_IdColumn {
                get {
                    return this.columnindexedmzML_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mzMLRow this[int index] {
                get {
                    return ((mzMLRow)(this.Rows[index]));
                }
            }
            
            public event mzMLRowChangeEventHandler mzMLRowChanging;
            
            public event mzMLRowChangeEventHandler mzMLRowChanged;
            
            public event mzMLRowChangeEventHandler mzMLRowDeleting;
            
            public event mzMLRowChangeEventHandler mzMLRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmzMLRow(mzMLRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mzMLRow AddmzMLRow(string accession, string version, string id, indexedmzMLRow parentindexedmzMLRowByindexedmzML_mzML) {
                mzMLRow rowmzMLRow = ((mzMLRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        accession,
                        version,
                        id,
                        null,
                        null};
                if ((parentindexedmzMLRowByindexedmzML_mzML != null)) {
                    columnValuesArray[4] = parentindexedmzMLRowByindexedmzML_mzML[2];
                }
                rowmzMLRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmzMLRow);
                return rowmzMLRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                mzMLDataTable cln = ((mzMLDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new mzMLDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnaccession = base.Columns["accession"];
                this.columnversion = base.Columns["version"];
                this.columnid = base.Columns["id"];
                this.columnmzML_Id = base.Columns["mzML_Id"];
                this.columnindexedmzML_Id = base.Columns["indexedmzML_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnaccession = new global::System.Data.DataColumn("accession", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnaccession);
                this.columnversion = new global::System.Data.DataColumn("version", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnversion);
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnmzML_Id = new global::System.Data.DataColumn("mzML_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmzML_Id);
                this.columnindexedmzML_Id = new global::System.Data.DataColumn("indexedmzML_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnindexedmzML_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnmzML_Id}, true));
                this.columnaccession.Namespace = "";
                this.columnversion.AllowDBNull = false;
                this.columnversion.Namespace = "";
                this.columnid.Namespace = "";
                this.columnmzML_Id.AutoIncrement = true;
                this.columnmzML_Id.AllowDBNull = false;
                this.columnmzML_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mzMLRow NewmzMLRow() {
                return ((mzMLRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new mzMLRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(mzMLRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.mzMLRowChanged != null)) {
                    this.mzMLRowChanged(this, new mzMLRowChangeEvent(((mzMLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.mzMLRowChanging != null)) {
                    this.mzMLRowChanging(this, new mzMLRowChangeEvent(((mzMLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.mzMLRowDeleted != null)) {
                    this.mzMLRowDeleted(this, new mzMLRowChangeEvent(((mzMLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.mzMLRowDeleting != null)) {
                    this.mzMLRowDeleting(this, new mzMLRowChangeEvent(((mzMLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovemzMLRow(mzMLRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "mzMLDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class cvListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columncvList_Id;
            
            private global::System.Data.DataColumn columnmzML_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvListDataTable() {
                this.TableName = "cvList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal cvListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected cvListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cvList_IdColumn {
                get {
                    return this.columncvList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mzML_IdColumn {
                get {
                    return this.columnmzML_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvListRow this[int index] {
                get {
                    return ((cvListRow)(this.Rows[index]));
                }
            }
            
            public event cvListRowChangeEventHandler cvListRowChanging;
            
            public event cvListRowChangeEventHandler cvListRowChanged;
            
            public event cvListRowChangeEventHandler cvListRowDeleting;
            
            public event cvListRowChangeEventHandler cvListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcvListRow(cvListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvListRow AddcvListRow(ulong count, mzMLRow parentmzMLRowBymzML_cvList) {
                cvListRow rowcvListRow = ((cvListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        null,
                        null};
                if ((parentmzMLRowBymzML_cvList != null)) {
                    columnValuesArray[2] = parentmzMLRowBymzML_cvList[3];
                }
                rowcvListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowcvListRow);
                return rowcvListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                cvListDataTable cln = ((cvListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new cvListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columncvList_Id = base.Columns["cvList_Id"];
                this.columnmzML_Id = base.Columns["mzML_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columncvList_Id = new global::System.Data.DataColumn("cvList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncvList_Id);
                this.columnmzML_Id = new global::System.Data.DataColumn("mzML_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmzML_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columncvList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columncvList_Id.AutoIncrement = true;
                this.columncvList_Id.AllowDBNull = false;
                this.columncvList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvListRow NewcvListRow() {
                return ((cvListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new cvListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(cvListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.cvListRowChanged != null)) {
                    this.cvListRowChanged(this, new cvListRowChangeEvent(((cvListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.cvListRowChanging != null)) {
                    this.cvListRowChanging(this, new cvListRowChangeEvent(((cvListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.cvListRowDeleted != null)) {
                    this.cvListRowDeleted(this, new cvListRowChangeEvent(((cvListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.cvListRowDeleting != null)) {
                    this.cvListRowDeleting(this, new cvListRowChangeEvent(((cvListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecvListRow(cvListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "cvListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class cvDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnfullName;
            
            private global::System.Data.DataColumn columnversion;
            
            private global::System.Data.DataColumn columnURI;
            
            private global::System.Data.DataColumn columncvList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvDataTable() {
                this.TableName = "cv";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal cvDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected cvDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fullNameColumn {
                get {
                    return this.columnfullName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn versionColumn {
                get {
                    return this.columnversion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn URIColumn {
                get {
                    return this.columnURI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cvList_IdColumn {
                get {
                    return this.columncvList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvRow this[int index] {
                get {
                    return ((cvRow)(this.Rows[index]));
                }
            }
            
            public event cvRowChangeEventHandler cvRowChanging;
            
            public event cvRowChangeEventHandler cvRowChanged;
            
            public event cvRowChangeEventHandler cvRowDeleting;
            
            public event cvRowChangeEventHandler cvRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcvRow(cvRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvRow AddcvRow(string id, string fullName, string version, System.Uri URI, cvListRow parentcvListRowBycvList_cv) {
                cvRow rowcvRow = ((cvRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        fullName,
                        version,
                        URI,
                        null};
                if ((parentcvListRowBycvList_cv != null)) {
                    columnValuesArray[4] = parentcvListRowBycvList_cv[1];
                }
                rowcvRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowcvRow);
                return rowcvRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                cvDataTable cln = ((cvDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new cvDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnfullName = base.Columns["fullName"];
                this.columnversion = base.Columns["version"];
                this.columnURI = base.Columns["URI"];
                this.columncvList_Id = base.Columns["cvList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnfullName = new global::System.Data.DataColumn("fullName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnfullName);
                this.columnversion = new global::System.Data.DataColumn("version", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnversion);
                this.columnURI = new global::System.Data.DataColumn("URI", typeof(global::System.Uri), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnURI);
                this.columncvList_Id = new global::System.Data.DataColumn("cvList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncvList_Id);
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnfullName.AllowDBNull = false;
                this.columnfullName.Namespace = "";
                this.columnversion.Namespace = "";
                this.columnURI.AllowDBNull = false;
                this.columnURI.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvRow NewcvRow() {
                return ((cvRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new cvRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(cvRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.cvRowChanged != null)) {
                    this.cvRowChanged(this, new cvRowChangeEvent(((cvRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.cvRowChanging != null)) {
                    this.cvRowChanging(this, new cvRowChangeEvent(((cvRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.cvRowDeleted != null)) {
                    this.cvRowDeleted(this, new cvRowChangeEvent(((cvRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.cvRowDeleting != null)) {
                    this.cvRowDeleting(this, new cvRowChangeEvent(((cvRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecvRow(cvRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "cvDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class fileDescriptionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnfileDescription_Id;
            
            private global::System.Data.DataColumn columnmzML_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileDescriptionDataTable() {
                this.TableName = "fileDescription";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal fileDescriptionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected fileDescriptionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fileDescription_IdColumn {
                get {
                    return this.columnfileDescription_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mzML_IdColumn {
                get {
                    return this.columnmzML_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileDescriptionRow this[int index] {
                get {
                    return ((fileDescriptionRow)(this.Rows[index]));
                }
            }
            
            public event fileDescriptionRowChangeEventHandler fileDescriptionRowChanging;
            
            public event fileDescriptionRowChangeEventHandler fileDescriptionRowChanged;
            
            public event fileDescriptionRowChangeEventHandler fileDescriptionRowDeleting;
            
            public event fileDescriptionRowChangeEventHandler fileDescriptionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddfileDescriptionRow(fileDescriptionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileDescriptionRow AddfileDescriptionRow(mzMLRow parentmzMLRowBymzML_fileDescription) {
                fileDescriptionRow rowfileDescriptionRow = ((fileDescriptionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentmzMLRowBymzML_fileDescription != null)) {
                    columnValuesArray[1] = parentmzMLRowBymzML_fileDescription[3];
                }
                rowfileDescriptionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowfileDescriptionRow);
                return rowfileDescriptionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                fileDescriptionDataTable cln = ((fileDescriptionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new fileDescriptionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnfileDescription_Id = base.Columns["fileDescription_Id"];
                this.columnmzML_Id = base.Columns["mzML_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnfileDescription_Id = new global::System.Data.DataColumn("fileDescription_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnfileDescription_Id);
                this.columnmzML_Id = new global::System.Data.DataColumn("mzML_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmzML_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnfileDescription_Id}, true));
                this.columnfileDescription_Id.AutoIncrement = true;
                this.columnfileDescription_Id.AllowDBNull = false;
                this.columnfileDescription_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileDescriptionRow NewfileDescriptionRow() {
                return ((fileDescriptionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new fileDescriptionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(fileDescriptionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.fileDescriptionRowChanged != null)) {
                    this.fileDescriptionRowChanged(this, new fileDescriptionRowChangeEvent(((fileDescriptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.fileDescriptionRowChanging != null)) {
                    this.fileDescriptionRowChanging(this, new fileDescriptionRowChangeEvent(((fileDescriptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.fileDescriptionRowDeleted != null)) {
                    this.fileDescriptionRowDeleted(this, new fileDescriptionRowChangeEvent(((fileDescriptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.fileDescriptionRowDeleting != null)) {
                    this.fileDescriptionRowDeleting(this, new fileDescriptionRowChangeEvent(((fileDescriptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovefileDescriptionRow(fileDescriptionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "fileDescriptionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class fileContentDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnfileContent_Id;
            
            private global::System.Data.DataColumn columnfileDescription_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileContentDataTable() {
                this.TableName = "fileContent";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal fileContentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected fileContentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fileContent_IdColumn {
                get {
                    return this.columnfileContent_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fileDescription_IdColumn {
                get {
                    return this.columnfileDescription_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileContentRow this[int index] {
                get {
                    return ((fileContentRow)(this.Rows[index]));
                }
            }
            
            public event fileContentRowChangeEventHandler fileContentRowChanging;
            
            public event fileContentRowChangeEventHandler fileContentRowChanged;
            
            public event fileContentRowChangeEventHandler fileContentRowDeleting;
            
            public event fileContentRowChangeEventHandler fileContentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddfileContentRow(fileContentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileContentRow AddfileContentRow(fileDescriptionRow parentfileDescriptionRowByfileDescription_fileContent) {
                fileContentRow rowfileContentRow = ((fileContentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentfileDescriptionRowByfileDescription_fileContent != null)) {
                    columnValuesArray[1] = parentfileDescriptionRowByfileDescription_fileContent[0];
                }
                rowfileContentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowfileContentRow);
                return rowfileContentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                fileContentDataTable cln = ((fileContentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new fileContentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnfileContent_Id = base.Columns["fileContent_Id"];
                this.columnfileDescription_Id = base.Columns["fileDescription_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnfileContent_Id = new global::System.Data.DataColumn("fileContent_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnfileContent_Id);
                this.columnfileDescription_Id = new global::System.Data.DataColumn("fileDescription_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnfileDescription_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnfileContent_Id}, true));
                this.columnfileContent_Id.AutoIncrement = true;
                this.columnfileContent_Id.AllowDBNull = false;
                this.columnfileContent_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileContentRow NewfileContentRow() {
                return ((fileContentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new fileContentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(fileContentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.fileContentRowChanged != null)) {
                    this.fileContentRowChanged(this, new fileContentRowChangeEvent(((fileContentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.fileContentRowChanging != null)) {
                    this.fileContentRowChanging(this, new fileContentRowChangeEvent(((fileContentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.fileContentRowDeleted != null)) {
                    this.fileContentRowDeleted(this, new fileContentRowChangeEvent(((fileContentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.fileContentRowDeleting != null)) {
                    this.fileContentRowDeleting(this, new fileContentRowChangeEvent(((fileContentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovefileContentRow(fileContentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "fileContentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class referenceableParamGroupRefDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn column_ref;
            
            private global::System.Data.DataColumn columnfileContent_Id;
            
            private global::System.Data.DataColumn columnsourceFile_Id;
            
            private global::System.Data.DataColumn columncontact_Id;
            
            private global::System.Data.DataColumn columnsample_Id;
            
            private global::System.Data.DataColumn columnsoftware_Id;
            
            private global::System.Data.DataColumn columntarget_Id;
            
            private global::System.Data.DataColumn columnscanSettings_Id;
            
            private global::System.Data.DataColumn columnsource_Id;
            
            private global::System.Data.DataColumn columnanalyzer_Id;
            
            private global::System.Data.DataColumn columndetector_Id;
            
            private global::System.Data.DataColumn columninstrumentConfiguration_Id;
            
            private global::System.Data.DataColumn columnprocessingMethod_Id;
            
            private global::System.Data.DataColumn columnscanWindow_Id;
            
            private global::System.Data.DataColumn columnscan_Id;
            
            private global::System.Data.DataColumn columnscanList_Id;
            
            private global::System.Data.DataColumn columnisolationWindow_Id;
            
            private global::System.Data.DataColumn columnselectedIon_Id;
            
            private global::System.Data.DataColumn columnactivation_Id;
            
            private global::System.Data.DataColumn columnbinaryDataArray_Id;
            
            private global::System.Data.DataColumn columnspectrum_Id;
            
            private global::System.Data.DataColumn columnchromatogram_Id;
            
            private global::System.Data.DataColumn columnrun_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefDataTable() {
                this.TableName = "referenceableParamGroupRef";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal referenceableParamGroupRefDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected referenceableParamGroupRefDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _refColumn {
                get {
                    return this.column_ref;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fileContent_IdColumn {
                get {
                    return this.columnfileContent_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourceFile_IdColumn {
                get {
                    return this.columnsourceFile_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn contact_IdColumn {
                get {
                    return this.columncontact_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sample_IdColumn {
                get {
                    return this.columnsample_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn software_IdColumn {
                get {
                    return this.columnsoftware_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn target_IdColumn {
                get {
                    return this.columntarget_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanSettings_IdColumn {
                get {
                    return this.columnscanSettings_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn source_IdColumn {
                get {
                    return this.columnsource_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn analyzer_IdColumn {
                get {
                    return this.columnanalyzer_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detector_IdColumn {
                get {
                    return this.columndetector_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn instrumentConfiguration_IdColumn {
                get {
                    return this.columninstrumentConfiguration_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn processingMethod_IdColumn {
                get {
                    return this.columnprocessingMethod_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanWindow_IdColumn {
                get {
                    return this.columnscanWindow_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scan_IdColumn {
                get {
                    return this.columnscan_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanList_IdColumn {
                get {
                    return this.columnscanList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isolationWindow_IdColumn {
                get {
                    return this.columnisolationWindow_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn selectedIon_IdColumn {
                get {
                    return this.columnselectedIon_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn activation_IdColumn {
                get {
                    return this.columnactivation_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn binaryDataArray_IdColumn {
                get {
                    return this.columnbinaryDataArray_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spectrum_IdColumn {
                get {
                    return this.columnspectrum_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chromatogram_IdColumn {
                get {
                    return this.columnchromatogram_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn run_IdColumn {
                get {
                    return this.columnrun_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow this[int index] {
                get {
                    return ((referenceableParamGroupRefRow)(this.Rows[index]));
                }
            }
            
            public event referenceableParamGroupRefRowChangeEventHandler referenceableParamGroupRefRowChanging;
            
            public event referenceableParamGroupRefRowChangeEventHandler referenceableParamGroupRefRowChanged;
            
            public event referenceableParamGroupRefRowChangeEventHandler referenceableParamGroupRefRowDeleting;
            
            public event referenceableParamGroupRefRowChangeEventHandler referenceableParamGroupRefRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddreferenceableParamGroupRefRow(referenceableParamGroupRefRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow AddreferenceableParamGroupRefRow(
                        string _ref, 
                        fileContentRow parentfileContentRowByfileContent_referenceableParamGroupRef, 
                        sourceFileRow parentsourceFileRowBysourceFile_referenceableParamGroupRef, 
                        contactRow parentcontactRowBycontact_referenceableParamGroupRef, 
                        sampleRow parentsampleRowBysample_referenceableParamGroupRef, 
                        softwareRow parentsoftwareRowBysoftware_referenceableParamGroupRef, 
                        targetRow parenttargetRowBytarget_referenceableParamGroupRef, 
                        scanSettingsRow parentscanSettingsRowByscanSettings_referenceableParamGroupRef, 
                        sourceRow parentsourceRowBysource_referenceableParamGroupRef, 
                        analyzerRow parentanalyzerRowByanalyzer_referenceableParamGroupRef, 
                        detectorRow parentdetectorRowBydetector_referenceableParamGroupRef, 
                        instrumentConfigurationRow parentinstrumentConfigurationRowByinstrumentConfiguration_referenceableParamGroupRef, 
                        processingMethodRow parentprocessingMethodRowByprocessingMethod_referenceableParamGroupRef, 
                        scanWindowRow parentscanWindowRowByscanWindow_referenceableParamGroupRef, 
                        scanRow parentscanRowByscan_referenceableParamGroupRef, 
                        scanListRow parentscanListRowByscanList_referenceableParamGroupRef, 
                        isolationWindowRow parentisolationWindowRowByisolationWindow_referenceableParamGroupRef, 
                        selectedIonRow parentselectedIonRowByselectedIon_referenceableParamGroupRef, 
                        activationRow parentactivationRowByactivation_referenceableParamGroupRef, 
                        binaryDataArrayRow parentbinaryDataArrayRowBybinaryDataArray_referenceableParamGroupRef, 
                        spectrumRow parentspectrumRowByspectrum_referenceableParamGroupRef, 
                        chromatogramRow parentchromatogramRowBychromatogram_referenceableParamGroupRef, 
                        runRow parentrunRowByrun_referenceableParamGroupRef) {
                referenceableParamGroupRefRow rowreferenceableParamGroupRefRow = ((referenceableParamGroupRefRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        _ref,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null};
                if ((parentfileContentRowByfileContent_referenceableParamGroupRef != null)) {
                    columnValuesArray[1] = parentfileContentRowByfileContent_referenceableParamGroupRef[0];
                }
                if ((parentsourceFileRowBysourceFile_referenceableParamGroupRef != null)) {
                    columnValuesArray[2] = parentsourceFileRowBysourceFile_referenceableParamGroupRef[3];
                }
                if ((parentcontactRowBycontact_referenceableParamGroupRef != null)) {
                    columnValuesArray[3] = parentcontactRowBycontact_referenceableParamGroupRef[0];
                }
                if ((parentsampleRowBysample_referenceableParamGroupRef != null)) {
                    columnValuesArray[4] = parentsampleRowBysample_referenceableParamGroupRef[2];
                }
                if ((parentsoftwareRowBysoftware_referenceableParamGroupRef != null)) {
                    columnValuesArray[5] = parentsoftwareRowBysoftware_referenceableParamGroupRef[2];
                }
                if ((parenttargetRowBytarget_referenceableParamGroupRef != null)) {
                    columnValuesArray[6] = parenttargetRowBytarget_referenceableParamGroupRef[0];
                }
                if ((parentscanSettingsRowByscanSettings_referenceableParamGroupRef != null)) {
                    columnValuesArray[7] = parentscanSettingsRowByscanSettings_referenceableParamGroupRef[1];
                }
                if ((parentsourceRowBysource_referenceableParamGroupRef != null)) {
                    columnValuesArray[8] = parentsourceRowBysource_referenceableParamGroupRef[1];
                }
                if ((parentanalyzerRowByanalyzer_referenceableParamGroupRef != null)) {
                    columnValuesArray[9] = parentanalyzerRowByanalyzer_referenceableParamGroupRef[1];
                }
                if ((parentdetectorRowBydetector_referenceableParamGroupRef != null)) {
                    columnValuesArray[10] = parentdetectorRowBydetector_referenceableParamGroupRef[1];
                }
                if ((parentinstrumentConfigurationRowByinstrumentConfiguration_referenceableParamGroupRef != null)) {
                    columnValuesArray[11] = parentinstrumentConfigurationRowByinstrumentConfiguration_referenceableParamGroupRef[2];
                }
                if ((parentprocessingMethodRowByprocessingMethod_referenceableParamGroupRef != null)) {
                    columnValuesArray[12] = parentprocessingMethodRowByprocessingMethod_referenceableParamGroupRef[2];
                }
                if ((parentscanWindowRowByscanWindow_referenceableParamGroupRef != null)) {
                    columnValuesArray[13] = parentscanWindowRowByscanWindow_referenceableParamGroupRef[0];
                }
                if ((parentscanRowByscan_referenceableParamGroupRef != null)) {
                    columnValuesArray[14] = parentscanRowByscan_referenceableParamGroupRef[4];
                }
                if ((parentscanListRowByscanList_referenceableParamGroupRef != null)) {
                    columnValuesArray[15] = parentscanListRowByscanList_referenceableParamGroupRef[1];
                }
                if ((parentisolationWindowRowByisolationWindow_referenceableParamGroupRef != null)) {
                    columnValuesArray[16] = parentisolationWindowRowByisolationWindow_referenceableParamGroupRef[0];
                }
                if ((parentselectedIonRowByselectedIon_referenceableParamGroupRef != null)) {
                    columnValuesArray[17] = parentselectedIonRowByselectedIon_referenceableParamGroupRef[0];
                }
                if ((parentactivationRowByactivation_referenceableParamGroupRef != null)) {
                    columnValuesArray[18] = parentactivationRowByactivation_referenceableParamGroupRef[0];
                }
                if ((parentbinaryDataArrayRowBybinaryDataArray_referenceableParamGroupRef != null)) {
                    columnValuesArray[19] = parentbinaryDataArrayRowBybinaryDataArray_referenceableParamGroupRef[4];
                }
                if ((parentspectrumRowByspectrum_referenceableParamGroupRef != null)) {
                    columnValuesArray[20] = parentspectrumRowByspectrum_referenceableParamGroupRef[6];
                }
                if ((parentchromatogramRowBychromatogram_referenceableParamGroupRef != null)) {
                    columnValuesArray[21] = parentchromatogramRowBychromatogram_referenceableParamGroupRef[4];
                }
                if ((parentrunRowByrun_referenceableParamGroupRef != null)) {
                    columnValuesArray[22] = parentrunRowByrun_referenceableParamGroupRef[5];
                }
                rowreferenceableParamGroupRefRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowreferenceableParamGroupRefRow);
                return rowreferenceableParamGroupRefRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                referenceableParamGroupRefDataTable cln = ((referenceableParamGroupRefDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new referenceableParamGroupRefDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column_ref = base.Columns["ref"];
                this.columnfileContent_Id = base.Columns["fileContent_Id"];
                this.columnsourceFile_Id = base.Columns["sourceFile_Id"];
                this.columncontact_Id = base.Columns["contact_Id"];
                this.columnsample_Id = base.Columns["sample_Id"];
                this.columnsoftware_Id = base.Columns["software_Id"];
                this.columntarget_Id = base.Columns["target_Id"];
                this.columnscanSettings_Id = base.Columns["scanSettings_Id"];
                this.columnsource_Id = base.Columns["source_Id"];
                this.columnanalyzer_Id = base.Columns["analyzer_Id"];
                this.columndetector_Id = base.Columns["detector_Id"];
                this.columninstrumentConfiguration_Id = base.Columns["instrumentConfiguration_Id"];
                this.columnprocessingMethod_Id = base.Columns["processingMethod_Id"];
                this.columnscanWindow_Id = base.Columns["scanWindow_Id"];
                this.columnscan_Id = base.Columns["scan_Id"];
                this.columnscanList_Id = base.Columns["scanList_Id"];
                this.columnisolationWindow_Id = base.Columns["isolationWindow_Id"];
                this.columnselectedIon_Id = base.Columns["selectedIon_Id"];
                this.columnactivation_Id = base.Columns["activation_Id"];
                this.columnbinaryDataArray_Id = base.Columns["binaryDataArray_Id"];
                this.columnspectrum_Id = base.Columns["spectrum_Id"];
                this.columnchromatogram_Id = base.Columns["chromatogram_Id"];
                this.columnrun_Id = base.Columns["run_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column_ref = new global::System.Data.DataColumn("ref", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.column_ref);
                this.columnfileContent_Id = new global::System.Data.DataColumn("fileContent_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnfileContent_Id);
                this.columnsourceFile_Id = new global::System.Data.DataColumn("sourceFile_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsourceFile_Id);
                this.columncontact_Id = new global::System.Data.DataColumn("contact_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncontact_Id);
                this.columnsample_Id = new global::System.Data.DataColumn("sample_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsample_Id);
                this.columnsoftware_Id = new global::System.Data.DataColumn("software_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsoftware_Id);
                this.columntarget_Id = new global::System.Data.DataColumn("target_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columntarget_Id);
                this.columnscanSettings_Id = new global::System.Data.DataColumn("scanSettings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscanSettings_Id);
                this.columnsource_Id = new global::System.Data.DataColumn("source_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsource_Id);
                this.columnanalyzer_Id = new global::System.Data.DataColumn("analyzer_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnanalyzer_Id);
                this.columndetector_Id = new global::System.Data.DataColumn("detector_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndetector_Id);
                this.columninstrumentConfiguration_Id = new global::System.Data.DataColumn("instrumentConfiguration_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columninstrumentConfiguration_Id);
                this.columnprocessingMethod_Id = new global::System.Data.DataColumn("processingMethod_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnprocessingMethod_Id);
                this.columnscanWindow_Id = new global::System.Data.DataColumn("scanWindow_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscanWindow_Id);
                this.columnscan_Id = new global::System.Data.DataColumn("scan_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscan_Id);
                this.columnscanList_Id = new global::System.Data.DataColumn("scanList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscanList_Id);
                this.columnisolationWindow_Id = new global::System.Data.DataColumn("isolationWindow_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnisolationWindow_Id);
                this.columnselectedIon_Id = new global::System.Data.DataColumn("selectedIon_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnselectedIon_Id);
                this.columnactivation_Id = new global::System.Data.DataColumn("activation_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnactivation_Id);
                this.columnbinaryDataArray_Id = new global::System.Data.DataColumn("binaryDataArray_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnbinaryDataArray_Id);
                this.columnspectrum_Id = new global::System.Data.DataColumn("spectrum_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnspectrum_Id);
                this.columnchromatogram_Id = new global::System.Data.DataColumn("chromatogram_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnchromatogram_Id);
                this.columnrun_Id = new global::System.Data.DataColumn("run_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrun_Id);
                this.column_ref.AllowDBNull = false;
                this.column_ref.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow NewreferenceableParamGroupRefRow() {
                return ((referenceableParamGroupRefRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new referenceableParamGroupRefRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(referenceableParamGroupRefRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.referenceableParamGroupRefRowChanged != null)) {
                    this.referenceableParamGroupRefRowChanged(this, new referenceableParamGroupRefRowChangeEvent(((referenceableParamGroupRefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.referenceableParamGroupRefRowChanging != null)) {
                    this.referenceableParamGroupRefRowChanging(this, new referenceableParamGroupRefRowChangeEvent(((referenceableParamGroupRefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.referenceableParamGroupRefRowDeleted != null)) {
                    this.referenceableParamGroupRefRowDeleted(this, new referenceableParamGroupRefRowChangeEvent(((referenceableParamGroupRefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.referenceableParamGroupRefRowDeleting != null)) {
                    this.referenceableParamGroupRefRowDeleting(this, new referenceableParamGroupRefRowChangeEvent(((referenceableParamGroupRefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovereferenceableParamGroupRefRow(referenceableParamGroupRefRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "referenceableParamGroupRefDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class cvParamDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncvRef;
            
            private global::System.Data.DataColumn columnaccession;
            
            private global::System.Data.DataColumn columnvalue;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnunitAccession;
            
            private global::System.Data.DataColumn columnunitName;
            
            private global::System.Data.DataColumn columnunitCvRef;
            
            private global::System.Data.DataColumn columnfileContent_Id;
            
            private global::System.Data.DataColumn columnsourceFile_Id;
            
            private global::System.Data.DataColumn columncontact_Id;
            
            private global::System.Data.DataColumn columnreferenceableParamGroup_Id;
            
            private global::System.Data.DataColumn columnsample_Id;
            
            private global::System.Data.DataColumn columnsoftware_Id;
            
            private global::System.Data.DataColumn columntarget_Id;
            
            private global::System.Data.DataColumn columnscanSettings_Id;
            
            private global::System.Data.DataColumn columnsource_Id;
            
            private global::System.Data.DataColumn columnanalyzer_Id;
            
            private global::System.Data.DataColumn columndetector_Id;
            
            private global::System.Data.DataColumn columninstrumentConfiguration_Id;
            
            private global::System.Data.DataColumn columnprocessingMethod_Id;
            
            private global::System.Data.DataColumn columnscanWindow_Id;
            
            private global::System.Data.DataColumn columnscan_Id;
            
            private global::System.Data.DataColumn columnscanList_Id;
            
            private global::System.Data.DataColumn columnisolationWindow_Id;
            
            private global::System.Data.DataColumn columnselectedIon_Id;
            
            private global::System.Data.DataColumn columnactivation_Id;
            
            private global::System.Data.DataColumn columnbinaryDataArray_Id;
            
            private global::System.Data.DataColumn columnspectrum_Id;
            
            private global::System.Data.DataColumn columnchromatogram_Id;
            
            private global::System.Data.DataColumn columnrun_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamDataTable() {
                this.TableName = "cvParam";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal cvParamDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected cvParamDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cvRefColumn {
                get {
                    return this.columncvRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accessionColumn {
                get {
                    return this.columnaccession;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitAccessionColumn {
                get {
                    return this.columnunitAccession;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitNameColumn {
                get {
                    return this.columnunitName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitCvRefColumn {
                get {
                    return this.columnunitCvRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fileContent_IdColumn {
                get {
                    return this.columnfileContent_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourceFile_IdColumn {
                get {
                    return this.columnsourceFile_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn contact_IdColumn {
                get {
                    return this.columncontact_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn referenceableParamGroup_IdColumn {
                get {
                    return this.columnreferenceableParamGroup_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sample_IdColumn {
                get {
                    return this.columnsample_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn software_IdColumn {
                get {
                    return this.columnsoftware_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn target_IdColumn {
                get {
                    return this.columntarget_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanSettings_IdColumn {
                get {
                    return this.columnscanSettings_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn source_IdColumn {
                get {
                    return this.columnsource_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn analyzer_IdColumn {
                get {
                    return this.columnanalyzer_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detector_IdColumn {
                get {
                    return this.columndetector_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn instrumentConfiguration_IdColumn {
                get {
                    return this.columninstrumentConfiguration_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn processingMethod_IdColumn {
                get {
                    return this.columnprocessingMethod_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanWindow_IdColumn {
                get {
                    return this.columnscanWindow_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scan_IdColumn {
                get {
                    return this.columnscan_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanList_IdColumn {
                get {
                    return this.columnscanList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isolationWindow_IdColumn {
                get {
                    return this.columnisolationWindow_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn selectedIon_IdColumn {
                get {
                    return this.columnselectedIon_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn activation_IdColumn {
                get {
                    return this.columnactivation_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn binaryDataArray_IdColumn {
                get {
                    return this.columnbinaryDataArray_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spectrum_IdColumn {
                get {
                    return this.columnspectrum_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chromatogram_IdColumn {
                get {
                    return this.columnchromatogram_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn run_IdColumn {
                get {
                    return this.columnrun_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow this[int index] {
                get {
                    return ((cvParamRow)(this.Rows[index]));
                }
            }
            
            public event cvParamRowChangeEventHandler cvParamRowChanging;
            
            public event cvParamRowChangeEventHandler cvParamRowChanged;
            
            public event cvParamRowChangeEventHandler cvParamRowDeleting;
            
            public event cvParamRowChangeEventHandler cvParamRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcvParamRow(cvParamRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow AddcvParamRow(
                        string cvRef, 
                        string accession, 
                        string value, 
                        string name, 
                        string unitAccession, 
                        string unitName, 
                        string unitCvRef, 
                        fileContentRow parentfileContentRowByfileContent_cvParam, 
                        sourceFileRow parentsourceFileRowBysourceFile_cvParam, 
                        contactRow parentcontactRowBycontact_cvParam, 
                        referenceableParamGroupRow parentreferenceableParamGroupRowByreferenceableParamGroup_cvParam, 
                        sampleRow parentsampleRowBysample_cvParam, 
                        softwareRow parentsoftwareRowBysoftware_cvParam, 
                        targetRow parenttargetRowBytarget_cvParam, 
                        scanSettingsRow parentscanSettingsRowByscanSettings_cvParam, 
                        sourceRow parentsourceRowBysource_cvParam, 
                        analyzerRow parentanalyzerRowByanalyzer_cvParam, 
                        detectorRow parentdetectorRowBydetector_cvParam, 
                        instrumentConfigurationRow parentinstrumentConfigurationRowByinstrumentConfiguration_cvParam, 
                        processingMethodRow parentprocessingMethodRowByprocessingMethod_cvParam, 
                        scanWindowRow parentscanWindowRowByscanWindow_cvParam, 
                        scanRow parentscanRowByscan_cvParam, 
                        scanListRow parentscanListRowByscanList_cvParam, 
                        isolationWindowRow parentisolationWindowRowByisolationWindow_cvParam, 
                        selectedIonRow parentselectedIonRowByselectedIon_cvParam, 
                        activationRow parentactivationRowByactivation_cvParam, 
                        binaryDataArrayRow parentbinaryDataArrayRowBybinaryDataArray_cvParam, 
                        spectrumRow parentspectrumRowByspectrum_cvParam, 
                        chromatogramRow parentchromatogramRowBychromatogram_cvParam, 
                        runRow parentrunRowByrun_cvParam) {
                cvParamRow rowcvParamRow = ((cvParamRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cvRef,
                        accession,
                        value,
                        name,
                        unitAccession,
                        unitName,
                        unitCvRef,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null};
                if ((parentfileContentRowByfileContent_cvParam != null)) {
                    columnValuesArray[7] = parentfileContentRowByfileContent_cvParam[0];
                }
                if ((parentsourceFileRowBysourceFile_cvParam != null)) {
                    columnValuesArray[8] = parentsourceFileRowBysourceFile_cvParam[3];
                }
                if ((parentcontactRowBycontact_cvParam != null)) {
                    columnValuesArray[9] = parentcontactRowBycontact_cvParam[0];
                }
                if ((parentreferenceableParamGroupRowByreferenceableParamGroup_cvParam != null)) {
                    columnValuesArray[10] = parentreferenceableParamGroupRowByreferenceableParamGroup_cvParam[1];
                }
                if ((parentsampleRowBysample_cvParam != null)) {
                    columnValuesArray[11] = parentsampleRowBysample_cvParam[2];
                }
                if ((parentsoftwareRowBysoftware_cvParam != null)) {
                    columnValuesArray[12] = parentsoftwareRowBysoftware_cvParam[2];
                }
                if ((parenttargetRowBytarget_cvParam != null)) {
                    columnValuesArray[13] = parenttargetRowBytarget_cvParam[0];
                }
                if ((parentscanSettingsRowByscanSettings_cvParam != null)) {
                    columnValuesArray[14] = parentscanSettingsRowByscanSettings_cvParam[1];
                }
                if ((parentsourceRowBysource_cvParam != null)) {
                    columnValuesArray[15] = parentsourceRowBysource_cvParam[1];
                }
                if ((parentanalyzerRowByanalyzer_cvParam != null)) {
                    columnValuesArray[16] = parentanalyzerRowByanalyzer_cvParam[1];
                }
                if ((parentdetectorRowBydetector_cvParam != null)) {
                    columnValuesArray[17] = parentdetectorRowBydetector_cvParam[1];
                }
                if ((parentinstrumentConfigurationRowByinstrumentConfiguration_cvParam != null)) {
                    columnValuesArray[18] = parentinstrumentConfigurationRowByinstrumentConfiguration_cvParam[2];
                }
                if ((parentprocessingMethodRowByprocessingMethod_cvParam != null)) {
                    columnValuesArray[19] = parentprocessingMethodRowByprocessingMethod_cvParam[2];
                }
                if ((parentscanWindowRowByscanWindow_cvParam != null)) {
                    columnValuesArray[20] = parentscanWindowRowByscanWindow_cvParam[0];
                }
                if ((parentscanRowByscan_cvParam != null)) {
                    columnValuesArray[21] = parentscanRowByscan_cvParam[4];
                }
                if ((parentscanListRowByscanList_cvParam != null)) {
                    columnValuesArray[22] = parentscanListRowByscanList_cvParam[1];
                }
                if ((parentisolationWindowRowByisolationWindow_cvParam != null)) {
                    columnValuesArray[23] = parentisolationWindowRowByisolationWindow_cvParam[0];
                }
                if ((parentselectedIonRowByselectedIon_cvParam != null)) {
                    columnValuesArray[24] = parentselectedIonRowByselectedIon_cvParam[0];
                }
                if ((parentactivationRowByactivation_cvParam != null)) {
                    columnValuesArray[25] = parentactivationRowByactivation_cvParam[0];
                }
                if ((parentbinaryDataArrayRowBybinaryDataArray_cvParam != null)) {
                    columnValuesArray[26] = parentbinaryDataArrayRowBybinaryDataArray_cvParam[4];
                }
                if ((parentspectrumRowByspectrum_cvParam != null)) {
                    columnValuesArray[27] = parentspectrumRowByspectrum_cvParam[6];
                }
                if ((parentchromatogramRowBychromatogram_cvParam != null)) {
                    columnValuesArray[28] = parentchromatogramRowBychromatogram_cvParam[4];
                }
                if ((parentrunRowByrun_cvParam != null)) {
                    columnValuesArray[29] = parentrunRowByrun_cvParam[5];
                }
                rowcvParamRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowcvParamRow);
                return rowcvParamRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                cvParamDataTable cln = ((cvParamDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new cvParamDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncvRef = base.Columns["cvRef"];
                this.columnaccession = base.Columns["accession"];
                this.columnvalue = base.Columns["value"];
                this.columnname = base.Columns["name"];
                this.columnunitAccession = base.Columns["unitAccession"];
                this.columnunitName = base.Columns["unitName"];
                this.columnunitCvRef = base.Columns["unitCvRef"];
                this.columnfileContent_Id = base.Columns["fileContent_Id"];
                this.columnsourceFile_Id = base.Columns["sourceFile_Id"];
                this.columncontact_Id = base.Columns["contact_Id"];
                this.columnreferenceableParamGroup_Id = base.Columns["referenceableParamGroup_Id"];
                this.columnsample_Id = base.Columns["sample_Id"];
                this.columnsoftware_Id = base.Columns["software_Id"];
                this.columntarget_Id = base.Columns["target_Id"];
                this.columnscanSettings_Id = base.Columns["scanSettings_Id"];
                this.columnsource_Id = base.Columns["source_Id"];
                this.columnanalyzer_Id = base.Columns["analyzer_Id"];
                this.columndetector_Id = base.Columns["detector_Id"];
                this.columninstrumentConfiguration_Id = base.Columns["instrumentConfiguration_Id"];
                this.columnprocessingMethod_Id = base.Columns["processingMethod_Id"];
                this.columnscanWindow_Id = base.Columns["scanWindow_Id"];
                this.columnscan_Id = base.Columns["scan_Id"];
                this.columnscanList_Id = base.Columns["scanList_Id"];
                this.columnisolationWindow_Id = base.Columns["isolationWindow_Id"];
                this.columnselectedIon_Id = base.Columns["selectedIon_Id"];
                this.columnactivation_Id = base.Columns["activation_Id"];
                this.columnbinaryDataArray_Id = base.Columns["binaryDataArray_Id"];
                this.columnspectrum_Id = base.Columns["spectrum_Id"];
                this.columnchromatogram_Id = base.Columns["chromatogram_Id"];
                this.columnrun_Id = base.Columns["run_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncvRef = new global::System.Data.DataColumn("cvRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncvRef);
                this.columnaccession = new global::System.Data.DataColumn("accession", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnaccession);
                this.columnvalue = new global::System.Data.DataColumn("value", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnvalue);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columnunitAccession = new global::System.Data.DataColumn("unitAccession", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnunitAccession);
                this.columnunitName = new global::System.Data.DataColumn("unitName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnunitName);
                this.columnunitCvRef = new global::System.Data.DataColumn("unitCvRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnunitCvRef);
                this.columnfileContent_Id = new global::System.Data.DataColumn("fileContent_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnfileContent_Id);
                this.columnsourceFile_Id = new global::System.Data.DataColumn("sourceFile_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsourceFile_Id);
                this.columncontact_Id = new global::System.Data.DataColumn("contact_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncontact_Id);
                this.columnreferenceableParamGroup_Id = new global::System.Data.DataColumn("referenceableParamGroup_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnreferenceableParamGroup_Id);
                this.columnsample_Id = new global::System.Data.DataColumn("sample_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsample_Id);
                this.columnsoftware_Id = new global::System.Data.DataColumn("software_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsoftware_Id);
                this.columntarget_Id = new global::System.Data.DataColumn("target_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columntarget_Id);
                this.columnscanSettings_Id = new global::System.Data.DataColumn("scanSettings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscanSettings_Id);
                this.columnsource_Id = new global::System.Data.DataColumn("source_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsource_Id);
                this.columnanalyzer_Id = new global::System.Data.DataColumn("analyzer_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnanalyzer_Id);
                this.columndetector_Id = new global::System.Data.DataColumn("detector_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndetector_Id);
                this.columninstrumentConfiguration_Id = new global::System.Data.DataColumn("instrumentConfiguration_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columninstrumentConfiguration_Id);
                this.columnprocessingMethod_Id = new global::System.Data.DataColumn("processingMethod_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnprocessingMethod_Id);
                this.columnscanWindow_Id = new global::System.Data.DataColumn("scanWindow_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscanWindow_Id);
                this.columnscan_Id = new global::System.Data.DataColumn("scan_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscan_Id);
                this.columnscanList_Id = new global::System.Data.DataColumn("scanList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscanList_Id);
                this.columnisolationWindow_Id = new global::System.Data.DataColumn("isolationWindow_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnisolationWindow_Id);
                this.columnselectedIon_Id = new global::System.Data.DataColumn("selectedIon_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnselectedIon_Id);
                this.columnactivation_Id = new global::System.Data.DataColumn("activation_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnactivation_Id);
                this.columnbinaryDataArray_Id = new global::System.Data.DataColumn("binaryDataArray_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnbinaryDataArray_Id);
                this.columnspectrum_Id = new global::System.Data.DataColumn("spectrum_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnspectrum_Id);
                this.columnchromatogram_Id = new global::System.Data.DataColumn("chromatogram_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnchromatogram_Id);
                this.columnrun_Id = new global::System.Data.DataColumn("run_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrun_Id);
                this.columncvRef.AllowDBNull = false;
                this.columncvRef.Namespace = "";
                this.columnaccession.AllowDBNull = false;
                this.columnaccession.Namespace = "";
                this.columnvalue.Namespace = "";
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columnunitAccession.Namespace = "";
                this.columnunitName.Namespace = "";
                this.columnunitCvRef.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow NewcvParamRow() {
                return ((cvParamRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new cvParamRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(cvParamRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.cvParamRowChanged != null)) {
                    this.cvParamRowChanged(this, new cvParamRowChangeEvent(((cvParamRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.cvParamRowChanging != null)) {
                    this.cvParamRowChanging(this, new cvParamRowChangeEvent(((cvParamRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.cvParamRowDeleted != null)) {
                    this.cvParamRowDeleted(this, new cvParamRowChangeEvent(((cvParamRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.cvParamRowDeleting != null)) {
                    this.cvParamRowDeleting(this, new cvParamRowChangeEvent(((cvParamRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecvParamRow(cvParamRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "cvParamDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class userParamDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columnvalue;
            
            private global::System.Data.DataColumn columnunitAccession;
            
            private global::System.Data.DataColumn columnunitName;
            
            private global::System.Data.DataColumn columnunitCvRef;
            
            private global::System.Data.DataColumn columnfileContent_Id;
            
            private global::System.Data.DataColumn columnsourceFile_Id;
            
            private global::System.Data.DataColumn columncontact_Id;
            
            private global::System.Data.DataColumn columnreferenceableParamGroup_Id;
            
            private global::System.Data.DataColumn columnsample_Id;
            
            private global::System.Data.DataColumn columnsoftware_Id;
            
            private global::System.Data.DataColumn columntarget_Id;
            
            private global::System.Data.DataColumn columnscanSettings_Id;
            
            private global::System.Data.DataColumn columnsource_Id;
            
            private global::System.Data.DataColumn columnanalyzer_Id;
            
            private global::System.Data.DataColumn columndetector_Id;
            
            private global::System.Data.DataColumn columninstrumentConfiguration_Id;
            
            private global::System.Data.DataColumn columnprocessingMethod_Id;
            
            private global::System.Data.DataColumn columnscanWindow_Id;
            
            private global::System.Data.DataColumn columnscan_Id;
            
            private global::System.Data.DataColumn columnscanList_Id;
            
            private global::System.Data.DataColumn columnisolationWindow_Id;
            
            private global::System.Data.DataColumn columnselectedIon_Id;
            
            private global::System.Data.DataColumn columnactivation_Id;
            
            private global::System.Data.DataColumn columnbinaryDataArray_Id;
            
            private global::System.Data.DataColumn columnspectrum_Id;
            
            private global::System.Data.DataColumn columnchromatogram_Id;
            
            private global::System.Data.DataColumn columnrun_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamDataTable() {
                this.TableName = "userParam";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal userParamDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected userParamDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitAccessionColumn {
                get {
                    return this.columnunitAccession;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitNameColumn {
                get {
                    return this.columnunitName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitCvRefColumn {
                get {
                    return this.columnunitCvRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fileContent_IdColumn {
                get {
                    return this.columnfileContent_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourceFile_IdColumn {
                get {
                    return this.columnsourceFile_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn contact_IdColumn {
                get {
                    return this.columncontact_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn referenceableParamGroup_IdColumn {
                get {
                    return this.columnreferenceableParamGroup_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sample_IdColumn {
                get {
                    return this.columnsample_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn software_IdColumn {
                get {
                    return this.columnsoftware_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn target_IdColumn {
                get {
                    return this.columntarget_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanSettings_IdColumn {
                get {
                    return this.columnscanSettings_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn source_IdColumn {
                get {
                    return this.columnsource_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn analyzer_IdColumn {
                get {
                    return this.columnanalyzer_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detector_IdColumn {
                get {
                    return this.columndetector_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn instrumentConfiguration_IdColumn {
                get {
                    return this.columninstrumentConfiguration_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn processingMethod_IdColumn {
                get {
                    return this.columnprocessingMethod_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanWindow_IdColumn {
                get {
                    return this.columnscanWindow_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scan_IdColumn {
                get {
                    return this.columnscan_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanList_IdColumn {
                get {
                    return this.columnscanList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isolationWindow_IdColumn {
                get {
                    return this.columnisolationWindow_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn selectedIon_IdColumn {
                get {
                    return this.columnselectedIon_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn activation_IdColumn {
                get {
                    return this.columnactivation_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn binaryDataArray_IdColumn {
                get {
                    return this.columnbinaryDataArray_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spectrum_IdColumn {
                get {
                    return this.columnspectrum_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chromatogram_IdColumn {
                get {
                    return this.columnchromatogram_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn run_IdColumn {
                get {
                    return this.columnrun_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow this[int index] {
                get {
                    return ((userParamRow)(this.Rows[index]));
                }
            }
            
            public event userParamRowChangeEventHandler userParamRowChanging;
            
            public event userParamRowChangeEventHandler userParamRowChanged;
            
            public event userParamRowChangeEventHandler userParamRowDeleting;
            
            public event userParamRowChangeEventHandler userParamRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdduserParamRow(userParamRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow AdduserParamRow(
                        string name, 
                        string type, 
                        string value, 
                        string unitAccession, 
                        string unitName, 
                        string unitCvRef, 
                        fileContentRow parentfileContentRowByfileContent_userParam, 
                        sourceFileRow parentsourceFileRowBysourceFile_userParam, 
                        contactRow parentcontactRowBycontact_userParam, 
                        referenceableParamGroupRow parentreferenceableParamGroupRowByreferenceableParamGroup_userParam, 
                        sampleRow parentsampleRowBysample_userParam, 
                        softwareRow parentsoftwareRowBysoftware_userParam, 
                        targetRow parenttargetRowBytarget_userParam, 
                        scanSettingsRow parentscanSettingsRowByscanSettings_userParam, 
                        sourceRow parentsourceRowBysource_userParam, 
                        analyzerRow parentanalyzerRowByanalyzer_userParam, 
                        detectorRow parentdetectorRowBydetector_userParam, 
                        instrumentConfigurationRow parentinstrumentConfigurationRowByinstrumentConfiguration_userParam, 
                        processingMethodRow parentprocessingMethodRowByprocessingMethod_userParam, 
                        scanWindowRow parentscanWindowRowByscanWindow_userParam, 
                        scanRow parentscanRowByscan_userParam, 
                        scanListRow parentscanListRowByscanList_userParam, 
                        isolationWindowRow parentisolationWindowRowByisolationWindow_userParam, 
                        selectedIonRow parentselectedIonRowByselectedIon_userParam, 
                        activationRow parentactivationRowByactivation_userParam, 
                        binaryDataArrayRow parentbinaryDataArrayRowBybinaryDataArray_userParam, 
                        spectrumRow parentspectrumRowByspectrum_userParam, 
                        chromatogramRow parentchromatogramRowBychromatogram_userParam, 
                        runRow parentrunRowByrun_userParam) {
                userParamRow rowuserParamRow = ((userParamRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name,
                        type,
                        value,
                        unitAccession,
                        unitName,
                        unitCvRef,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null};
                if ((parentfileContentRowByfileContent_userParam != null)) {
                    columnValuesArray[6] = parentfileContentRowByfileContent_userParam[0];
                }
                if ((parentsourceFileRowBysourceFile_userParam != null)) {
                    columnValuesArray[7] = parentsourceFileRowBysourceFile_userParam[3];
                }
                if ((parentcontactRowBycontact_userParam != null)) {
                    columnValuesArray[8] = parentcontactRowBycontact_userParam[0];
                }
                if ((parentreferenceableParamGroupRowByreferenceableParamGroup_userParam != null)) {
                    columnValuesArray[9] = parentreferenceableParamGroupRowByreferenceableParamGroup_userParam[1];
                }
                if ((parentsampleRowBysample_userParam != null)) {
                    columnValuesArray[10] = parentsampleRowBysample_userParam[2];
                }
                if ((parentsoftwareRowBysoftware_userParam != null)) {
                    columnValuesArray[11] = parentsoftwareRowBysoftware_userParam[2];
                }
                if ((parenttargetRowBytarget_userParam != null)) {
                    columnValuesArray[12] = parenttargetRowBytarget_userParam[0];
                }
                if ((parentscanSettingsRowByscanSettings_userParam != null)) {
                    columnValuesArray[13] = parentscanSettingsRowByscanSettings_userParam[1];
                }
                if ((parentsourceRowBysource_userParam != null)) {
                    columnValuesArray[14] = parentsourceRowBysource_userParam[1];
                }
                if ((parentanalyzerRowByanalyzer_userParam != null)) {
                    columnValuesArray[15] = parentanalyzerRowByanalyzer_userParam[1];
                }
                if ((parentdetectorRowBydetector_userParam != null)) {
                    columnValuesArray[16] = parentdetectorRowBydetector_userParam[1];
                }
                if ((parentinstrumentConfigurationRowByinstrumentConfiguration_userParam != null)) {
                    columnValuesArray[17] = parentinstrumentConfigurationRowByinstrumentConfiguration_userParam[2];
                }
                if ((parentprocessingMethodRowByprocessingMethod_userParam != null)) {
                    columnValuesArray[18] = parentprocessingMethodRowByprocessingMethod_userParam[2];
                }
                if ((parentscanWindowRowByscanWindow_userParam != null)) {
                    columnValuesArray[19] = parentscanWindowRowByscanWindow_userParam[0];
                }
                if ((parentscanRowByscan_userParam != null)) {
                    columnValuesArray[20] = parentscanRowByscan_userParam[4];
                }
                if ((parentscanListRowByscanList_userParam != null)) {
                    columnValuesArray[21] = parentscanListRowByscanList_userParam[1];
                }
                if ((parentisolationWindowRowByisolationWindow_userParam != null)) {
                    columnValuesArray[22] = parentisolationWindowRowByisolationWindow_userParam[0];
                }
                if ((parentselectedIonRowByselectedIon_userParam != null)) {
                    columnValuesArray[23] = parentselectedIonRowByselectedIon_userParam[0];
                }
                if ((parentactivationRowByactivation_userParam != null)) {
                    columnValuesArray[24] = parentactivationRowByactivation_userParam[0];
                }
                if ((parentbinaryDataArrayRowBybinaryDataArray_userParam != null)) {
                    columnValuesArray[25] = parentbinaryDataArrayRowBybinaryDataArray_userParam[4];
                }
                if ((parentspectrumRowByspectrum_userParam != null)) {
                    columnValuesArray[26] = parentspectrumRowByspectrum_userParam[6];
                }
                if ((parentchromatogramRowBychromatogram_userParam != null)) {
                    columnValuesArray[27] = parentchromatogramRowBychromatogram_userParam[4];
                }
                if ((parentrunRowByrun_userParam != null)) {
                    columnValuesArray[28] = parentrunRowByrun_userParam[5];
                }
                rowuserParamRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowuserParamRow);
                return rowuserParamRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                userParamDataTable cln = ((userParamDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new userParamDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columntype = base.Columns["type"];
                this.columnvalue = base.Columns["value"];
                this.columnunitAccession = base.Columns["unitAccession"];
                this.columnunitName = base.Columns["unitName"];
                this.columnunitCvRef = base.Columns["unitCvRef"];
                this.columnfileContent_Id = base.Columns["fileContent_Id"];
                this.columnsourceFile_Id = base.Columns["sourceFile_Id"];
                this.columncontact_Id = base.Columns["contact_Id"];
                this.columnreferenceableParamGroup_Id = base.Columns["referenceableParamGroup_Id"];
                this.columnsample_Id = base.Columns["sample_Id"];
                this.columnsoftware_Id = base.Columns["software_Id"];
                this.columntarget_Id = base.Columns["target_Id"];
                this.columnscanSettings_Id = base.Columns["scanSettings_Id"];
                this.columnsource_Id = base.Columns["source_Id"];
                this.columnanalyzer_Id = base.Columns["analyzer_Id"];
                this.columndetector_Id = base.Columns["detector_Id"];
                this.columninstrumentConfiguration_Id = base.Columns["instrumentConfiguration_Id"];
                this.columnprocessingMethod_Id = base.Columns["processingMethod_Id"];
                this.columnscanWindow_Id = base.Columns["scanWindow_Id"];
                this.columnscan_Id = base.Columns["scan_Id"];
                this.columnscanList_Id = base.Columns["scanList_Id"];
                this.columnisolationWindow_Id = base.Columns["isolationWindow_Id"];
                this.columnselectedIon_Id = base.Columns["selectedIon_Id"];
                this.columnactivation_Id = base.Columns["activation_Id"];
                this.columnbinaryDataArray_Id = base.Columns["binaryDataArray_Id"];
                this.columnspectrum_Id = base.Columns["spectrum_Id"];
                this.columnchromatogram_Id = base.Columns["chromatogram_Id"];
                this.columnrun_Id = base.Columns["run_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntype);
                this.columnvalue = new global::System.Data.DataColumn("value", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnvalue);
                this.columnunitAccession = new global::System.Data.DataColumn("unitAccession", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnunitAccession);
                this.columnunitName = new global::System.Data.DataColumn("unitName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnunitName);
                this.columnunitCvRef = new global::System.Data.DataColumn("unitCvRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnunitCvRef);
                this.columnfileContent_Id = new global::System.Data.DataColumn("fileContent_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnfileContent_Id);
                this.columnsourceFile_Id = new global::System.Data.DataColumn("sourceFile_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsourceFile_Id);
                this.columncontact_Id = new global::System.Data.DataColumn("contact_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncontact_Id);
                this.columnreferenceableParamGroup_Id = new global::System.Data.DataColumn("referenceableParamGroup_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnreferenceableParamGroup_Id);
                this.columnsample_Id = new global::System.Data.DataColumn("sample_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsample_Id);
                this.columnsoftware_Id = new global::System.Data.DataColumn("software_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsoftware_Id);
                this.columntarget_Id = new global::System.Data.DataColumn("target_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columntarget_Id);
                this.columnscanSettings_Id = new global::System.Data.DataColumn("scanSettings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscanSettings_Id);
                this.columnsource_Id = new global::System.Data.DataColumn("source_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsource_Id);
                this.columnanalyzer_Id = new global::System.Data.DataColumn("analyzer_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnanalyzer_Id);
                this.columndetector_Id = new global::System.Data.DataColumn("detector_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndetector_Id);
                this.columninstrumentConfiguration_Id = new global::System.Data.DataColumn("instrumentConfiguration_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columninstrumentConfiguration_Id);
                this.columnprocessingMethod_Id = new global::System.Data.DataColumn("processingMethod_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnprocessingMethod_Id);
                this.columnscanWindow_Id = new global::System.Data.DataColumn("scanWindow_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscanWindow_Id);
                this.columnscan_Id = new global::System.Data.DataColumn("scan_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscan_Id);
                this.columnscanList_Id = new global::System.Data.DataColumn("scanList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscanList_Id);
                this.columnisolationWindow_Id = new global::System.Data.DataColumn("isolationWindow_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnisolationWindow_Id);
                this.columnselectedIon_Id = new global::System.Data.DataColumn("selectedIon_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnselectedIon_Id);
                this.columnactivation_Id = new global::System.Data.DataColumn("activation_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnactivation_Id);
                this.columnbinaryDataArray_Id = new global::System.Data.DataColumn("binaryDataArray_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnbinaryDataArray_Id);
                this.columnspectrum_Id = new global::System.Data.DataColumn("spectrum_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnspectrum_Id);
                this.columnchromatogram_Id = new global::System.Data.DataColumn("chromatogram_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnchromatogram_Id);
                this.columnrun_Id = new global::System.Data.DataColumn("run_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrun_Id);
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columntype.Namespace = "";
                this.columnvalue.Namespace = "";
                this.columnunitAccession.Namespace = "";
                this.columnunitName.Namespace = "";
                this.columnunitCvRef.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow NewuserParamRow() {
                return ((userParamRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new userParamRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(userParamRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.userParamRowChanged != null)) {
                    this.userParamRowChanged(this, new userParamRowChangeEvent(((userParamRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.userParamRowChanging != null)) {
                    this.userParamRowChanging(this, new userParamRowChangeEvent(((userParamRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.userParamRowDeleted != null)) {
                    this.userParamRowDeleted(this, new userParamRowChangeEvent(((userParamRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.userParamRowDeleting != null)) {
                    this.userParamRowDeleting(this, new userParamRowChangeEvent(((userParamRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveuserParamRow(userParamRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "userParamDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sourceFileListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columnsourceFileList_Id;
            
            private global::System.Data.DataColumn columnfileDescription_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileListDataTable() {
                this.TableName = "sourceFileList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sourceFileListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected sourceFileListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourceFileList_IdColumn {
                get {
                    return this.columnsourceFileList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fileDescription_IdColumn {
                get {
                    return this.columnfileDescription_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileListRow this[int index] {
                get {
                    return ((sourceFileListRow)(this.Rows[index]));
                }
            }
            
            public event sourceFileListRowChangeEventHandler sourceFileListRowChanging;
            
            public event sourceFileListRowChangeEventHandler sourceFileListRowChanged;
            
            public event sourceFileListRowChangeEventHandler sourceFileListRowDeleting;
            
            public event sourceFileListRowChangeEventHandler sourceFileListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsourceFileListRow(sourceFileListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileListRow AddsourceFileListRow(ulong count, fileDescriptionRow parentfileDescriptionRowByfileDescription_sourceFileList) {
                sourceFileListRow rowsourceFileListRow = ((sourceFileListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        null,
                        null};
                if ((parentfileDescriptionRowByfileDescription_sourceFileList != null)) {
                    columnValuesArray[2] = parentfileDescriptionRowByfileDescription_sourceFileList[0];
                }
                rowsourceFileListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsourceFileListRow);
                return rowsourceFileListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                sourceFileListDataTable cln = ((sourceFileListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new sourceFileListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columnsourceFileList_Id = base.Columns["sourceFileList_Id"];
                this.columnfileDescription_Id = base.Columns["fileDescription_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columnsourceFileList_Id = new global::System.Data.DataColumn("sourceFileList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsourceFileList_Id);
                this.columnfileDescription_Id = new global::System.Data.DataColumn("fileDescription_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnfileDescription_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsourceFileList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columnsourceFileList_Id.AutoIncrement = true;
                this.columnsourceFileList_Id.AllowDBNull = false;
                this.columnsourceFileList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileListRow NewsourceFileListRow() {
                return ((sourceFileListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new sourceFileListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(sourceFileListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sourceFileListRowChanged != null)) {
                    this.sourceFileListRowChanged(this, new sourceFileListRowChangeEvent(((sourceFileListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sourceFileListRowChanging != null)) {
                    this.sourceFileListRowChanging(this, new sourceFileListRowChangeEvent(((sourceFileListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sourceFileListRowDeleted != null)) {
                    this.sourceFileListRowDeleted(this, new sourceFileListRowChangeEvent(((sourceFileListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sourceFileListRowDeleting != null)) {
                    this.sourceFileListRowDeleting(this, new sourceFileListRowChangeEvent(((sourceFileListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesourceFileListRow(sourceFileListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sourceFileListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sourceFileDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnlocation;
            
            private global::System.Data.DataColumn columnsourceFile_Id;
            
            private global::System.Data.DataColumn columnsourceFileList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileDataTable() {
                this.TableName = "sourceFile";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sourceFileDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected sourceFileDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn locationColumn {
                get {
                    return this.columnlocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourceFile_IdColumn {
                get {
                    return this.columnsourceFile_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourceFileList_IdColumn {
                get {
                    return this.columnsourceFileList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRow this[int index] {
                get {
                    return ((sourceFileRow)(this.Rows[index]));
                }
            }
            
            public event sourceFileRowChangeEventHandler sourceFileRowChanging;
            
            public event sourceFileRowChangeEventHandler sourceFileRowChanged;
            
            public event sourceFileRowChangeEventHandler sourceFileRowDeleting;
            
            public event sourceFileRowChangeEventHandler sourceFileRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsourceFileRow(sourceFileRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRow AddsourceFileRow(string id, string name, System.Uri location, sourceFileListRow parentsourceFileListRowBysourceFileList_sourceFile) {
                sourceFileRow rowsourceFileRow = ((sourceFileRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        name,
                        location,
                        null,
                        null};
                if ((parentsourceFileListRowBysourceFileList_sourceFile != null)) {
                    columnValuesArray[4] = parentsourceFileListRowBysourceFileList_sourceFile[1];
                }
                rowsourceFileRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsourceFileRow);
                return rowsourceFileRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                sourceFileDataTable cln = ((sourceFileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new sourceFileDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnname = base.Columns["name"];
                this.columnlocation = base.Columns["location"];
                this.columnsourceFile_Id = base.Columns["sourceFile_Id"];
                this.columnsourceFileList_Id = base.Columns["sourceFileList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columnlocation = new global::System.Data.DataColumn("location", typeof(global::System.Uri), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlocation);
                this.columnsourceFile_Id = new global::System.Data.DataColumn("sourceFile_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsourceFile_Id);
                this.columnsourceFileList_Id = new global::System.Data.DataColumn("sourceFileList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsourceFileList_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsourceFile_Id}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columnlocation.AllowDBNull = false;
                this.columnlocation.Namespace = "";
                this.columnsourceFile_Id.AutoIncrement = true;
                this.columnsourceFile_Id.AllowDBNull = false;
                this.columnsourceFile_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRow NewsourceFileRow() {
                return ((sourceFileRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new sourceFileRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(sourceFileRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sourceFileRowChanged != null)) {
                    this.sourceFileRowChanged(this, new sourceFileRowChangeEvent(((sourceFileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sourceFileRowChanging != null)) {
                    this.sourceFileRowChanging(this, new sourceFileRowChangeEvent(((sourceFileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sourceFileRowDeleted != null)) {
                    this.sourceFileRowDeleted(this, new sourceFileRowChangeEvent(((sourceFileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sourceFileRowDeleting != null)) {
                    this.sourceFileRowDeleting(this, new sourceFileRowChangeEvent(((sourceFileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesourceFileRow(sourceFileRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sourceFileDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class contactDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncontact_Id;
            
            private global::System.Data.DataColumn columnfileDescription_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contactDataTable() {
                this.TableName = "contact";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal contactDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected contactDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn contact_IdColumn {
                get {
                    return this.columncontact_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fileDescription_IdColumn {
                get {
                    return this.columnfileDescription_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contactRow this[int index] {
                get {
                    return ((contactRow)(this.Rows[index]));
                }
            }
            
            public event contactRowChangeEventHandler contactRowChanging;
            
            public event contactRowChangeEventHandler contactRowChanged;
            
            public event contactRowChangeEventHandler contactRowDeleting;
            
            public event contactRowChangeEventHandler contactRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcontactRow(contactRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contactRow AddcontactRow(fileDescriptionRow parentfileDescriptionRowByfileDescription_contact) {
                contactRow rowcontactRow = ((contactRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentfileDescriptionRowByfileDescription_contact != null)) {
                    columnValuesArray[1] = parentfileDescriptionRowByfileDescription_contact[0];
                }
                rowcontactRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowcontactRow);
                return rowcontactRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                contactDataTable cln = ((contactDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new contactDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncontact_Id = base.Columns["contact_Id"];
                this.columnfileDescription_Id = base.Columns["fileDescription_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncontact_Id = new global::System.Data.DataColumn("contact_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncontact_Id);
                this.columnfileDescription_Id = new global::System.Data.DataColumn("fileDescription_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnfileDescription_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columncontact_Id}, true));
                this.columncontact_Id.AutoIncrement = true;
                this.columncontact_Id.AllowDBNull = false;
                this.columncontact_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contactRow NewcontactRow() {
                return ((contactRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new contactRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(contactRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.contactRowChanged != null)) {
                    this.contactRowChanged(this, new contactRowChangeEvent(((contactRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.contactRowChanging != null)) {
                    this.contactRowChanging(this, new contactRowChangeEvent(((contactRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.contactRowDeleted != null)) {
                    this.contactRowDeleted(this, new contactRowChangeEvent(((contactRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.contactRowDeleting != null)) {
                    this.contactRowDeleting(this, new contactRowChangeEvent(((contactRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecontactRow(contactRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "contactDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class referenceableParamGroupListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columnreferenceableParamGroupList_Id;
            
            private global::System.Data.DataColumn columnmzML_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupListDataTable() {
                this.TableName = "referenceableParamGroupList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal referenceableParamGroupListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected referenceableParamGroupListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn referenceableParamGroupList_IdColumn {
                get {
                    return this.columnreferenceableParamGroupList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mzML_IdColumn {
                get {
                    return this.columnmzML_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupListRow this[int index] {
                get {
                    return ((referenceableParamGroupListRow)(this.Rows[index]));
                }
            }
            
            public event referenceableParamGroupListRowChangeEventHandler referenceableParamGroupListRowChanging;
            
            public event referenceableParamGroupListRowChangeEventHandler referenceableParamGroupListRowChanged;
            
            public event referenceableParamGroupListRowChangeEventHandler referenceableParamGroupListRowDeleting;
            
            public event referenceableParamGroupListRowChangeEventHandler referenceableParamGroupListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddreferenceableParamGroupListRow(referenceableParamGroupListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupListRow AddreferenceableParamGroupListRow(ulong count, mzMLRow parentmzMLRowBymzML_referenceableParamGroupList) {
                referenceableParamGroupListRow rowreferenceableParamGroupListRow = ((referenceableParamGroupListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        null,
                        null};
                if ((parentmzMLRowBymzML_referenceableParamGroupList != null)) {
                    columnValuesArray[2] = parentmzMLRowBymzML_referenceableParamGroupList[3];
                }
                rowreferenceableParamGroupListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowreferenceableParamGroupListRow);
                return rowreferenceableParamGroupListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                referenceableParamGroupListDataTable cln = ((referenceableParamGroupListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new referenceableParamGroupListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columnreferenceableParamGroupList_Id = base.Columns["referenceableParamGroupList_Id"];
                this.columnmzML_Id = base.Columns["mzML_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columnreferenceableParamGroupList_Id = new global::System.Data.DataColumn("referenceableParamGroupList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnreferenceableParamGroupList_Id);
                this.columnmzML_Id = new global::System.Data.DataColumn("mzML_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmzML_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnreferenceableParamGroupList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columnreferenceableParamGroupList_Id.AutoIncrement = true;
                this.columnreferenceableParamGroupList_Id.AllowDBNull = false;
                this.columnreferenceableParamGroupList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupListRow NewreferenceableParamGroupListRow() {
                return ((referenceableParamGroupListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new referenceableParamGroupListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(referenceableParamGroupListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.referenceableParamGroupListRowChanged != null)) {
                    this.referenceableParamGroupListRowChanged(this, new referenceableParamGroupListRowChangeEvent(((referenceableParamGroupListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.referenceableParamGroupListRowChanging != null)) {
                    this.referenceableParamGroupListRowChanging(this, new referenceableParamGroupListRowChangeEvent(((referenceableParamGroupListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.referenceableParamGroupListRowDeleted != null)) {
                    this.referenceableParamGroupListRowDeleted(this, new referenceableParamGroupListRowChangeEvent(((referenceableParamGroupListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.referenceableParamGroupListRowDeleting != null)) {
                    this.referenceableParamGroupListRowDeleting(this, new referenceableParamGroupListRowChangeEvent(((referenceableParamGroupListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovereferenceableParamGroupListRow(referenceableParamGroupListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "referenceableParamGroupListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class referenceableParamGroupDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnreferenceableParamGroup_Id;
            
            private global::System.Data.DataColumn columnreferenceableParamGroupList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupDataTable() {
                this.TableName = "referenceableParamGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal referenceableParamGroupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected referenceableParamGroupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn referenceableParamGroup_IdColumn {
                get {
                    return this.columnreferenceableParamGroup_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn referenceableParamGroupList_IdColumn {
                get {
                    return this.columnreferenceableParamGroupList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRow this[int index] {
                get {
                    return ((referenceableParamGroupRow)(this.Rows[index]));
                }
            }
            
            public event referenceableParamGroupRowChangeEventHandler referenceableParamGroupRowChanging;
            
            public event referenceableParamGroupRowChangeEventHandler referenceableParamGroupRowChanged;
            
            public event referenceableParamGroupRowChangeEventHandler referenceableParamGroupRowDeleting;
            
            public event referenceableParamGroupRowChangeEventHandler referenceableParamGroupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddreferenceableParamGroupRow(referenceableParamGroupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRow AddreferenceableParamGroupRow(string id, referenceableParamGroupListRow parentreferenceableParamGroupListRowByreferenceableParamGroupList_referenceableParamGroup) {
                referenceableParamGroupRow rowreferenceableParamGroupRow = ((referenceableParamGroupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        null,
                        null};
                if ((parentreferenceableParamGroupListRowByreferenceableParamGroupList_referenceableParamGroup != null)) {
                    columnValuesArray[2] = parentreferenceableParamGroupListRowByreferenceableParamGroupList_referenceableParamGroup[1];
                }
                rowreferenceableParamGroupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowreferenceableParamGroupRow);
                return rowreferenceableParamGroupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                referenceableParamGroupDataTable cln = ((referenceableParamGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new referenceableParamGroupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnreferenceableParamGroup_Id = base.Columns["referenceableParamGroup_Id"];
                this.columnreferenceableParamGroupList_Id = base.Columns["referenceableParamGroupList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnreferenceableParamGroup_Id = new global::System.Data.DataColumn("referenceableParamGroup_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnreferenceableParamGroup_Id);
                this.columnreferenceableParamGroupList_Id = new global::System.Data.DataColumn("referenceableParamGroupList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnreferenceableParamGroupList_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnreferenceableParamGroup_Id}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnreferenceableParamGroup_Id.AutoIncrement = true;
                this.columnreferenceableParamGroup_Id.AllowDBNull = false;
                this.columnreferenceableParamGroup_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRow NewreferenceableParamGroupRow() {
                return ((referenceableParamGroupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new referenceableParamGroupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(referenceableParamGroupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.referenceableParamGroupRowChanged != null)) {
                    this.referenceableParamGroupRowChanged(this, new referenceableParamGroupRowChangeEvent(((referenceableParamGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.referenceableParamGroupRowChanging != null)) {
                    this.referenceableParamGroupRowChanging(this, new referenceableParamGroupRowChangeEvent(((referenceableParamGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.referenceableParamGroupRowDeleted != null)) {
                    this.referenceableParamGroupRowDeleted(this, new referenceableParamGroupRowChangeEvent(((referenceableParamGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.referenceableParamGroupRowDeleting != null)) {
                    this.referenceableParamGroupRowDeleting(this, new referenceableParamGroupRowChangeEvent(((referenceableParamGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovereferenceableParamGroupRow(referenceableParamGroupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "referenceableParamGroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sampleListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columnsampleList_Id;
            
            private global::System.Data.DataColumn columnmzML_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sampleListDataTable() {
                this.TableName = "sampleList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sampleListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected sampleListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sampleList_IdColumn {
                get {
                    return this.columnsampleList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mzML_IdColumn {
                get {
                    return this.columnmzML_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sampleListRow this[int index] {
                get {
                    return ((sampleListRow)(this.Rows[index]));
                }
            }
            
            public event sampleListRowChangeEventHandler sampleListRowChanging;
            
            public event sampleListRowChangeEventHandler sampleListRowChanged;
            
            public event sampleListRowChangeEventHandler sampleListRowDeleting;
            
            public event sampleListRowChangeEventHandler sampleListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsampleListRow(sampleListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sampleListRow AddsampleListRow(ulong count, mzMLRow parentmzMLRowBymzML_sampleList) {
                sampleListRow rowsampleListRow = ((sampleListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        null,
                        null};
                if ((parentmzMLRowBymzML_sampleList != null)) {
                    columnValuesArray[2] = parentmzMLRowBymzML_sampleList[3];
                }
                rowsampleListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsampleListRow);
                return rowsampleListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                sampleListDataTable cln = ((sampleListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new sampleListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columnsampleList_Id = base.Columns["sampleList_Id"];
                this.columnmzML_Id = base.Columns["mzML_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columnsampleList_Id = new global::System.Data.DataColumn("sampleList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsampleList_Id);
                this.columnmzML_Id = new global::System.Data.DataColumn("mzML_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmzML_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsampleList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columnsampleList_Id.AutoIncrement = true;
                this.columnsampleList_Id.AllowDBNull = false;
                this.columnsampleList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sampleListRow NewsampleListRow() {
                return ((sampleListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new sampleListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(sampleListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sampleListRowChanged != null)) {
                    this.sampleListRowChanged(this, new sampleListRowChangeEvent(((sampleListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sampleListRowChanging != null)) {
                    this.sampleListRowChanging(this, new sampleListRowChangeEvent(((sampleListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sampleListRowDeleted != null)) {
                    this.sampleListRowDeleted(this, new sampleListRowChangeEvent(((sampleListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sampleListRowDeleting != null)) {
                    this.sampleListRowDeleting(this, new sampleListRowChangeEvent(((sampleListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesampleListRow(sampleListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sampleListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sampleDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnsample_Id;
            
            private global::System.Data.DataColumn columnsampleList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sampleDataTable() {
                this.TableName = "sample";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sampleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected sampleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sample_IdColumn {
                get {
                    return this.columnsample_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sampleList_IdColumn {
                get {
                    return this.columnsampleList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sampleRow this[int index] {
                get {
                    return ((sampleRow)(this.Rows[index]));
                }
            }
            
            public event sampleRowChangeEventHandler sampleRowChanging;
            
            public event sampleRowChangeEventHandler sampleRowChanged;
            
            public event sampleRowChangeEventHandler sampleRowDeleting;
            
            public event sampleRowChangeEventHandler sampleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsampleRow(sampleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sampleRow AddsampleRow(string id, string name, sampleListRow parentsampleListRowBysampleList_sample) {
                sampleRow rowsampleRow = ((sampleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        name,
                        null,
                        null};
                if ((parentsampleListRowBysampleList_sample != null)) {
                    columnValuesArray[3] = parentsampleListRowBysampleList_sample[1];
                }
                rowsampleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsampleRow);
                return rowsampleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                sampleDataTable cln = ((sampleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new sampleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnname = base.Columns["name"];
                this.columnsample_Id = base.Columns["sample_Id"];
                this.columnsampleList_Id = base.Columns["sampleList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columnsample_Id = new global::System.Data.DataColumn("sample_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsample_Id);
                this.columnsampleList_Id = new global::System.Data.DataColumn("sampleList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsampleList_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsample_Id}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnname.Namespace = "";
                this.columnsample_Id.AutoIncrement = true;
                this.columnsample_Id.AllowDBNull = false;
                this.columnsample_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sampleRow NewsampleRow() {
                return ((sampleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new sampleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(sampleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sampleRowChanged != null)) {
                    this.sampleRowChanged(this, new sampleRowChangeEvent(((sampleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sampleRowChanging != null)) {
                    this.sampleRowChanging(this, new sampleRowChangeEvent(((sampleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sampleRowDeleted != null)) {
                    this.sampleRowDeleted(this, new sampleRowChangeEvent(((sampleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sampleRowDeleting != null)) {
                    this.sampleRowDeleting(this, new sampleRowChangeEvent(((sampleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesampleRow(sampleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sampleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class softwareListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columnsoftwareList_Id;
            
            private global::System.Data.DataColumn columnmzML_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareListDataTable() {
                this.TableName = "softwareList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal softwareListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected softwareListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn softwareList_IdColumn {
                get {
                    return this.columnsoftwareList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mzML_IdColumn {
                get {
                    return this.columnmzML_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareListRow this[int index] {
                get {
                    return ((softwareListRow)(this.Rows[index]));
                }
            }
            
            public event softwareListRowChangeEventHandler softwareListRowChanging;
            
            public event softwareListRowChangeEventHandler softwareListRowChanged;
            
            public event softwareListRowChangeEventHandler softwareListRowDeleting;
            
            public event softwareListRowChangeEventHandler softwareListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsoftwareListRow(softwareListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareListRow AddsoftwareListRow(ulong count, mzMLRow parentmzMLRowBymzML_softwareList) {
                softwareListRow rowsoftwareListRow = ((softwareListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        null,
                        null};
                if ((parentmzMLRowBymzML_softwareList != null)) {
                    columnValuesArray[2] = parentmzMLRowBymzML_softwareList[3];
                }
                rowsoftwareListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsoftwareListRow);
                return rowsoftwareListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                softwareListDataTable cln = ((softwareListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new softwareListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columnsoftwareList_Id = base.Columns["softwareList_Id"];
                this.columnmzML_Id = base.Columns["mzML_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columnsoftwareList_Id = new global::System.Data.DataColumn("softwareList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsoftwareList_Id);
                this.columnmzML_Id = new global::System.Data.DataColumn("mzML_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmzML_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsoftwareList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columnsoftwareList_Id.AutoIncrement = true;
                this.columnsoftwareList_Id.AllowDBNull = false;
                this.columnsoftwareList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareListRow NewsoftwareListRow() {
                return ((softwareListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new softwareListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(softwareListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.softwareListRowChanged != null)) {
                    this.softwareListRowChanged(this, new softwareListRowChangeEvent(((softwareListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.softwareListRowChanging != null)) {
                    this.softwareListRowChanging(this, new softwareListRowChangeEvent(((softwareListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.softwareListRowDeleted != null)) {
                    this.softwareListRowDeleted(this, new softwareListRowChangeEvent(((softwareListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.softwareListRowDeleting != null)) {
                    this.softwareListRowDeleting(this, new softwareListRowChangeEvent(((softwareListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesoftwareListRow(softwareListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "softwareListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class softwareDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnversion;
            
            private global::System.Data.DataColumn columnsoftware_Id;
            
            private global::System.Data.DataColumn columnsoftwareList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareDataTable() {
                this.TableName = "software";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal softwareDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected softwareDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn versionColumn {
                get {
                    return this.columnversion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn software_IdColumn {
                get {
                    return this.columnsoftware_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn softwareList_IdColumn {
                get {
                    return this.columnsoftwareList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareRow this[int index] {
                get {
                    return ((softwareRow)(this.Rows[index]));
                }
            }
            
            public event softwareRowChangeEventHandler softwareRowChanging;
            
            public event softwareRowChangeEventHandler softwareRowChanged;
            
            public event softwareRowChangeEventHandler softwareRowDeleting;
            
            public event softwareRowChangeEventHandler softwareRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsoftwareRow(softwareRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareRow AddsoftwareRow(string id, string version, softwareListRow parentsoftwareListRowBysoftwareList_software) {
                softwareRow rowsoftwareRow = ((softwareRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        version,
                        null,
                        null};
                if ((parentsoftwareListRowBysoftwareList_software != null)) {
                    columnValuesArray[3] = parentsoftwareListRowBysoftwareList_software[1];
                }
                rowsoftwareRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsoftwareRow);
                return rowsoftwareRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                softwareDataTable cln = ((softwareDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new softwareDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnversion = base.Columns["version"];
                this.columnsoftware_Id = base.Columns["software_Id"];
                this.columnsoftwareList_Id = base.Columns["softwareList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnversion = new global::System.Data.DataColumn("version", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnversion);
                this.columnsoftware_Id = new global::System.Data.DataColumn("software_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsoftware_Id);
                this.columnsoftwareList_Id = new global::System.Data.DataColumn("softwareList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsoftwareList_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsoftware_Id}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnversion.AllowDBNull = false;
                this.columnversion.Namespace = "";
                this.columnsoftware_Id.AutoIncrement = true;
                this.columnsoftware_Id.AllowDBNull = false;
                this.columnsoftware_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareRow NewsoftwareRow() {
                return ((softwareRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new softwareRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(softwareRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.softwareRowChanged != null)) {
                    this.softwareRowChanged(this, new softwareRowChangeEvent(((softwareRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.softwareRowChanging != null)) {
                    this.softwareRowChanging(this, new softwareRowChangeEvent(((softwareRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.softwareRowDeleted != null)) {
                    this.softwareRowDeleted(this, new softwareRowChangeEvent(((softwareRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.softwareRowDeleting != null)) {
                    this.softwareRowDeleting(this, new softwareRowChangeEvent(((softwareRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesoftwareRow(softwareRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "softwareDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class scanSettingsListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columnscanSettingsList_Id;
            
            private global::System.Data.DataColumn columnmzML_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanSettingsListDataTable() {
                this.TableName = "scanSettingsList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scanSettingsListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected scanSettingsListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanSettingsList_IdColumn {
                get {
                    return this.columnscanSettingsList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mzML_IdColumn {
                get {
                    return this.columnmzML_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanSettingsListRow this[int index] {
                get {
                    return ((scanSettingsListRow)(this.Rows[index]));
                }
            }
            
            public event scanSettingsListRowChangeEventHandler scanSettingsListRowChanging;
            
            public event scanSettingsListRowChangeEventHandler scanSettingsListRowChanged;
            
            public event scanSettingsListRowChangeEventHandler scanSettingsListRowDeleting;
            
            public event scanSettingsListRowChangeEventHandler scanSettingsListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddscanSettingsListRow(scanSettingsListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanSettingsListRow AddscanSettingsListRow(ulong count, mzMLRow parentmzMLRowBymzML_scanSettingsList) {
                scanSettingsListRow rowscanSettingsListRow = ((scanSettingsListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        null,
                        null};
                if ((parentmzMLRowBymzML_scanSettingsList != null)) {
                    columnValuesArray[2] = parentmzMLRowBymzML_scanSettingsList[3];
                }
                rowscanSettingsListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowscanSettingsListRow);
                return rowscanSettingsListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                scanSettingsListDataTable cln = ((scanSettingsListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new scanSettingsListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columnscanSettingsList_Id = base.Columns["scanSettingsList_Id"];
                this.columnmzML_Id = base.Columns["mzML_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columnscanSettingsList_Id = new global::System.Data.DataColumn("scanSettingsList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscanSettingsList_Id);
                this.columnmzML_Id = new global::System.Data.DataColumn("mzML_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmzML_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnscanSettingsList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columnscanSettingsList_Id.AutoIncrement = true;
                this.columnscanSettingsList_Id.AllowDBNull = false;
                this.columnscanSettingsList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanSettingsListRow NewscanSettingsListRow() {
                return ((scanSettingsListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new scanSettingsListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(scanSettingsListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.scanSettingsListRowChanged != null)) {
                    this.scanSettingsListRowChanged(this, new scanSettingsListRowChangeEvent(((scanSettingsListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.scanSettingsListRowChanging != null)) {
                    this.scanSettingsListRowChanging(this, new scanSettingsListRowChangeEvent(((scanSettingsListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.scanSettingsListRowDeleted != null)) {
                    this.scanSettingsListRowDeleted(this, new scanSettingsListRowChangeEvent(((scanSettingsListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.scanSettingsListRowDeleting != null)) {
                    this.scanSettingsListRowDeleting(this, new scanSettingsListRowChangeEvent(((scanSettingsListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovescanSettingsListRow(scanSettingsListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "scanSettingsListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class scanSettingsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnscanSettings_Id;
            
            private global::System.Data.DataColumn columnscanSettingsList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanSettingsDataTable() {
                this.TableName = "scanSettings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scanSettingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected scanSettingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanSettings_IdColumn {
                get {
                    return this.columnscanSettings_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanSettingsList_IdColumn {
                get {
                    return this.columnscanSettingsList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanSettingsRow this[int index] {
                get {
                    return ((scanSettingsRow)(this.Rows[index]));
                }
            }
            
            public event scanSettingsRowChangeEventHandler scanSettingsRowChanging;
            
            public event scanSettingsRowChangeEventHandler scanSettingsRowChanged;
            
            public event scanSettingsRowChangeEventHandler scanSettingsRowDeleting;
            
            public event scanSettingsRowChangeEventHandler scanSettingsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddscanSettingsRow(scanSettingsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanSettingsRow AddscanSettingsRow(string id, scanSettingsListRow parentscanSettingsListRowByscanSettingsList_scanSettings) {
                scanSettingsRow rowscanSettingsRow = ((scanSettingsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        null,
                        null};
                if ((parentscanSettingsListRowByscanSettingsList_scanSettings != null)) {
                    columnValuesArray[2] = parentscanSettingsListRowByscanSettingsList_scanSettings[1];
                }
                rowscanSettingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowscanSettingsRow);
                return rowscanSettingsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                scanSettingsDataTable cln = ((scanSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new scanSettingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnscanSettings_Id = base.Columns["scanSettings_Id"];
                this.columnscanSettingsList_Id = base.Columns["scanSettingsList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnscanSettings_Id = new global::System.Data.DataColumn("scanSettings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscanSettings_Id);
                this.columnscanSettingsList_Id = new global::System.Data.DataColumn("scanSettingsList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscanSettingsList_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnscanSettings_Id}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnscanSettings_Id.AutoIncrement = true;
                this.columnscanSettings_Id.AllowDBNull = false;
                this.columnscanSettings_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanSettingsRow NewscanSettingsRow() {
                return ((scanSettingsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new scanSettingsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(scanSettingsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.scanSettingsRowChanged != null)) {
                    this.scanSettingsRowChanged(this, new scanSettingsRowChangeEvent(((scanSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.scanSettingsRowChanging != null)) {
                    this.scanSettingsRowChanging(this, new scanSettingsRowChangeEvent(((scanSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.scanSettingsRowDeleted != null)) {
                    this.scanSettingsRowDeleted(this, new scanSettingsRowChangeEvent(((scanSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.scanSettingsRowDeleting != null)) {
                    this.scanSettingsRowDeleting(this, new scanSettingsRowChangeEvent(((scanSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovescanSettingsRow(scanSettingsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "scanSettingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sourceFileRefListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columnsourceFileRefList_Id;
            
            private global::System.Data.DataColumn columnscanSettings_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRefListDataTable() {
                this.TableName = "sourceFileRefList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sourceFileRefListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected sourceFileRefListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourceFileRefList_IdColumn {
                get {
                    return this.columnsourceFileRefList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanSettings_IdColumn {
                get {
                    return this.columnscanSettings_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRefListRow this[int index] {
                get {
                    return ((sourceFileRefListRow)(this.Rows[index]));
                }
            }
            
            public event sourceFileRefListRowChangeEventHandler sourceFileRefListRowChanging;
            
            public event sourceFileRefListRowChangeEventHandler sourceFileRefListRowChanged;
            
            public event sourceFileRefListRowChangeEventHandler sourceFileRefListRowDeleting;
            
            public event sourceFileRefListRowChangeEventHandler sourceFileRefListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsourceFileRefListRow(sourceFileRefListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRefListRow AddsourceFileRefListRow(ulong count, scanSettingsRow parentscanSettingsRowByscanSettings_sourceFileRefList) {
                sourceFileRefListRow rowsourceFileRefListRow = ((sourceFileRefListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        null,
                        null};
                if ((parentscanSettingsRowByscanSettings_sourceFileRefList != null)) {
                    columnValuesArray[2] = parentscanSettingsRowByscanSettings_sourceFileRefList[1];
                }
                rowsourceFileRefListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsourceFileRefListRow);
                return rowsourceFileRefListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                sourceFileRefListDataTable cln = ((sourceFileRefListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new sourceFileRefListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columnsourceFileRefList_Id = base.Columns["sourceFileRefList_Id"];
                this.columnscanSettings_Id = base.Columns["scanSettings_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columnsourceFileRefList_Id = new global::System.Data.DataColumn("sourceFileRefList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsourceFileRefList_Id);
                this.columnscanSettings_Id = new global::System.Data.DataColumn("scanSettings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscanSettings_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsourceFileRefList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columnsourceFileRefList_Id.AutoIncrement = true;
                this.columnsourceFileRefList_Id.AllowDBNull = false;
                this.columnsourceFileRefList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRefListRow NewsourceFileRefListRow() {
                return ((sourceFileRefListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new sourceFileRefListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(sourceFileRefListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sourceFileRefListRowChanged != null)) {
                    this.sourceFileRefListRowChanged(this, new sourceFileRefListRowChangeEvent(((sourceFileRefListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sourceFileRefListRowChanging != null)) {
                    this.sourceFileRefListRowChanging(this, new sourceFileRefListRowChangeEvent(((sourceFileRefListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sourceFileRefListRowDeleted != null)) {
                    this.sourceFileRefListRowDeleted(this, new sourceFileRefListRowChangeEvent(((sourceFileRefListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sourceFileRefListRowDeleting != null)) {
                    this.sourceFileRefListRowDeleting(this, new sourceFileRefListRowChangeEvent(((sourceFileRefListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesourceFileRefListRow(sourceFileRefListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sourceFileRefListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sourceFileRefDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn column_ref;
            
            private global::System.Data.DataColumn columnsourceFileRefList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRefDataTable() {
                this.TableName = "sourceFileRef";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sourceFileRefDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected sourceFileRefDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _refColumn {
                get {
                    return this.column_ref;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourceFileRefList_IdColumn {
                get {
                    return this.columnsourceFileRefList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRefRow this[int index] {
                get {
                    return ((sourceFileRefRow)(this.Rows[index]));
                }
            }
            
            public event sourceFileRefRowChangeEventHandler sourceFileRefRowChanging;
            
            public event sourceFileRefRowChangeEventHandler sourceFileRefRowChanged;
            
            public event sourceFileRefRowChangeEventHandler sourceFileRefRowDeleting;
            
            public event sourceFileRefRowChangeEventHandler sourceFileRefRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsourceFileRefRow(sourceFileRefRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRefRow AddsourceFileRefRow(string _ref, sourceFileRefListRow parentsourceFileRefListRowBysourceFileRefList_sourceFileRef) {
                sourceFileRefRow rowsourceFileRefRow = ((sourceFileRefRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        _ref,
                        null};
                if ((parentsourceFileRefListRowBysourceFileRefList_sourceFileRef != null)) {
                    columnValuesArray[1] = parentsourceFileRefListRowBysourceFileRefList_sourceFileRef[1];
                }
                rowsourceFileRefRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsourceFileRefRow);
                return rowsourceFileRefRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                sourceFileRefDataTable cln = ((sourceFileRefDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new sourceFileRefDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column_ref = base.Columns["ref"];
                this.columnsourceFileRefList_Id = base.Columns["sourceFileRefList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column_ref = new global::System.Data.DataColumn("ref", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.column_ref);
                this.columnsourceFileRefList_Id = new global::System.Data.DataColumn("sourceFileRefList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsourceFileRefList_Id);
                this.column_ref.AllowDBNull = false;
                this.column_ref.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRefRow NewsourceFileRefRow() {
                return ((sourceFileRefRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new sourceFileRefRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(sourceFileRefRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sourceFileRefRowChanged != null)) {
                    this.sourceFileRefRowChanged(this, new sourceFileRefRowChangeEvent(((sourceFileRefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sourceFileRefRowChanging != null)) {
                    this.sourceFileRefRowChanging(this, new sourceFileRefRowChangeEvent(((sourceFileRefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sourceFileRefRowDeleted != null)) {
                    this.sourceFileRefRowDeleted(this, new sourceFileRefRowChangeEvent(((sourceFileRefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sourceFileRefRowDeleting != null)) {
                    this.sourceFileRefRowDeleting(this, new sourceFileRefRowChangeEvent(((sourceFileRefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesourceFileRefRow(sourceFileRefRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sourceFileRefDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class targetListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columntargetList_Id;
            
            private global::System.Data.DataColumn columnscanSettings_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public targetListDataTable() {
                this.TableName = "targetList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal targetListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected targetListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn targetList_IdColumn {
                get {
                    return this.columntargetList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanSettings_IdColumn {
                get {
                    return this.columnscanSettings_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public targetListRow this[int index] {
                get {
                    return ((targetListRow)(this.Rows[index]));
                }
            }
            
            public event targetListRowChangeEventHandler targetListRowChanging;
            
            public event targetListRowChangeEventHandler targetListRowChanged;
            
            public event targetListRowChangeEventHandler targetListRowDeleting;
            
            public event targetListRowChangeEventHandler targetListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtargetListRow(targetListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public targetListRow AddtargetListRow(ulong count, scanSettingsRow parentscanSettingsRowByscanSettings_targetList) {
                targetListRow rowtargetListRow = ((targetListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        null,
                        null};
                if ((parentscanSettingsRowByscanSettings_targetList != null)) {
                    columnValuesArray[2] = parentscanSettingsRowByscanSettings_targetList[1];
                }
                rowtargetListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtargetListRow);
                return rowtargetListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                targetListDataTable cln = ((targetListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new targetListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columntargetList_Id = base.Columns["targetList_Id"];
                this.columnscanSettings_Id = base.Columns["scanSettings_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columntargetList_Id = new global::System.Data.DataColumn("targetList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columntargetList_Id);
                this.columnscanSettings_Id = new global::System.Data.DataColumn("scanSettings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscanSettings_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columntargetList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columntargetList_Id.AutoIncrement = true;
                this.columntargetList_Id.AllowDBNull = false;
                this.columntargetList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public targetListRow NewtargetListRow() {
                return ((targetListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new targetListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(targetListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.targetListRowChanged != null)) {
                    this.targetListRowChanged(this, new targetListRowChangeEvent(((targetListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.targetListRowChanging != null)) {
                    this.targetListRowChanging(this, new targetListRowChangeEvent(((targetListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.targetListRowDeleted != null)) {
                    this.targetListRowDeleted(this, new targetListRowChangeEvent(((targetListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.targetListRowDeleting != null)) {
                    this.targetListRowDeleting(this, new targetListRowChangeEvent(((targetListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetargetListRow(targetListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "targetListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class targetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columntarget_Id;
            
            private global::System.Data.DataColumn columntargetList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public targetDataTable() {
                this.TableName = "target";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal targetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected targetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn target_IdColumn {
                get {
                    return this.columntarget_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn targetList_IdColumn {
                get {
                    return this.columntargetList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public targetRow this[int index] {
                get {
                    return ((targetRow)(this.Rows[index]));
                }
            }
            
            public event targetRowChangeEventHandler targetRowChanging;
            
            public event targetRowChangeEventHandler targetRowChanged;
            
            public event targetRowChangeEventHandler targetRowDeleting;
            
            public event targetRowChangeEventHandler targetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtargetRow(targetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public targetRow AddtargetRow(targetListRow parenttargetListRowBytargetList_target) {
                targetRow rowtargetRow = ((targetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parenttargetListRowBytargetList_target != null)) {
                    columnValuesArray[1] = parenttargetListRowBytargetList_target[1];
                }
                rowtargetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtargetRow);
                return rowtargetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                targetDataTable cln = ((targetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new targetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntarget_Id = base.Columns["target_Id"];
                this.columntargetList_Id = base.Columns["targetList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntarget_Id = new global::System.Data.DataColumn("target_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columntarget_Id);
                this.columntargetList_Id = new global::System.Data.DataColumn("targetList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columntargetList_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columntarget_Id}, true));
                this.columntarget_Id.AutoIncrement = true;
                this.columntarget_Id.AllowDBNull = false;
                this.columntarget_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public targetRow NewtargetRow() {
                return ((targetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new targetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(targetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.targetRowChanged != null)) {
                    this.targetRowChanged(this, new targetRowChangeEvent(((targetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.targetRowChanging != null)) {
                    this.targetRowChanging(this, new targetRowChangeEvent(((targetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.targetRowDeleted != null)) {
                    this.targetRowDeleted(this, new targetRowChangeEvent(((targetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.targetRowDeleting != null)) {
                    this.targetRowDeleting(this, new targetRowChangeEvent(((targetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetargetRow(targetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "targetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class instrumentConfigurationListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columninstrumentConfigurationList_Id;
            
            private global::System.Data.DataColumn columnmzML_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentConfigurationListDataTable() {
                this.TableName = "instrumentConfigurationList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal instrumentConfigurationListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected instrumentConfigurationListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn instrumentConfigurationList_IdColumn {
                get {
                    return this.columninstrumentConfigurationList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mzML_IdColumn {
                get {
                    return this.columnmzML_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentConfigurationListRow this[int index] {
                get {
                    return ((instrumentConfigurationListRow)(this.Rows[index]));
                }
            }
            
            public event instrumentConfigurationListRowChangeEventHandler instrumentConfigurationListRowChanging;
            
            public event instrumentConfigurationListRowChangeEventHandler instrumentConfigurationListRowChanged;
            
            public event instrumentConfigurationListRowChangeEventHandler instrumentConfigurationListRowDeleting;
            
            public event instrumentConfigurationListRowChangeEventHandler instrumentConfigurationListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddinstrumentConfigurationListRow(instrumentConfigurationListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentConfigurationListRow AddinstrumentConfigurationListRow(ulong count, mzMLRow parentmzMLRowBymzML_instrumentConfigurationList) {
                instrumentConfigurationListRow rowinstrumentConfigurationListRow = ((instrumentConfigurationListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        null,
                        null};
                if ((parentmzMLRowBymzML_instrumentConfigurationList != null)) {
                    columnValuesArray[2] = parentmzMLRowBymzML_instrumentConfigurationList[3];
                }
                rowinstrumentConfigurationListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowinstrumentConfigurationListRow);
                return rowinstrumentConfigurationListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                instrumentConfigurationListDataTable cln = ((instrumentConfigurationListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new instrumentConfigurationListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columninstrumentConfigurationList_Id = base.Columns["instrumentConfigurationList_Id"];
                this.columnmzML_Id = base.Columns["mzML_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columninstrumentConfigurationList_Id = new global::System.Data.DataColumn("instrumentConfigurationList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columninstrumentConfigurationList_Id);
                this.columnmzML_Id = new global::System.Data.DataColumn("mzML_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmzML_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columninstrumentConfigurationList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columninstrumentConfigurationList_Id.AutoIncrement = true;
                this.columninstrumentConfigurationList_Id.AllowDBNull = false;
                this.columninstrumentConfigurationList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentConfigurationListRow NewinstrumentConfigurationListRow() {
                return ((instrumentConfigurationListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new instrumentConfigurationListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(instrumentConfigurationListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.instrumentConfigurationListRowChanged != null)) {
                    this.instrumentConfigurationListRowChanged(this, new instrumentConfigurationListRowChangeEvent(((instrumentConfigurationListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.instrumentConfigurationListRowChanging != null)) {
                    this.instrumentConfigurationListRowChanging(this, new instrumentConfigurationListRowChangeEvent(((instrumentConfigurationListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.instrumentConfigurationListRowDeleted != null)) {
                    this.instrumentConfigurationListRowDeleted(this, new instrumentConfigurationListRowChangeEvent(((instrumentConfigurationListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.instrumentConfigurationListRowDeleting != null)) {
                    this.instrumentConfigurationListRowDeleting(this, new instrumentConfigurationListRowChangeEvent(((instrumentConfigurationListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveinstrumentConfigurationListRow(instrumentConfigurationListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "instrumentConfigurationListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class instrumentConfigurationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnscanSettingsRef;
            
            private global::System.Data.DataColumn columninstrumentConfiguration_Id;
            
            private global::System.Data.DataColumn columninstrumentConfigurationList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentConfigurationDataTable() {
                this.TableName = "instrumentConfiguration";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal instrumentConfigurationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected instrumentConfigurationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanSettingsRefColumn {
                get {
                    return this.columnscanSettingsRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn instrumentConfiguration_IdColumn {
                get {
                    return this.columninstrumentConfiguration_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn instrumentConfigurationList_IdColumn {
                get {
                    return this.columninstrumentConfigurationList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentConfigurationRow this[int index] {
                get {
                    return ((instrumentConfigurationRow)(this.Rows[index]));
                }
            }
            
            public event instrumentConfigurationRowChangeEventHandler instrumentConfigurationRowChanging;
            
            public event instrumentConfigurationRowChangeEventHandler instrumentConfigurationRowChanged;
            
            public event instrumentConfigurationRowChangeEventHandler instrumentConfigurationRowDeleting;
            
            public event instrumentConfigurationRowChangeEventHandler instrumentConfigurationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddinstrumentConfigurationRow(instrumentConfigurationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentConfigurationRow AddinstrumentConfigurationRow(string id, string scanSettingsRef, instrumentConfigurationListRow parentinstrumentConfigurationListRowByinstrumentConfigurationList_instrumentConfiguration) {
                instrumentConfigurationRow rowinstrumentConfigurationRow = ((instrumentConfigurationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        scanSettingsRef,
                        null,
                        null};
                if ((parentinstrumentConfigurationListRowByinstrumentConfigurationList_instrumentConfiguration != null)) {
                    columnValuesArray[3] = parentinstrumentConfigurationListRowByinstrumentConfigurationList_instrumentConfiguration[1];
                }
                rowinstrumentConfigurationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowinstrumentConfigurationRow);
                return rowinstrumentConfigurationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                instrumentConfigurationDataTable cln = ((instrumentConfigurationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new instrumentConfigurationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnscanSettingsRef = base.Columns["scanSettingsRef"];
                this.columninstrumentConfiguration_Id = base.Columns["instrumentConfiguration_Id"];
                this.columninstrumentConfigurationList_Id = base.Columns["instrumentConfigurationList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnscanSettingsRef = new global::System.Data.DataColumn("scanSettingsRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnscanSettingsRef);
                this.columninstrumentConfiguration_Id = new global::System.Data.DataColumn("instrumentConfiguration_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columninstrumentConfiguration_Id);
                this.columninstrumentConfigurationList_Id = new global::System.Data.DataColumn("instrumentConfigurationList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columninstrumentConfigurationList_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columninstrumentConfiguration_Id}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnscanSettingsRef.Namespace = "";
                this.columninstrumentConfiguration_Id.AutoIncrement = true;
                this.columninstrumentConfiguration_Id.AllowDBNull = false;
                this.columninstrumentConfiguration_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentConfigurationRow NewinstrumentConfigurationRow() {
                return ((instrumentConfigurationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new instrumentConfigurationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(instrumentConfigurationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.instrumentConfigurationRowChanged != null)) {
                    this.instrumentConfigurationRowChanged(this, new instrumentConfigurationRowChangeEvent(((instrumentConfigurationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.instrumentConfigurationRowChanging != null)) {
                    this.instrumentConfigurationRowChanging(this, new instrumentConfigurationRowChangeEvent(((instrumentConfigurationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.instrumentConfigurationRowDeleted != null)) {
                    this.instrumentConfigurationRowDeleted(this, new instrumentConfigurationRowChangeEvent(((instrumentConfigurationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.instrumentConfigurationRowDeleting != null)) {
                    this.instrumentConfigurationRowDeleting(this, new instrumentConfigurationRowChangeEvent(((instrumentConfigurationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveinstrumentConfigurationRow(instrumentConfigurationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "instrumentConfigurationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class componentListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columncomponentList_Id;
            
            private global::System.Data.DataColumn columninstrumentConfiguration_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public componentListDataTable() {
                this.TableName = "componentList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal componentListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected componentListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn componentList_IdColumn {
                get {
                    return this.columncomponentList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn instrumentConfiguration_IdColumn {
                get {
                    return this.columninstrumentConfiguration_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public componentListRow this[int index] {
                get {
                    return ((componentListRow)(this.Rows[index]));
                }
            }
            
            public event componentListRowChangeEventHandler componentListRowChanging;
            
            public event componentListRowChangeEventHandler componentListRowChanged;
            
            public event componentListRowChangeEventHandler componentListRowDeleting;
            
            public event componentListRowChangeEventHandler componentListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcomponentListRow(componentListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public componentListRow AddcomponentListRow(ulong count, instrumentConfigurationRow parentinstrumentConfigurationRowByinstrumentConfiguration_componentList) {
                componentListRow rowcomponentListRow = ((componentListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        null,
                        null};
                if ((parentinstrumentConfigurationRowByinstrumentConfiguration_componentList != null)) {
                    columnValuesArray[2] = parentinstrumentConfigurationRowByinstrumentConfiguration_componentList[2];
                }
                rowcomponentListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowcomponentListRow);
                return rowcomponentListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                componentListDataTable cln = ((componentListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new componentListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columncomponentList_Id = base.Columns["componentList_Id"];
                this.columninstrumentConfiguration_Id = base.Columns["instrumentConfiguration_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columncomponentList_Id = new global::System.Data.DataColumn("componentList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncomponentList_Id);
                this.columninstrumentConfiguration_Id = new global::System.Data.DataColumn("instrumentConfiguration_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columninstrumentConfiguration_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columncomponentList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columncomponentList_Id.AutoIncrement = true;
                this.columncomponentList_Id.AllowDBNull = false;
                this.columncomponentList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public componentListRow NewcomponentListRow() {
                return ((componentListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new componentListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(componentListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.componentListRowChanged != null)) {
                    this.componentListRowChanged(this, new componentListRowChangeEvent(((componentListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.componentListRowChanging != null)) {
                    this.componentListRowChanging(this, new componentListRowChangeEvent(((componentListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.componentListRowDeleted != null)) {
                    this.componentListRowDeleted(this, new componentListRowChangeEvent(((componentListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.componentListRowDeleting != null)) {
                    this.componentListRowDeleting(this, new componentListRowChangeEvent(((componentListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecomponentListRow(componentListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "componentListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sourceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnorder;
            
            private global::System.Data.DataColumn columnsource_Id;
            
            private global::System.Data.DataColumn columncomponentList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceDataTable() {
                this.TableName = "source";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected sourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn orderColumn {
                get {
                    return this.columnorder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn source_IdColumn {
                get {
                    return this.columnsource_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn componentList_IdColumn {
                get {
                    return this.columncomponentList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceRow this[int index] {
                get {
                    return ((sourceRow)(this.Rows[index]));
                }
            }
            
            public event sourceRowChangeEventHandler sourceRowChanging;
            
            public event sourceRowChangeEventHandler sourceRowChanged;
            
            public event sourceRowChangeEventHandler sourceRowDeleting;
            
            public event sourceRowChangeEventHandler sourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsourceRow(sourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceRow AddsourceRow(int order, componentListRow parentcomponentListRowBycomponentList_source) {
                sourceRow rowsourceRow = ((sourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        order,
                        null,
                        null};
                if ((parentcomponentListRowBycomponentList_source != null)) {
                    columnValuesArray[2] = parentcomponentListRowBycomponentList_source[1];
                }
                rowsourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsourceRow);
                return rowsourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                sourceDataTable cln = ((sourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new sourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnorder = base.Columns["order"];
                this.columnsource_Id = base.Columns["source_Id"];
                this.columncomponentList_Id = base.Columns["componentList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnorder = new global::System.Data.DataColumn("order", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnorder);
                this.columnsource_Id = new global::System.Data.DataColumn("source_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnsource_Id);
                this.columncomponentList_Id = new global::System.Data.DataColumn("componentList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncomponentList_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsource_Id}, true));
                this.columnorder.AllowDBNull = false;
                this.columnorder.Namespace = "";
                this.columnsource_Id.AutoIncrement = true;
                this.columnsource_Id.AllowDBNull = false;
                this.columnsource_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceRow NewsourceRow() {
                return ((sourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new sourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(sourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sourceRowChanged != null)) {
                    this.sourceRowChanged(this, new sourceRowChangeEvent(((sourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sourceRowChanging != null)) {
                    this.sourceRowChanging(this, new sourceRowChangeEvent(((sourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sourceRowDeleted != null)) {
                    this.sourceRowDeleted(this, new sourceRowChangeEvent(((sourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sourceRowDeleting != null)) {
                    this.sourceRowDeleting(this, new sourceRowChangeEvent(((sourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesourceRow(sourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class analyzerDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnorder;
            
            private global::System.Data.DataColumn columnanalyzer_Id;
            
            private global::System.Data.DataColumn columncomponentList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public analyzerDataTable() {
                this.TableName = "analyzer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal analyzerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected analyzerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn orderColumn {
                get {
                    return this.columnorder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn analyzer_IdColumn {
                get {
                    return this.columnanalyzer_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn componentList_IdColumn {
                get {
                    return this.columncomponentList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public analyzerRow this[int index] {
                get {
                    return ((analyzerRow)(this.Rows[index]));
                }
            }
            
            public event analyzerRowChangeEventHandler analyzerRowChanging;
            
            public event analyzerRowChangeEventHandler analyzerRowChanged;
            
            public event analyzerRowChangeEventHandler analyzerRowDeleting;
            
            public event analyzerRowChangeEventHandler analyzerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddanalyzerRow(analyzerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public analyzerRow AddanalyzerRow(int order, componentListRow parentcomponentListRowBycomponentList_analyzer) {
                analyzerRow rowanalyzerRow = ((analyzerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        order,
                        null,
                        null};
                if ((parentcomponentListRowBycomponentList_analyzer != null)) {
                    columnValuesArray[2] = parentcomponentListRowBycomponentList_analyzer[1];
                }
                rowanalyzerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowanalyzerRow);
                return rowanalyzerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                analyzerDataTable cln = ((analyzerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new analyzerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnorder = base.Columns["order"];
                this.columnanalyzer_Id = base.Columns["analyzer_Id"];
                this.columncomponentList_Id = base.Columns["componentList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnorder = new global::System.Data.DataColumn("order", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnorder);
                this.columnanalyzer_Id = new global::System.Data.DataColumn("analyzer_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnanalyzer_Id);
                this.columncomponentList_Id = new global::System.Data.DataColumn("componentList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncomponentList_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnanalyzer_Id}, true));
                this.columnorder.AllowDBNull = false;
                this.columnorder.Namespace = "";
                this.columnanalyzer_Id.AutoIncrement = true;
                this.columnanalyzer_Id.AllowDBNull = false;
                this.columnanalyzer_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public analyzerRow NewanalyzerRow() {
                return ((analyzerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new analyzerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(analyzerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.analyzerRowChanged != null)) {
                    this.analyzerRowChanged(this, new analyzerRowChangeEvent(((analyzerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.analyzerRowChanging != null)) {
                    this.analyzerRowChanging(this, new analyzerRowChangeEvent(((analyzerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.analyzerRowDeleted != null)) {
                    this.analyzerRowDeleted(this, new analyzerRowChangeEvent(((analyzerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.analyzerRowDeleting != null)) {
                    this.analyzerRowDeleting(this, new analyzerRowChangeEvent(((analyzerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveanalyzerRow(analyzerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "analyzerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class detectorDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnorder;
            
            private global::System.Data.DataColumn columndetector_Id;
            
            private global::System.Data.DataColumn columncomponentList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detectorDataTable() {
                this.TableName = "detector";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal detectorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected detectorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn orderColumn {
                get {
                    return this.columnorder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detector_IdColumn {
                get {
                    return this.columndetector_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn componentList_IdColumn {
                get {
                    return this.columncomponentList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detectorRow this[int index] {
                get {
                    return ((detectorRow)(this.Rows[index]));
                }
            }
            
            public event detectorRowChangeEventHandler detectorRowChanging;
            
            public event detectorRowChangeEventHandler detectorRowChanged;
            
            public event detectorRowChangeEventHandler detectorRowDeleting;
            
            public event detectorRowChangeEventHandler detectorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddetectorRow(detectorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detectorRow AdddetectorRow(int order, componentListRow parentcomponentListRowBycomponentList_detector) {
                detectorRow rowdetectorRow = ((detectorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        order,
                        null,
                        null};
                if ((parentcomponentListRowBycomponentList_detector != null)) {
                    columnValuesArray[2] = parentcomponentListRowBycomponentList_detector[1];
                }
                rowdetectorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdetectorRow);
                return rowdetectorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                detectorDataTable cln = ((detectorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new detectorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnorder = base.Columns["order"];
                this.columndetector_Id = base.Columns["detector_Id"];
                this.columncomponentList_Id = base.Columns["componentList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnorder = new global::System.Data.DataColumn("order", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnorder);
                this.columndetector_Id = new global::System.Data.DataColumn("detector_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndetector_Id);
                this.columncomponentList_Id = new global::System.Data.DataColumn("componentList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncomponentList_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndetector_Id}, true));
                this.columnorder.AllowDBNull = false;
                this.columnorder.Namespace = "";
                this.columndetector_Id.AutoIncrement = true;
                this.columndetector_Id.AllowDBNull = false;
                this.columndetector_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detectorRow NewdetectorRow() {
                return ((detectorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new detectorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(detectorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.detectorRowChanged != null)) {
                    this.detectorRowChanged(this, new detectorRowChangeEvent(((detectorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.detectorRowChanging != null)) {
                    this.detectorRowChanging(this, new detectorRowChangeEvent(((detectorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.detectorRowDeleted != null)) {
                    this.detectorRowDeleted(this, new detectorRowChangeEvent(((detectorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.detectorRowDeleting != null)) {
                    this.detectorRowDeleting(this, new detectorRowChangeEvent(((detectorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedetectorRow(detectorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "detectorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class softwareRefDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn column_ref;
            
            private global::System.Data.DataColumn columninstrumentConfiguration_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareRefDataTable() {
                this.TableName = "softwareRef";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal softwareRefDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected softwareRefDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _refColumn {
                get {
                    return this.column_ref;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn instrumentConfiguration_IdColumn {
                get {
                    return this.columninstrumentConfiguration_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareRefRow this[int index] {
                get {
                    return ((softwareRefRow)(this.Rows[index]));
                }
            }
            
            public event softwareRefRowChangeEventHandler softwareRefRowChanging;
            
            public event softwareRefRowChangeEventHandler softwareRefRowChanged;
            
            public event softwareRefRowChangeEventHandler softwareRefRowDeleting;
            
            public event softwareRefRowChangeEventHandler softwareRefRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsoftwareRefRow(softwareRefRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareRefRow AddsoftwareRefRow(string _ref, instrumentConfigurationRow parentinstrumentConfigurationRowByinstrumentConfiguration_softwareRef) {
                softwareRefRow rowsoftwareRefRow = ((softwareRefRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        _ref,
                        null};
                if ((parentinstrumentConfigurationRowByinstrumentConfiguration_softwareRef != null)) {
                    columnValuesArray[1] = parentinstrumentConfigurationRowByinstrumentConfiguration_softwareRef[2];
                }
                rowsoftwareRefRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsoftwareRefRow);
                return rowsoftwareRefRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                softwareRefDataTable cln = ((softwareRefDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new softwareRefDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column_ref = base.Columns["ref"];
                this.columninstrumentConfiguration_Id = base.Columns["instrumentConfiguration_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column_ref = new global::System.Data.DataColumn("ref", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.column_ref);
                this.columninstrumentConfiguration_Id = new global::System.Data.DataColumn("instrumentConfiguration_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columninstrumentConfiguration_Id);
                this.column_ref.AllowDBNull = false;
                this.column_ref.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareRefRow NewsoftwareRefRow() {
                return ((softwareRefRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new softwareRefRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(softwareRefRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.softwareRefRowChanged != null)) {
                    this.softwareRefRowChanged(this, new softwareRefRowChangeEvent(((softwareRefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.softwareRefRowChanging != null)) {
                    this.softwareRefRowChanging(this, new softwareRefRowChangeEvent(((softwareRefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.softwareRefRowDeleted != null)) {
                    this.softwareRefRowDeleted(this, new softwareRefRowChangeEvent(((softwareRefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.softwareRefRowDeleting != null)) {
                    this.softwareRefRowDeleting(this, new softwareRefRowChangeEvent(((softwareRefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesoftwareRefRow(softwareRefRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "softwareRefDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dataProcessingListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columndataProcessingList_Id;
            
            private global::System.Data.DataColumn columnmzML_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataProcessingListDataTable() {
                this.TableName = "dataProcessingList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dataProcessingListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dataProcessingListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataProcessingList_IdColumn {
                get {
                    return this.columndataProcessingList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mzML_IdColumn {
                get {
                    return this.columnmzML_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataProcessingListRow this[int index] {
                get {
                    return ((dataProcessingListRow)(this.Rows[index]));
                }
            }
            
            public event dataProcessingListRowChangeEventHandler dataProcessingListRowChanging;
            
            public event dataProcessingListRowChangeEventHandler dataProcessingListRowChanged;
            
            public event dataProcessingListRowChangeEventHandler dataProcessingListRowDeleting;
            
            public event dataProcessingListRowChangeEventHandler dataProcessingListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddataProcessingListRow(dataProcessingListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataProcessingListRow AdddataProcessingListRow(ulong count, mzMLRow parentmzMLRowBymzML_dataProcessingList) {
                dataProcessingListRow rowdataProcessingListRow = ((dataProcessingListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        null,
                        null};
                if ((parentmzMLRowBymzML_dataProcessingList != null)) {
                    columnValuesArray[2] = parentmzMLRowBymzML_dataProcessingList[3];
                }
                rowdataProcessingListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdataProcessingListRow);
                return rowdataProcessingListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dataProcessingListDataTable cln = ((dataProcessingListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dataProcessingListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columndataProcessingList_Id = base.Columns["dataProcessingList_Id"];
                this.columnmzML_Id = base.Columns["mzML_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columndataProcessingList_Id = new global::System.Data.DataColumn("dataProcessingList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndataProcessingList_Id);
                this.columnmzML_Id = new global::System.Data.DataColumn("mzML_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmzML_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndataProcessingList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columndataProcessingList_Id.AutoIncrement = true;
                this.columndataProcessingList_Id.AllowDBNull = false;
                this.columndataProcessingList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataProcessingListRow NewdataProcessingListRow() {
                return ((dataProcessingListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dataProcessingListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dataProcessingListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dataProcessingListRowChanged != null)) {
                    this.dataProcessingListRowChanged(this, new dataProcessingListRowChangeEvent(((dataProcessingListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dataProcessingListRowChanging != null)) {
                    this.dataProcessingListRowChanging(this, new dataProcessingListRowChangeEvent(((dataProcessingListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dataProcessingListRowDeleted != null)) {
                    this.dataProcessingListRowDeleted(this, new dataProcessingListRowChangeEvent(((dataProcessingListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dataProcessingListRowDeleting != null)) {
                    this.dataProcessingListRowDeleting(this, new dataProcessingListRowChangeEvent(((dataProcessingListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedataProcessingListRow(dataProcessingListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dataProcessingListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dataProcessingDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columndataProcessing_Id;
            
            private global::System.Data.DataColumn columndataProcessingList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataProcessingDataTable() {
                this.TableName = "dataProcessing";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dataProcessingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dataProcessingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataProcessing_IdColumn {
                get {
                    return this.columndataProcessing_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataProcessingList_IdColumn {
                get {
                    return this.columndataProcessingList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataProcessingRow this[int index] {
                get {
                    return ((dataProcessingRow)(this.Rows[index]));
                }
            }
            
            public event dataProcessingRowChangeEventHandler dataProcessingRowChanging;
            
            public event dataProcessingRowChangeEventHandler dataProcessingRowChanged;
            
            public event dataProcessingRowChangeEventHandler dataProcessingRowDeleting;
            
            public event dataProcessingRowChangeEventHandler dataProcessingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddataProcessingRow(dataProcessingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataProcessingRow AdddataProcessingRow(string id, dataProcessingListRow parentdataProcessingListRowBydataProcessingList_dataProcessing) {
                dataProcessingRow rowdataProcessingRow = ((dataProcessingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        null,
                        null};
                if ((parentdataProcessingListRowBydataProcessingList_dataProcessing != null)) {
                    columnValuesArray[2] = parentdataProcessingListRowBydataProcessingList_dataProcessing[1];
                }
                rowdataProcessingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdataProcessingRow);
                return rowdataProcessingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dataProcessingDataTable cln = ((dataProcessingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dataProcessingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columndataProcessing_Id = base.Columns["dataProcessing_Id"];
                this.columndataProcessingList_Id = base.Columns["dataProcessingList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columndataProcessing_Id = new global::System.Data.DataColumn("dataProcessing_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndataProcessing_Id);
                this.columndataProcessingList_Id = new global::System.Data.DataColumn("dataProcessingList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndataProcessingList_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndataProcessing_Id}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columndataProcessing_Id.AutoIncrement = true;
                this.columndataProcessing_Id.AllowDBNull = false;
                this.columndataProcessing_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataProcessingRow NewdataProcessingRow() {
                return ((dataProcessingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dataProcessingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dataProcessingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dataProcessingRowChanged != null)) {
                    this.dataProcessingRowChanged(this, new dataProcessingRowChangeEvent(((dataProcessingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dataProcessingRowChanging != null)) {
                    this.dataProcessingRowChanging(this, new dataProcessingRowChangeEvent(((dataProcessingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dataProcessingRowDeleted != null)) {
                    this.dataProcessingRowDeleted(this, new dataProcessingRowChangeEvent(((dataProcessingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dataProcessingRowDeleting != null)) {
                    this.dataProcessingRowDeleting(this, new dataProcessingRowChangeEvent(((dataProcessingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedataProcessingRow(dataProcessingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dataProcessingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class processingMethodDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnorder;
            
            private global::System.Data.DataColumn columnsoftwareRef;
            
            private global::System.Data.DataColumn columnprocessingMethod_Id;
            
            private global::System.Data.DataColumn columndataProcessing_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public processingMethodDataTable() {
                this.TableName = "processingMethod";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal processingMethodDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected processingMethodDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn orderColumn {
                get {
                    return this.columnorder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn softwareRefColumn {
                get {
                    return this.columnsoftwareRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn processingMethod_IdColumn {
                get {
                    return this.columnprocessingMethod_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataProcessing_IdColumn {
                get {
                    return this.columndataProcessing_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public processingMethodRow this[int index] {
                get {
                    return ((processingMethodRow)(this.Rows[index]));
                }
            }
            
            public event processingMethodRowChangeEventHandler processingMethodRowChanging;
            
            public event processingMethodRowChangeEventHandler processingMethodRowChanged;
            
            public event processingMethodRowChangeEventHandler processingMethodRowDeleting;
            
            public event processingMethodRowChangeEventHandler processingMethodRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddprocessingMethodRow(processingMethodRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public processingMethodRow AddprocessingMethodRow(ulong order, string softwareRef, dataProcessingRow parentdataProcessingRowBydataProcessing_processingMethod) {
                processingMethodRow rowprocessingMethodRow = ((processingMethodRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        order,
                        softwareRef,
                        null,
                        null};
                if ((parentdataProcessingRowBydataProcessing_processingMethod != null)) {
                    columnValuesArray[3] = parentdataProcessingRowBydataProcessing_processingMethod[1];
                }
                rowprocessingMethodRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowprocessingMethodRow);
                return rowprocessingMethodRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                processingMethodDataTable cln = ((processingMethodDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new processingMethodDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnorder = base.Columns["order"];
                this.columnsoftwareRef = base.Columns["softwareRef"];
                this.columnprocessingMethod_Id = base.Columns["processingMethod_Id"];
                this.columndataProcessing_Id = base.Columns["dataProcessing_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnorder = new global::System.Data.DataColumn("order", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnorder);
                this.columnsoftwareRef = new global::System.Data.DataColumn("softwareRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnsoftwareRef);
                this.columnprocessingMethod_Id = new global::System.Data.DataColumn("processingMethod_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnprocessingMethod_Id);
                this.columndataProcessing_Id = new global::System.Data.DataColumn("dataProcessing_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndataProcessing_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnprocessingMethod_Id}, true));
                this.columnorder.AllowDBNull = false;
                this.columnorder.Namespace = "";
                this.columnsoftwareRef.AllowDBNull = false;
                this.columnsoftwareRef.Namespace = "";
                this.columnprocessingMethod_Id.AutoIncrement = true;
                this.columnprocessingMethod_Id.AllowDBNull = false;
                this.columnprocessingMethod_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public processingMethodRow NewprocessingMethodRow() {
                return ((processingMethodRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new processingMethodRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(processingMethodRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.processingMethodRowChanged != null)) {
                    this.processingMethodRowChanged(this, new processingMethodRowChangeEvent(((processingMethodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.processingMethodRowChanging != null)) {
                    this.processingMethodRowChanging(this, new processingMethodRowChangeEvent(((processingMethodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.processingMethodRowDeleted != null)) {
                    this.processingMethodRowDeleted(this, new processingMethodRowChangeEvent(((processingMethodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.processingMethodRowDeleting != null)) {
                    this.processingMethodRowDeleting(this, new processingMethodRowChangeEvent(((processingMethodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveprocessingMethodRow(processingMethodRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "processingMethodDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class runDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columndefaultInstrumentConfigurationRef;
            
            private global::System.Data.DataColumn columndefaultSourceFileRef;
            
            private global::System.Data.DataColumn columnsampleRef;
            
            private global::System.Data.DataColumn columnstartTimeStamp;
            
            private global::System.Data.DataColumn columnrun_Id;
            
            private global::System.Data.DataColumn columnmzML_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public runDataTable() {
                this.TableName = "run";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal runDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected runDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn defaultInstrumentConfigurationRefColumn {
                get {
                    return this.columndefaultInstrumentConfigurationRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn defaultSourceFileRefColumn {
                get {
                    return this.columndefaultSourceFileRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sampleRefColumn {
                get {
                    return this.columnsampleRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn startTimeStampColumn {
                get {
                    return this.columnstartTimeStamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn run_IdColumn {
                get {
                    return this.columnrun_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mzML_IdColumn {
                get {
                    return this.columnmzML_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public runRow this[int index] {
                get {
                    return ((runRow)(this.Rows[index]));
                }
            }
            
            public event runRowChangeEventHandler runRowChanging;
            
            public event runRowChangeEventHandler runRowChanged;
            
            public event runRowChangeEventHandler runRowDeleting;
            
            public event runRowChangeEventHandler runRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrunRow(runRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public runRow AddrunRow(string id, string defaultInstrumentConfigurationRef, string defaultSourceFileRef, string sampleRef, System.DateTime startTimeStamp, mzMLRow parentmzMLRowBymzML_run) {
                runRow rowrunRow = ((runRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        defaultInstrumentConfigurationRef,
                        defaultSourceFileRef,
                        sampleRef,
                        startTimeStamp,
                        null,
                        null};
                if ((parentmzMLRowBymzML_run != null)) {
                    columnValuesArray[6] = parentmzMLRowBymzML_run[3];
                }
                rowrunRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrunRow);
                return rowrunRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                runDataTable cln = ((runDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new runDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columndefaultInstrumentConfigurationRef = base.Columns["defaultInstrumentConfigurationRef"];
                this.columndefaultSourceFileRef = base.Columns["defaultSourceFileRef"];
                this.columnsampleRef = base.Columns["sampleRef"];
                this.columnstartTimeStamp = base.Columns["startTimeStamp"];
                this.columnrun_Id = base.Columns["run_Id"];
                this.columnmzML_Id = base.Columns["mzML_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columndefaultInstrumentConfigurationRef = new global::System.Data.DataColumn("defaultInstrumentConfigurationRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndefaultInstrumentConfigurationRef);
                this.columndefaultSourceFileRef = new global::System.Data.DataColumn("defaultSourceFileRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndefaultSourceFileRef);
                this.columnsampleRef = new global::System.Data.DataColumn("sampleRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnsampleRef);
                this.columnstartTimeStamp = new global::System.Data.DataColumn("startTimeStamp", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnstartTimeStamp);
                this.columnrun_Id = new global::System.Data.DataColumn("run_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrun_Id);
                this.columnmzML_Id = new global::System.Data.DataColumn("mzML_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmzML_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnrun_Id}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columndefaultInstrumentConfigurationRef.AllowDBNull = false;
                this.columndefaultInstrumentConfigurationRef.Namespace = "";
                this.columndefaultSourceFileRef.Namespace = "";
                this.columnsampleRef.Namespace = "";
                this.columnstartTimeStamp.Namespace = "";
                this.columnrun_Id.AutoIncrement = true;
                this.columnrun_Id.AllowDBNull = false;
                this.columnrun_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public runRow NewrunRow() {
                return ((runRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new runRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(runRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.runRowChanged != null)) {
                    this.runRowChanged(this, new runRowChangeEvent(((runRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.runRowChanging != null)) {
                    this.runRowChanging(this, new runRowChangeEvent(((runRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.runRowDeleted != null)) {
                    this.runRowDeleted(this, new runRowChangeEvent(((runRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.runRowDeleting != null)) {
                    this.runRowDeleting(this, new runRowChangeEvent(((runRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverunRow(runRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "runDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class spectrumListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columndefaultDataProcessingRef;
            
            private global::System.Data.DataColumn columnspectrumList_Id;
            
            private global::System.Data.DataColumn columnrun_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumListDataTable() {
                this.TableName = "spectrumList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal spectrumListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected spectrumListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn defaultDataProcessingRefColumn {
                get {
                    return this.columndefaultDataProcessingRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spectrumList_IdColumn {
                get {
                    return this.columnspectrumList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn run_IdColumn {
                get {
                    return this.columnrun_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumListRow this[int index] {
                get {
                    return ((spectrumListRow)(this.Rows[index]));
                }
            }
            
            public event spectrumListRowChangeEventHandler spectrumListRowChanging;
            
            public event spectrumListRowChangeEventHandler spectrumListRowChanged;
            
            public event spectrumListRowChangeEventHandler spectrumListRowDeleting;
            
            public event spectrumListRowChangeEventHandler spectrumListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddspectrumListRow(spectrumListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumListRow AddspectrumListRow(ulong count, string defaultDataProcessingRef, runRow parentrunRowByrun_spectrumList) {
                spectrumListRow rowspectrumListRow = ((spectrumListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        defaultDataProcessingRef,
                        null,
                        null};
                if ((parentrunRowByrun_spectrumList != null)) {
                    columnValuesArray[3] = parentrunRowByrun_spectrumList[5];
                }
                rowspectrumListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowspectrumListRow);
                return rowspectrumListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                spectrumListDataTable cln = ((spectrumListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new spectrumListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columndefaultDataProcessingRef = base.Columns["defaultDataProcessingRef"];
                this.columnspectrumList_Id = base.Columns["spectrumList_Id"];
                this.columnrun_Id = base.Columns["run_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columndefaultDataProcessingRef = new global::System.Data.DataColumn("defaultDataProcessingRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndefaultDataProcessingRef);
                this.columnspectrumList_Id = new global::System.Data.DataColumn("spectrumList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnspectrumList_Id);
                this.columnrun_Id = new global::System.Data.DataColumn("run_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrun_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnspectrumList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columndefaultDataProcessingRef.AllowDBNull = false;
                this.columndefaultDataProcessingRef.Namespace = "";
                this.columnspectrumList_Id.AutoIncrement = true;
                this.columnspectrumList_Id.AllowDBNull = false;
                this.columnspectrumList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumListRow NewspectrumListRow() {
                return ((spectrumListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new spectrumListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(spectrumListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.spectrumListRowChanged != null)) {
                    this.spectrumListRowChanged(this, new spectrumListRowChangeEvent(((spectrumListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.spectrumListRowChanging != null)) {
                    this.spectrumListRowChanging(this, new spectrumListRowChangeEvent(((spectrumListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.spectrumListRowDeleted != null)) {
                    this.spectrumListRowDeleted(this, new spectrumListRowChangeEvent(((spectrumListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.spectrumListRowDeleting != null)) {
                    this.spectrumListRowDeleting(this, new spectrumListRowChangeEvent(((spectrumListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovespectrumListRow(spectrumListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "spectrumListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class spectrumDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnspotID;
            
            private global::System.Data.DataColumn columnindex;
            
            private global::System.Data.DataColumn columndefaultArrayLength;
            
            private global::System.Data.DataColumn columndataProcessingRef;
            
            private global::System.Data.DataColumn columnsourceFileRef;
            
            private global::System.Data.DataColumn columnspectrum_Id;
            
            private global::System.Data.DataColumn columnspectrumList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumDataTable() {
                this.TableName = "spectrum";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal spectrumDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected spectrumDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spotIDColumn {
                get {
                    return this.columnspotID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn indexColumn {
                get {
                    return this.columnindex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn defaultArrayLengthColumn {
                get {
                    return this.columndefaultArrayLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataProcessingRefColumn {
                get {
                    return this.columndataProcessingRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourceFileRefColumn {
                get {
                    return this.columnsourceFileRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spectrum_IdColumn {
                get {
                    return this.columnspectrum_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spectrumList_IdColumn {
                get {
                    return this.columnspectrumList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumRow this[int index] {
                get {
                    return ((spectrumRow)(this.Rows[index]));
                }
            }
            
            public event spectrumRowChangeEventHandler spectrumRowChanging;
            
            public event spectrumRowChangeEventHandler spectrumRowChanged;
            
            public event spectrumRowChangeEventHandler spectrumRowDeleting;
            
            public event spectrumRowChangeEventHandler spectrumRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddspectrumRow(spectrumRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumRow AddspectrumRow(string id, string spotID, ulong index, int defaultArrayLength, string dataProcessingRef, string sourceFileRef, spectrumListRow parentspectrumListRowByspectrumList_spectrum) {
                spectrumRow rowspectrumRow = ((spectrumRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        spotID,
                        index,
                        defaultArrayLength,
                        dataProcessingRef,
                        sourceFileRef,
                        null,
                        null};
                if ((parentspectrumListRowByspectrumList_spectrum != null)) {
                    columnValuesArray[7] = parentspectrumListRowByspectrumList_spectrum[2];
                }
                rowspectrumRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowspectrumRow);
                return rowspectrumRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                spectrumDataTable cln = ((spectrumDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new spectrumDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnspotID = base.Columns["spotID"];
                this.columnindex = base.Columns["index"];
                this.columndefaultArrayLength = base.Columns["defaultArrayLength"];
                this.columndataProcessingRef = base.Columns["dataProcessingRef"];
                this.columnsourceFileRef = base.Columns["sourceFileRef"];
                this.columnspectrum_Id = base.Columns["spectrum_Id"];
                this.columnspectrumList_Id = base.Columns["spectrumList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnspotID = new global::System.Data.DataColumn("spotID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnspotID);
                this.columnindex = new global::System.Data.DataColumn("index", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnindex);
                this.columndefaultArrayLength = new global::System.Data.DataColumn("defaultArrayLength", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndefaultArrayLength);
                this.columndataProcessingRef = new global::System.Data.DataColumn("dataProcessingRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndataProcessingRef);
                this.columnsourceFileRef = new global::System.Data.DataColumn("sourceFileRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnsourceFileRef);
                this.columnspectrum_Id = new global::System.Data.DataColumn("spectrum_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnspectrum_Id);
                this.columnspectrumList_Id = new global::System.Data.DataColumn("spectrumList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnspectrumList_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnspectrum_Id}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnspotID.Namespace = "";
                this.columnindex.AllowDBNull = false;
                this.columnindex.Namespace = "";
                this.columndefaultArrayLength.AllowDBNull = false;
                this.columndefaultArrayLength.Namespace = "";
                this.columndataProcessingRef.Namespace = "";
                this.columnsourceFileRef.Namespace = "";
                this.columnspectrum_Id.AutoIncrement = true;
                this.columnspectrum_Id.AllowDBNull = false;
                this.columnspectrum_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumRow NewspectrumRow() {
                return ((spectrumRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new spectrumRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(spectrumRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.spectrumRowChanged != null)) {
                    this.spectrumRowChanged(this, new spectrumRowChangeEvent(((spectrumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.spectrumRowChanging != null)) {
                    this.spectrumRowChanging(this, new spectrumRowChangeEvent(((spectrumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.spectrumRowDeleted != null)) {
                    this.spectrumRowDeleted(this, new spectrumRowChangeEvent(((spectrumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.spectrumRowDeleting != null)) {
                    this.spectrumRowDeleting(this, new spectrumRowChangeEvent(((spectrumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovespectrumRow(spectrumRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "spectrumDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class scanListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columnscanList_Id;
            
            private global::System.Data.DataColumn columnspectrum_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanListDataTable() {
                this.TableName = "scanList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scanListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected scanListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanList_IdColumn {
                get {
                    return this.columnscanList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spectrum_IdColumn {
                get {
                    return this.columnspectrum_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanListRow this[int index] {
                get {
                    return ((scanListRow)(this.Rows[index]));
                }
            }
            
            public event scanListRowChangeEventHandler scanListRowChanging;
            
            public event scanListRowChangeEventHandler scanListRowChanged;
            
            public event scanListRowChangeEventHandler scanListRowDeleting;
            
            public event scanListRowChangeEventHandler scanListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddscanListRow(scanListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanListRow AddscanListRow(ulong count, spectrumRow parentspectrumRowByspectrum_scanList) {
                scanListRow rowscanListRow = ((scanListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        null,
                        null};
                if ((parentspectrumRowByspectrum_scanList != null)) {
                    columnValuesArray[2] = parentspectrumRowByspectrum_scanList[6];
                }
                rowscanListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowscanListRow);
                return rowscanListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                scanListDataTable cln = ((scanListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new scanListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columnscanList_Id = base.Columns["scanList_Id"];
                this.columnspectrum_Id = base.Columns["spectrum_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columnscanList_Id = new global::System.Data.DataColumn("scanList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscanList_Id);
                this.columnspectrum_Id = new global::System.Data.DataColumn("spectrum_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnspectrum_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnscanList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columnscanList_Id.AutoIncrement = true;
                this.columnscanList_Id.AllowDBNull = false;
                this.columnscanList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanListRow NewscanListRow() {
                return ((scanListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new scanListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(scanListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.scanListRowChanged != null)) {
                    this.scanListRowChanged(this, new scanListRowChangeEvent(((scanListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.scanListRowChanging != null)) {
                    this.scanListRowChanging(this, new scanListRowChangeEvent(((scanListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.scanListRowDeleted != null)) {
                    this.scanListRowDeleted(this, new scanListRowChangeEvent(((scanListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.scanListRowDeleting != null)) {
                    this.scanListRowDeleting(this, new scanListRowChangeEvent(((scanListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovescanListRow(scanListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "scanListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class scanDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnspectrumRef;
            
            private global::System.Data.DataColumn columnsourceFileRef;
            
            private global::System.Data.DataColumn columnexternalSpectrumID;
            
            private global::System.Data.DataColumn columninstrumentConfigurationRef;
            
            private global::System.Data.DataColumn columnscan_Id;
            
            private global::System.Data.DataColumn columnscanList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanDataTable() {
                this.TableName = "scan";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scanDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected scanDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spectrumRefColumn {
                get {
                    return this.columnspectrumRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourceFileRefColumn {
                get {
                    return this.columnsourceFileRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn externalSpectrumIDColumn {
                get {
                    return this.columnexternalSpectrumID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn instrumentConfigurationRefColumn {
                get {
                    return this.columninstrumentConfigurationRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scan_IdColumn {
                get {
                    return this.columnscan_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanList_IdColumn {
                get {
                    return this.columnscanList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanRow this[int index] {
                get {
                    return ((scanRow)(this.Rows[index]));
                }
            }
            
            public event scanRowChangeEventHandler scanRowChanging;
            
            public event scanRowChangeEventHandler scanRowChanged;
            
            public event scanRowChangeEventHandler scanRowDeleting;
            
            public event scanRowChangeEventHandler scanRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddscanRow(scanRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanRow AddscanRow(string spectrumRef, string sourceFileRef, string externalSpectrumID, string instrumentConfigurationRef, scanListRow parentscanListRowByscanList_scan) {
                scanRow rowscanRow = ((scanRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        spectrumRef,
                        sourceFileRef,
                        externalSpectrumID,
                        instrumentConfigurationRef,
                        null,
                        null};
                if ((parentscanListRowByscanList_scan != null)) {
                    columnValuesArray[5] = parentscanListRowByscanList_scan[1];
                }
                rowscanRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowscanRow);
                return rowscanRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                scanDataTable cln = ((scanDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new scanDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnspectrumRef = base.Columns["spectrumRef"];
                this.columnsourceFileRef = base.Columns["sourceFileRef"];
                this.columnexternalSpectrumID = base.Columns["externalSpectrumID"];
                this.columninstrumentConfigurationRef = base.Columns["instrumentConfigurationRef"];
                this.columnscan_Id = base.Columns["scan_Id"];
                this.columnscanList_Id = base.Columns["scanList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnspectrumRef = new global::System.Data.DataColumn("spectrumRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnspectrumRef);
                this.columnsourceFileRef = new global::System.Data.DataColumn("sourceFileRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnsourceFileRef);
                this.columnexternalSpectrumID = new global::System.Data.DataColumn("externalSpectrumID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnexternalSpectrumID);
                this.columninstrumentConfigurationRef = new global::System.Data.DataColumn("instrumentConfigurationRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columninstrumentConfigurationRef);
                this.columnscan_Id = new global::System.Data.DataColumn("scan_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscan_Id);
                this.columnscanList_Id = new global::System.Data.DataColumn("scanList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscanList_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnscan_Id}, true));
                this.columnspectrumRef.Namespace = "";
                this.columnsourceFileRef.Namespace = "";
                this.columnexternalSpectrumID.Namespace = "";
                this.columninstrumentConfigurationRef.Namespace = "";
                this.columnscan_Id.AutoIncrement = true;
                this.columnscan_Id.AllowDBNull = false;
                this.columnscan_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanRow NewscanRow() {
                return ((scanRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new scanRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(scanRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.scanRowChanged != null)) {
                    this.scanRowChanged(this, new scanRowChangeEvent(((scanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.scanRowChanging != null)) {
                    this.scanRowChanging(this, new scanRowChangeEvent(((scanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.scanRowDeleted != null)) {
                    this.scanRowDeleted(this, new scanRowChangeEvent(((scanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.scanRowDeleting != null)) {
                    this.scanRowDeleting(this, new scanRowChangeEvent(((scanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovescanRow(scanRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "scanDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class scanWindowListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columnscanWindowList_Id;
            
            private global::System.Data.DataColumn columnscan_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanWindowListDataTable() {
                this.TableName = "scanWindowList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scanWindowListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected scanWindowListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanWindowList_IdColumn {
                get {
                    return this.columnscanWindowList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scan_IdColumn {
                get {
                    return this.columnscan_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanWindowListRow this[int index] {
                get {
                    return ((scanWindowListRow)(this.Rows[index]));
                }
            }
            
            public event scanWindowListRowChangeEventHandler scanWindowListRowChanging;
            
            public event scanWindowListRowChangeEventHandler scanWindowListRowChanged;
            
            public event scanWindowListRowChangeEventHandler scanWindowListRowDeleting;
            
            public event scanWindowListRowChangeEventHandler scanWindowListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddscanWindowListRow(scanWindowListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanWindowListRow AddscanWindowListRow(int count, scanRow parentscanRowByscan_scanWindowList) {
                scanWindowListRow rowscanWindowListRow = ((scanWindowListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        null,
                        null};
                if ((parentscanRowByscan_scanWindowList != null)) {
                    columnValuesArray[2] = parentscanRowByscan_scanWindowList[4];
                }
                rowscanWindowListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowscanWindowListRow);
                return rowscanWindowListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                scanWindowListDataTable cln = ((scanWindowListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new scanWindowListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columnscanWindowList_Id = base.Columns["scanWindowList_Id"];
                this.columnscan_Id = base.Columns["scan_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columnscanWindowList_Id = new global::System.Data.DataColumn("scanWindowList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscanWindowList_Id);
                this.columnscan_Id = new global::System.Data.DataColumn("scan_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscan_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnscanWindowList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columnscanWindowList_Id.AutoIncrement = true;
                this.columnscanWindowList_Id.AllowDBNull = false;
                this.columnscanWindowList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanWindowListRow NewscanWindowListRow() {
                return ((scanWindowListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new scanWindowListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(scanWindowListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.scanWindowListRowChanged != null)) {
                    this.scanWindowListRowChanged(this, new scanWindowListRowChangeEvent(((scanWindowListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.scanWindowListRowChanging != null)) {
                    this.scanWindowListRowChanging(this, new scanWindowListRowChangeEvent(((scanWindowListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.scanWindowListRowDeleted != null)) {
                    this.scanWindowListRowDeleted(this, new scanWindowListRowChangeEvent(((scanWindowListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.scanWindowListRowDeleting != null)) {
                    this.scanWindowListRowDeleting(this, new scanWindowListRowChangeEvent(((scanWindowListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovescanWindowListRow(scanWindowListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "scanWindowListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class scanWindowDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnscanWindow_Id;
            
            private global::System.Data.DataColumn columnscanWindowList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanWindowDataTable() {
                this.TableName = "scanWindow";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scanWindowDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected scanWindowDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanWindow_IdColumn {
                get {
                    return this.columnscanWindow_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanWindowList_IdColumn {
                get {
                    return this.columnscanWindowList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanWindowRow this[int index] {
                get {
                    return ((scanWindowRow)(this.Rows[index]));
                }
            }
            
            public event scanWindowRowChangeEventHandler scanWindowRowChanging;
            
            public event scanWindowRowChangeEventHandler scanWindowRowChanged;
            
            public event scanWindowRowChangeEventHandler scanWindowRowDeleting;
            
            public event scanWindowRowChangeEventHandler scanWindowRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddscanWindowRow(scanWindowRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanWindowRow AddscanWindowRow(scanWindowListRow parentscanWindowListRowByscanWindowList_scanWindow) {
                scanWindowRow rowscanWindowRow = ((scanWindowRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentscanWindowListRowByscanWindowList_scanWindow != null)) {
                    columnValuesArray[1] = parentscanWindowListRowByscanWindowList_scanWindow[1];
                }
                rowscanWindowRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowscanWindowRow);
                return rowscanWindowRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                scanWindowDataTable cln = ((scanWindowDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new scanWindowDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnscanWindow_Id = base.Columns["scanWindow_Id"];
                this.columnscanWindowList_Id = base.Columns["scanWindowList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnscanWindow_Id = new global::System.Data.DataColumn("scanWindow_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscanWindow_Id);
                this.columnscanWindowList_Id = new global::System.Data.DataColumn("scanWindowList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnscanWindowList_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnscanWindow_Id}, true));
                this.columnscanWindow_Id.AutoIncrement = true;
                this.columnscanWindow_Id.AllowDBNull = false;
                this.columnscanWindow_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanWindowRow NewscanWindowRow() {
                return ((scanWindowRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new scanWindowRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(scanWindowRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.scanWindowRowChanged != null)) {
                    this.scanWindowRowChanged(this, new scanWindowRowChangeEvent(((scanWindowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.scanWindowRowChanging != null)) {
                    this.scanWindowRowChanging(this, new scanWindowRowChangeEvent(((scanWindowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.scanWindowRowDeleted != null)) {
                    this.scanWindowRowDeleted(this, new scanWindowRowChangeEvent(((scanWindowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.scanWindowRowDeleting != null)) {
                    this.scanWindowRowDeleting(this, new scanWindowRowChangeEvent(((scanWindowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovescanWindowRow(scanWindowRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "scanWindowDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class precursorListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columnprecursorList_Id;
            
            private global::System.Data.DataColumn columnspectrum_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public precursorListDataTable() {
                this.TableName = "precursorList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal precursorListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected precursorListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn precursorList_IdColumn {
                get {
                    return this.columnprecursorList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spectrum_IdColumn {
                get {
                    return this.columnspectrum_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public precursorListRow this[int index] {
                get {
                    return ((precursorListRow)(this.Rows[index]));
                }
            }
            
            public event precursorListRowChangeEventHandler precursorListRowChanging;
            
            public event precursorListRowChangeEventHandler precursorListRowChanged;
            
            public event precursorListRowChangeEventHandler precursorListRowDeleting;
            
            public event precursorListRowChangeEventHandler precursorListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddprecursorListRow(precursorListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public precursorListRow AddprecursorListRow(ulong count, spectrumRow parentspectrumRowByspectrum_precursorList) {
                precursorListRow rowprecursorListRow = ((precursorListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        null,
                        null};
                if ((parentspectrumRowByspectrum_precursorList != null)) {
                    columnValuesArray[2] = parentspectrumRowByspectrum_precursorList[6];
                }
                rowprecursorListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowprecursorListRow);
                return rowprecursorListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                precursorListDataTable cln = ((precursorListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new precursorListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columnprecursorList_Id = base.Columns["precursorList_Id"];
                this.columnspectrum_Id = base.Columns["spectrum_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columnprecursorList_Id = new global::System.Data.DataColumn("precursorList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnprecursorList_Id);
                this.columnspectrum_Id = new global::System.Data.DataColumn("spectrum_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnspectrum_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnprecursorList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columnprecursorList_Id.AutoIncrement = true;
                this.columnprecursorList_Id.AllowDBNull = false;
                this.columnprecursorList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public precursorListRow NewprecursorListRow() {
                return ((precursorListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new precursorListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(precursorListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.precursorListRowChanged != null)) {
                    this.precursorListRowChanged(this, new precursorListRowChangeEvent(((precursorListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.precursorListRowChanging != null)) {
                    this.precursorListRowChanging(this, new precursorListRowChangeEvent(((precursorListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.precursorListRowDeleted != null)) {
                    this.precursorListRowDeleted(this, new precursorListRowChangeEvent(((precursorListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.precursorListRowDeleting != null)) {
                    this.precursorListRowDeleting(this, new precursorListRowChangeEvent(((precursorListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveprecursorListRow(precursorListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "precursorListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class precursorDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnspectrumRef;
            
            private global::System.Data.DataColumn columnsourceFileRef;
            
            private global::System.Data.DataColumn columnexternalSpectrumID;
            
            private global::System.Data.DataColumn columnprecursor_Id;
            
            private global::System.Data.DataColumn columnprecursorList_Id;
            
            private global::System.Data.DataColumn columnchromatogram_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public precursorDataTable() {
                this.TableName = "precursor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal precursorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected precursorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spectrumRefColumn {
                get {
                    return this.columnspectrumRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourceFileRefColumn {
                get {
                    return this.columnsourceFileRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn externalSpectrumIDColumn {
                get {
                    return this.columnexternalSpectrumID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn precursor_IdColumn {
                get {
                    return this.columnprecursor_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn precursorList_IdColumn {
                get {
                    return this.columnprecursorList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chromatogram_IdColumn {
                get {
                    return this.columnchromatogram_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public precursorRow this[int index] {
                get {
                    return ((precursorRow)(this.Rows[index]));
                }
            }
            
            public event precursorRowChangeEventHandler precursorRowChanging;
            
            public event precursorRowChangeEventHandler precursorRowChanged;
            
            public event precursorRowChangeEventHandler precursorRowDeleting;
            
            public event precursorRowChangeEventHandler precursorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddprecursorRow(precursorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public precursorRow AddprecursorRow(string spectrumRef, string sourceFileRef, string externalSpectrumID, precursorListRow parentprecursorListRowByprecursorList_precursor, chromatogramRow parentchromatogramRowBychromatogram_precursor) {
                precursorRow rowprecursorRow = ((precursorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        spectrumRef,
                        sourceFileRef,
                        externalSpectrumID,
                        null,
                        null,
                        null};
                if ((parentprecursorListRowByprecursorList_precursor != null)) {
                    columnValuesArray[4] = parentprecursorListRowByprecursorList_precursor[1];
                }
                if ((parentchromatogramRowBychromatogram_precursor != null)) {
                    columnValuesArray[5] = parentchromatogramRowBychromatogram_precursor[4];
                }
                rowprecursorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowprecursorRow);
                return rowprecursorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                precursorDataTable cln = ((precursorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new precursorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnspectrumRef = base.Columns["spectrumRef"];
                this.columnsourceFileRef = base.Columns["sourceFileRef"];
                this.columnexternalSpectrumID = base.Columns["externalSpectrumID"];
                this.columnprecursor_Id = base.Columns["precursor_Id"];
                this.columnprecursorList_Id = base.Columns["precursorList_Id"];
                this.columnchromatogram_Id = base.Columns["chromatogram_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnspectrumRef = new global::System.Data.DataColumn("spectrumRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnspectrumRef);
                this.columnsourceFileRef = new global::System.Data.DataColumn("sourceFileRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnsourceFileRef);
                this.columnexternalSpectrumID = new global::System.Data.DataColumn("externalSpectrumID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnexternalSpectrumID);
                this.columnprecursor_Id = new global::System.Data.DataColumn("precursor_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnprecursor_Id);
                this.columnprecursorList_Id = new global::System.Data.DataColumn("precursorList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnprecursorList_Id);
                this.columnchromatogram_Id = new global::System.Data.DataColumn("chromatogram_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnchromatogram_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnprecursor_Id}, true));
                this.columnspectrumRef.Namespace = "";
                this.columnsourceFileRef.Namespace = "";
                this.columnexternalSpectrumID.Namespace = "";
                this.columnprecursor_Id.AutoIncrement = true;
                this.columnprecursor_Id.AllowDBNull = false;
                this.columnprecursor_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public precursorRow NewprecursorRow() {
                return ((precursorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new precursorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(precursorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.precursorRowChanged != null)) {
                    this.precursorRowChanged(this, new precursorRowChangeEvent(((precursorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.precursorRowChanging != null)) {
                    this.precursorRowChanging(this, new precursorRowChangeEvent(((precursorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.precursorRowDeleted != null)) {
                    this.precursorRowDeleted(this, new precursorRowChangeEvent(((precursorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.precursorRowDeleting != null)) {
                    this.precursorRowDeleting(this, new precursorRowChangeEvent(((precursorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveprecursorRow(precursorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "precursorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isolationWindowDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnisolationWindow_Id;
            
            private global::System.Data.DataColumn columnprecursor_Id;
            
            private global::System.Data.DataColumn columnproduct_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isolationWindowDataTable() {
                this.TableName = "isolationWindow";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isolationWindowDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isolationWindowDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isolationWindow_IdColumn {
                get {
                    return this.columnisolationWindow_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn precursor_IdColumn {
                get {
                    return this.columnprecursor_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn product_IdColumn {
                get {
                    return this.columnproduct_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isolationWindowRow this[int index] {
                get {
                    return ((isolationWindowRow)(this.Rows[index]));
                }
            }
            
            public event isolationWindowRowChangeEventHandler isolationWindowRowChanging;
            
            public event isolationWindowRowChangeEventHandler isolationWindowRowChanged;
            
            public event isolationWindowRowChangeEventHandler isolationWindowRowDeleting;
            
            public event isolationWindowRowChangeEventHandler isolationWindowRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddisolationWindowRow(isolationWindowRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isolationWindowRow AddisolationWindowRow(precursorRow parentprecursorRowByprecursor_isolationWindow, productRow parentproductRowByproduct_isolationWindow) {
                isolationWindowRow rowisolationWindowRow = ((isolationWindowRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null};
                if ((parentprecursorRowByprecursor_isolationWindow != null)) {
                    columnValuesArray[1] = parentprecursorRowByprecursor_isolationWindow[3];
                }
                if ((parentproductRowByproduct_isolationWindow != null)) {
                    columnValuesArray[2] = parentproductRowByproduct_isolationWindow[0];
                }
                rowisolationWindowRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisolationWindowRow);
                return rowisolationWindowRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isolationWindowDataTable cln = ((isolationWindowDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isolationWindowDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnisolationWindow_Id = base.Columns["isolationWindow_Id"];
                this.columnprecursor_Id = base.Columns["precursor_Id"];
                this.columnproduct_Id = base.Columns["product_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnisolationWindow_Id = new global::System.Data.DataColumn("isolationWindow_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnisolationWindow_Id);
                this.columnprecursor_Id = new global::System.Data.DataColumn("precursor_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnprecursor_Id);
                this.columnproduct_Id = new global::System.Data.DataColumn("product_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnproduct_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnisolationWindow_Id}, true));
                this.columnisolationWindow_Id.AutoIncrement = true;
                this.columnisolationWindow_Id.AllowDBNull = false;
                this.columnisolationWindow_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isolationWindowRow NewisolationWindowRow() {
                return ((isolationWindowRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isolationWindowRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isolationWindowRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isolationWindowRowChanged != null)) {
                    this.isolationWindowRowChanged(this, new isolationWindowRowChangeEvent(((isolationWindowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isolationWindowRowChanging != null)) {
                    this.isolationWindowRowChanging(this, new isolationWindowRowChangeEvent(((isolationWindowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isolationWindowRowDeleted != null)) {
                    this.isolationWindowRowDeleted(this, new isolationWindowRowChangeEvent(((isolationWindowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isolationWindowRowDeleting != null)) {
                    this.isolationWindowRowDeleting(this, new isolationWindowRowChangeEvent(((isolationWindowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveisolationWindowRow(isolationWindowRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isolationWindowDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class selectedIonListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columnselectedIonList_Id;
            
            private global::System.Data.DataColumn columnprecursor_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public selectedIonListDataTable() {
                this.TableName = "selectedIonList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal selectedIonListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected selectedIonListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn selectedIonList_IdColumn {
                get {
                    return this.columnselectedIonList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn precursor_IdColumn {
                get {
                    return this.columnprecursor_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public selectedIonListRow this[int index] {
                get {
                    return ((selectedIonListRow)(this.Rows[index]));
                }
            }
            
            public event selectedIonListRowChangeEventHandler selectedIonListRowChanging;
            
            public event selectedIonListRowChangeEventHandler selectedIonListRowChanged;
            
            public event selectedIonListRowChangeEventHandler selectedIonListRowDeleting;
            
            public event selectedIonListRowChangeEventHandler selectedIonListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddselectedIonListRow(selectedIonListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public selectedIonListRow AddselectedIonListRow(ulong count, precursorRow parentprecursorRowByprecursor_selectedIonList) {
                selectedIonListRow rowselectedIonListRow = ((selectedIonListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        null,
                        null};
                if ((parentprecursorRowByprecursor_selectedIonList != null)) {
                    columnValuesArray[2] = parentprecursorRowByprecursor_selectedIonList[3];
                }
                rowselectedIonListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowselectedIonListRow);
                return rowselectedIonListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                selectedIonListDataTable cln = ((selectedIonListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new selectedIonListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columnselectedIonList_Id = base.Columns["selectedIonList_Id"];
                this.columnprecursor_Id = base.Columns["precursor_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columnselectedIonList_Id = new global::System.Data.DataColumn("selectedIonList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnselectedIonList_Id);
                this.columnprecursor_Id = new global::System.Data.DataColumn("precursor_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnprecursor_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnselectedIonList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columnselectedIonList_Id.AutoIncrement = true;
                this.columnselectedIonList_Id.AllowDBNull = false;
                this.columnselectedIonList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public selectedIonListRow NewselectedIonListRow() {
                return ((selectedIonListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new selectedIonListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(selectedIonListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.selectedIonListRowChanged != null)) {
                    this.selectedIonListRowChanged(this, new selectedIonListRowChangeEvent(((selectedIonListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.selectedIonListRowChanging != null)) {
                    this.selectedIonListRowChanging(this, new selectedIonListRowChangeEvent(((selectedIonListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.selectedIonListRowDeleted != null)) {
                    this.selectedIonListRowDeleted(this, new selectedIonListRowChangeEvent(((selectedIonListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.selectedIonListRowDeleting != null)) {
                    this.selectedIonListRowDeleting(this, new selectedIonListRowChangeEvent(((selectedIonListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveselectedIonListRow(selectedIonListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "selectedIonListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class selectedIonDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnselectedIon_Id;
            
            private global::System.Data.DataColumn columnselectedIonList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public selectedIonDataTable() {
                this.TableName = "selectedIon";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal selectedIonDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected selectedIonDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn selectedIon_IdColumn {
                get {
                    return this.columnselectedIon_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn selectedIonList_IdColumn {
                get {
                    return this.columnselectedIonList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public selectedIonRow this[int index] {
                get {
                    return ((selectedIonRow)(this.Rows[index]));
                }
            }
            
            public event selectedIonRowChangeEventHandler selectedIonRowChanging;
            
            public event selectedIonRowChangeEventHandler selectedIonRowChanged;
            
            public event selectedIonRowChangeEventHandler selectedIonRowDeleting;
            
            public event selectedIonRowChangeEventHandler selectedIonRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddselectedIonRow(selectedIonRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public selectedIonRow AddselectedIonRow(selectedIonListRow parentselectedIonListRowByselectedIonList_selectedIon) {
                selectedIonRow rowselectedIonRow = ((selectedIonRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentselectedIonListRowByselectedIonList_selectedIon != null)) {
                    columnValuesArray[1] = parentselectedIonListRowByselectedIonList_selectedIon[1];
                }
                rowselectedIonRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowselectedIonRow);
                return rowselectedIonRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                selectedIonDataTable cln = ((selectedIonDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new selectedIonDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnselectedIon_Id = base.Columns["selectedIon_Id"];
                this.columnselectedIonList_Id = base.Columns["selectedIonList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnselectedIon_Id = new global::System.Data.DataColumn("selectedIon_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnselectedIon_Id);
                this.columnselectedIonList_Id = new global::System.Data.DataColumn("selectedIonList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnselectedIonList_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnselectedIon_Id}, true));
                this.columnselectedIon_Id.AutoIncrement = true;
                this.columnselectedIon_Id.AllowDBNull = false;
                this.columnselectedIon_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public selectedIonRow NewselectedIonRow() {
                return ((selectedIonRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new selectedIonRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(selectedIonRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.selectedIonRowChanged != null)) {
                    this.selectedIonRowChanged(this, new selectedIonRowChangeEvent(((selectedIonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.selectedIonRowChanging != null)) {
                    this.selectedIonRowChanging(this, new selectedIonRowChangeEvent(((selectedIonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.selectedIonRowDeleted != null)) {
                    this.selectedIonRowDeleted(this, new selectedIonRowChangeEvent(((selectedIonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.selectedIonRowDeleting != null)) {
                    this.selectedIonRowDeleting(this, new selectedIonRowChangeEvent(((selectedIonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveselectedIonRow(selectedIonRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "selectedIonDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class activationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnactivation_Id;
            
            private global::System.Data.DataColumn columnprecursor_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public activationDataTable() {
                this.TableName = "activation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal activationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected activationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn activation_IdColumn {
                get {
                    return this.columnactivation_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn precursor_IdColumn {
                get {
                    return this.columnprecursor_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public activationRow this[int index] {
                get {
                    return ((activationRow)(this.Rows[index]));
                }
            }
            
            public event activationRowChangeEventHandler activationRowChanging;
            
            public event activationRowChangeEventHandler activationRowChanged;
            
            public event activationRowChangeEventHandler activationRowDeleting;
            
            public event activationRowChangeEventHandler activationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddactivationRow(activationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public activationRow AddactivationRow(precursorRow parentprecursorRowByprecursor_activation) {
                activationRow rowactivationRow = ((activationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentprecursorRowByprecursor_activation != null)) {
                    columnValuesArray[1] = parentprecursorRowByprecursor_activation[3];
                }
                rowactivationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowactivationRow);
                return rowactivationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                activationDataTable cln = ((activationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new activationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnactivation_Id = base.Columns["activation_Id"];
                this.columnprecursor_Id = base.Columns["precursor_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnactivation_Id = new global::System.Data.DataColumn("activation_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnactivation_Id);
                this.columnprecursor_Id = new global::System.Data.DataColumn("precursor_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnprecursor_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnactivation_Id}, true));
                this.columnactivation_Id.AutoIncrement = true;
                this.columnactivation_Id.AllowDBNull = false;
                this.columnactivation_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public activationRow NewactivationRow() {
                return ((activationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new activationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(activationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.activationRowChanged != null)) {
                    this.activationRowChanged(this, new activationRowChangeEvent(((activationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.activationRowChanging != null)) {
                    this.activationRowChanging(this, new activationRowChangeEvent(((activationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.activationRowDeleted != null)) {
                    this.activationRowDeleted(this, new activationRowChangeEvent(((activationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.activationRowDeleting != null)) {
                    this.activationRowDeleting(this, new activationRowChangeEvent(((activationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveactivationRow(activationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "activationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class productListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columnproductList_Id;
            
            private global::System.Data.DataColumn columnspectrum_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productListDataTable() {
                this.TableName = "productList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal productListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected productListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn productList_IdColumn {
                get {
                    return this.columnproductList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spectrum_IdColumn {
                get {
                    return this.columnspectrum_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productListRow this[int index] {
                get {
                    return ((productListRow)(this.Rows[index]));
                }
            }
            
            public event productListRowChangeEventHandler productListRowChanging;
            
            public event productListRowChangeEventHandler productListRowChanged;
            
            public event productListRowChangeEventHandler productListRowDeleting;
            
            public event productListRowChangeEventHandler productListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddproductListRow(productListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productListRow AddproductListRow(ulong count, spectrumRow parentspectrumRowByspectrum_productList) {
                productListRow rowproductListRow = ((productListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        null,
                        null};
                if ((parentspectrumRowByspectrum_productList != null)) {
                    columnValuesArray[2] = parentspectrumRowByspectrum_productList[6];
                }
                rowproductListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowproductListRow);
                return rowproductListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                productListDataTable cln = ((productListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new productListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columnproductList_Id = base.Columns["productList_Id"];
                this.columnspectrum_Id = base.Columns["spectrum_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columnproductList_Id = new global::System.Data.DataColumn("productList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnproductList_Id);
                this.columnspectrum_Id = new global::System.Data.DataColumn("spectrum_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnspectrum_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnproductList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columnproductList_Id.AutoIncrement = true;
                this.columnproductList_Id.AllowDBNull = false;
                this.columnproductList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productListRow NewproductListRow() {
                return ((productListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new productListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(productListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.productListRowChanged != null)) {
                    this.productListRowChanged(this, new productListRowChangeEvent(((productListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.productListRowChanging != null)) {
                    this.productListRowChanging(this, new productListRowChangeEvent(((productListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.productListRowDeleted != null)) {
                    this.productListRowDeleted(this, new productListRowChangeEvent(((productListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.productListRowDeleting != null)) {
                    this.productListRowDeleting(this, new productListRowChangeEvent(((productListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveproductListRow(productListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "productListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class productDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnproduct_Id;
            
            private global::System.Data.DataColumn columnproductList_Id;
            
            private global::System.Data.DataColumn columnchromatogram_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productDataTable() {
                this.TableName = "product";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal productDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected productDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn product_IdColumn {
                get {
                    return this.columnproduct_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn productList_IdColumn {
                get {
                    return this.columnproductList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chromatogram_IdColumn {
                get {
                    return this.columnchromatogram_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRow this[int index] {
                get {
                    return ((productRow)(this.Rows[index]));
                }
            }
            
            public event productRowChangeEventHandler productRowChanging;
            
            public event productRowChangeEventHandler productRowChanged;
            
            public event productRowChangeEventHandler productRowDeleting;
            
            public event productRowChangeEventHandler productRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddproductRow(productRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRow AddproductRow(productListRow parentproductListRowByproductList_product, chromatogramRow parentchromatogramRowBychromatogram_product) {
                productRow rowproductRow = ((productRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null};
                if ((parentproductListRowByproductList_product != null)) {
                    columnValuesArray[1] = parentproductListRowByproductList_product[1];
                }
                if ((parentchromatogramRowBychromatogram_product != null)) {
                    columnValuesArray[2] = parentchromatogramRowBychromatogram_product[4];
                }
                rowproductRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowproductRow);
                return rowproductRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                productDataTable cln = ((productDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new productDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnproduct_Id = base.Columns["product_Id"];
                this.columnproductList_Id = base.Columns["productList_Id"];
                this.columnchromatogram_Id = base.Columns["chromatogram_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnproduct_Id = new global::System.Data.DataColumn("product_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnproduct_Id);
                this.columnproductList_Id = new global::System.Data.DataColumn("productList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnproductList_Id);
                this.columnchromatogram_Id = new global::System.Data.DataColumn("chromatogram_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnchromatogram_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnproduct_Id}, true));
                this.columnproduct_Id.AutoIncrement = true;
                this.columnproduct_Id.AllowDBNull = false;
                this.columnproduct_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRow NewproductRow() {
                return ((productRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new productRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(productRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.productRowChanged != null)) {
                    this.productRowChanged(this, new productRowChangeEvent(((productRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.productRowChanging != null)) {
                    this.productRowChanging(this, new productRowChangeEvent(((productRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.productRowDeleted != null)) {
                    this.productRowDeleted(this, new productRowChangeEvent(((productRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.productRowDeleting != null)) {
                    this.productRowDeleting(this, new productRowChangeEvent(((productRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveproductRow(productRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "productDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class binaryDataArrayListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columnbinaryDataArrayList_Id;
            
            private global::System.Data.DataColumn columnspectrum_Id;
            
            private global::System.Data.DataColumn columnchromatogram_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public binaryDataArrayListDataTable() {
                this.TableName = "binaryDataArrayList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal binaryDataArrayListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected binaryDataArrayListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn binaryDataArrayList_IdColumn {
                get {
                    return this.columnbinaryDataArrayList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spectrum_IdColumn {
                get {
                    return this.columnspectrum_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chromatogram_IdColumn {
                get {
                    return this.columnchromatogram_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public binaryDataArrayListRow this[int index] {
                get {
                    return ((binaryDataArrayListRow)(this.Rows[index]));
                }
            }
            
            public event binaryDataArrayListRowChangeEventHandler binaryDataArrayListRowChanging;
            
            public event binaryDataArrayListRowChangeEventHandler binaryDataArrayListRowChanged;
            
            public event binaryDataArrayListRowChangeEventHandler binaryDataArrayListRowDeleting;
            
            public event binaryDataArrayListRowChangeEventHandler binaryDataArrayListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddbinaryDataArrayListRow(binaryDataArrayListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public binaryDataArrayListRow AddbinaryDataArrayListRow(ulong count, spectrumRow parentspectrumRowByspectrum_binaryDataArrayList, chromatogramRow parentchromatogramRowBychromatogram_binaryDataArrayList) {
                binaryDataArrayListRow rowbinaryDataArrayListRow = ((binaryDataArrayListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        null,
                        null,
                        null};
                if ((parentspectrumRowByspectrum_binaryDataArrayList != null)) {
                    columnValuesArray[2] = parentspectrumRowByspectrum_binaryDataArrayList[6];
                }
                if ((parentchromatogramRowBychromatogram_binaryDataArrayList != null)) {
                    columnValuesArray[3] = parentchromatogramRowBychromatogram_binaryDataArrayList[4];
                }
                rowbinaryDataArrayListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowbinaryDataArrayListRow);
                return rowbinaryDataArrayListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                binaryDataArrayListDataTable cln = ((binaryDataArrayListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new binaryDataArrayListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columnbinaryDataArrayList_Id = base.Columns["binaryDataArrayList_Id"];
                this.columnspectrum_Id = base.Columns["spectrum_Id"];
                this.columnchromatogram_Id = base.Columns["chromatogram_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columnbinaryDataArrayList_Id = new global::System.Data.DataColumn("binaryDataArrayList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnbinaryDataArrayList_Id);
                this.columnspectrum_Id = new global::System.Data.DataColumn("spectrum_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnspectrum_Id);
                this.columnchromatogram_Id = new global::System.Data.DataColumn("chromatogram_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnchromatogram_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnbinaryDataArrayList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columnbinaryDataArrayList_Id.AutoIncrement = true;
                this.columnbinaryDataArrayList_Id.AllowDBNull = false;
                this.columnbinaryDataArrayList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public binaryDataArrayListRow NewbinaryDataArrayListRow() {
                return ((binaryDataArrayListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new binaryDataArrayListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(binaryDataArrayListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.binaryDataArrayListRowChanged != null)) {
                    this.binaryDataArrayListRowChanged(this, new binaryDataArrayListRowChangeEvent(((binaryDataArrayListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.binaryDataArrayListRowChanging != null)) {
                    this.binaryDataArrayListRowChanging(this, new binaryDataArrayListRowChangeEvent(((binaryDataArrayListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.binaryDataArrayListRowDeleted != null)) {
                    this.binaryDataArrayListRowDeleted(this, new binaryDataArrayListRowChangeEvent(((binaryDataArrayListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.binaryDataArrayListRowDeleting != null)) {
                    this.binaryDataArrayListRowDeleting(this, new binaryDataArrayListRowChangeEvent(((binaryDataArrayListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovebinaryDataArrayListRow(binaryDataArrayListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "binaryDataArrayListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class binaryDataArrayDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnarrayLength;
            
            private global::System.Data.DataColumn columndataProcessingRef;
            
            private global::System.Data.DataColumn columnencodedLength;
            
            private global::System.Data.DataColumn columnbinary;
            
            private global::System.Data.DataColumn columnbinaryDataArray_Id;
            
            private global::System.Data.DataColumn columnbinaryDataArrayList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public binaryDataArrayDataTable() {
                this.TableName = "binaryDataArray";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal binaryDataArrayDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected binaryDataArrayDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn arrayLengthColumn {
                get {
                    return this.columnarrayLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataProcessingRefColumn {
                get {
                    return this.columndataProcessingRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn encodedLengthColumn {
                get {
                    return this.columnencodedLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn binaryColumn {
                get {
                    return this.columnbinary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn binaryDataArray_IdColumn {
                get {
                    return this.columnbinaryDataArray_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn binaryDataArrayList_IdColumn {
                get {
                    return this.columnbinaryDataArrayList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public binaryDataArrayRow this[int index] {
                get {
                    return ((binaryDataArrayRow)(this.Rows[index]));
                }
            }
            
            public event binaryDataArrayRowChangeEventHandler binaryDataArrayRowChanging;
            
            public event binaryDataArrayRowChangeEventHandler binaryDataArrayRowChanged;
            
            public event binaryDataArrayRowChangeEventHandler binaryDataArrayRowDeleting;
            
            public event binaryDataArrayRowChangeEventHandler binaryDataArrayRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddbinaryDataArrayRow(binaryDataArrayRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public binaryDataArrayRow AddbinaryDataArrayRow(ulong arrayLength, string dataProcessingRef, ulong encodedLength, byte[] binary, binaryDataArrayListRow parentbinaryDataArrayListRowBybinaryDataArrayList_binaryDataArray) {
                binaryDataArrayRow rowbinaryDataArrayRow = ((binaryDataArrayRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        arrayLength,
                        dataProcessingRef,
                        encodedLength,
                        binary,
                        null,
                        null};
                if ((parentbinaryDataArrayListRowBybinaryDataArrayList_binaryDataArray != null)) {
                    columnValuesArray[5] = parentbinaryDataArrayListRowBybinaryDataArrayList_binaryDataArray[1];
                }
                rowbinaryDataArrayRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowbinaryDataArrayRow);
                return rowbinaryDataArrayRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                binaryDataArrayDataTable cln = ((binaryDataArrayDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new binaryDataArrayDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnarrayLength = base.Columns["arrayLength"];
                this.columndataProcessingRef = base.Columns["dataProcessingRef"];
                this.columnencodedLength = base.Columns["encodedLength"];
                this.columnbinary = base.Columns["binary"];
                this.columnbinaryDataArray_Id = base.Columns["binaryDataArray_Id"];
                this.columnbinaryDataArrayList_Id = base.Columns["binaryDataArrayList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnarrayLength = new global::System.Data.DataColumn("arrayLength", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnarrayLength);
                this.columndataProcessingRef = new global::System.Data.DataColumn("dataProcessingRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndataProcessingRef);
                this.columnencodedLength = new global::System.Data.DataColumn("encodedLength", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnencodedLength);
                this.columnbinary = new global::System.Data.DataColumn("binary", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbinary);
                this.columnbinaryDataArray_Id = new global::System.Data.DataColumn("binaryDataArray_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnbinaryDataArray_Id);
                this.columnbinaryDataArrayList_Id = new global::System.Data.DataColumn("binaryDataArrayList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnbinaryDataArrayList_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnbinaryDataArray_Id}, true));
                this.columnarrayLength.Namespace = "";
                this.columndataProcessingRef.Namespace = "";
                this.columnencodedLength.AllowDBNull = false;
                this.columnencodedLength.Namespace = "";
                this.columnbinary.AllowDBNull = false;
                this.columnbinaryDataArray_Id.AutoIncrement = true;
                this.columnbinaryDataArray_Id.AllowDBNull = false;
                this.columnbinaryDataArray_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public binaryDataArrayRow NewbinaryDataArrayRow() {
                return ((binaryDataArrayRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new binaryDataArrayRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(binaryDataArrayRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.binaryDataArrayRowChanged != null)) {
                    this.binaryDataArrayRowChanged(this, new binaryDataArrayRowChangeEvent(((binaryDataArrayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.binaryDataArrayRowChanging != null)) {
                    this.binaryDataArrayRowChanging(this, new binaryDataArrayRowChangeEvent(((binaryDataArrayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.binaryDataArrayRowDeleted != null)) {
                    this.binaryDataArrayRowDeleted(this, new binaryDataArrayRowChangeEvent(((binaryDataArrayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.binaryDataArrayRowDeleting != null)) {
                    this.binaryDataArrayRowDeleting(this, new binaryDataArrayRowChangeEvent(((binaryDataArrayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovebinaryDataArrayRow(binaryDataArrayRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "binaryDataArrayDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class chromatogramListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columndefaultDataProcessingRef;
            
            private global::System.Data.DataColumn columnchromatogramList_Id;
            
            private global::System.Data.DataColumn columnrun_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramListDataTable() {
                this.TableName = "chromatogramList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal chromatogramListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected chromatogramListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn defaultDataProcessingRefColumn {
                get {
                    return this.columndefaultDataProcessingRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chromatogramList_IdColumn {
                get {
                    return this.columnchromatogramList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn run_IdColumn {
                get {
                    return this.columnrun_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramListRow this[int index] {
                get {
                    return ((chromatogramListRow)(this.Rows[index]));
                }
            }
            
            public event chromatogramListRowChangeEventHandler chromatogramListRowChanging;
            
            public event chromatogramListRowChangeEventHandler chromatogramListRowChanged;
            
            public event chromatogramListRowChangeEventHandler chromatogramListRowDeleting;
            
            public event chromatogramListRowChangeEventHandler chromatogramListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddchromatogramListRow(chromatogramListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramListRow AddchromatogramListRow(ulong count, string defaultDataProcessingRef, runRow parentrunRowByrun_chromatogramList) {
                chromatogramListRow rowchromatogramListRow = ((chromatogramListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        defaultDataProcessingRef,
                        null,
                        null};
                if ((parentrunRowByrun_chromatogramList != null)) {
                    columnValuesArray[3] = parentrunRowByrun_chromatogramList[5];
                }
                rowchromatogramListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowchromatogramListRow);
                return rowchromatogramListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                chromatogramListDataTable cln = ((chromatogramListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new chromatogramListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columndefaultDataProcessingRef = base.Columns["defaultDataProcessingRef"];
                this.columnchromatogramList_Id = base.Columns["chromatogramList_Id"];
                this.columnrun_Id = base.Columns["run_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columndefaultDataProcessingRef = new global::System.Data.DataColumn("defaultDataProcessingRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndefaultDataProcessingRef);
                this.columnchromatogramList_Id = new global::System.Data.DataColumn("chromatogramList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnchromatogramList_Id);
                this.columnrun_Id = new global::System.Data.DataColumn("run_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrun_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnchromatogramList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columndefaultDataProcessingRef.AllowDBNull = false;
                this.columndefaultDataProcessingRef.Namespace = "";
                this.columnchromatogramList_Id.AutoIncrement = true;
                this.columnchromatogramList_Id.AllowDBNull = false;
                this.columnchromatogramList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramListRow NewchromatogramListRow() {
                return ((chromatogramListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new chromatogramListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(chromatogramListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.chromatogramListRowChanged != null)) {
                    this.chromatogramListRowChanged(this, new chromatogramListRowChangeEvent(((chromatogramListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.chromatogramListRowChanging != null)) {
                    this.chromatogramListRowChanging(this, new chromatogramListRowChangeEvent(((chromatogramListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.chromatogramListRowDeleted != null)) {
                    this.chromatogramListRowDeleted(this, new chromatogramListRowChangeEvent(((chromatogramListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.chromatogramListRowDeleting != null)) {
                    this.chromatogramListRowDeleting(this, new chromatogramListRowChangeEvent(((chromatogramListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovechromatogramListRow(chromatogramListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "chromatogramListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class chromatogramDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnindex;
            
            private global::System.Data.DataColumn columndefaultArrayLength;
            
            private global::System.Data.DataColumn columndataProcessingRef;
            
            private global::System.Data.DataColumn columnchromatogram_Id;
            
            private global::System.Data.DataColumn columnchromatogramList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramDataTable() {
                this.TableName = "chromatogram";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal chromatogramDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected chromatogramDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn indexColumn {
                get {
                    return this.columnindex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn defaultArrayLengthColumn {
                get {
                    return this.columndefaultArrayLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataProcessingRefColumn {
                get {
                    return this.columndataProcessingRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chromatogram_IdColumn {
                get {
                    return this.columnchromatogram_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chromatogramList_IdColumn {
                get {
                    return this.columnchromatogramList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramRow this[int index] {
                get {
                    return ((chromatogramRow)(this.Rows[index]));
                }
            }
            
            public event chromatogramRowChangeEventHandler chromatogramRowChanging;
            
            public event chromatogramRowChangeEventHandler chromatogramRowChanged;
            
            public event chromatogramRowChangeEventHandler chromatogramRowDeleting;
            
            public event chromatogramRowChangeEventHandler chromatogramRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddchromatogramRow(chromatogramRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramRow AddchromatogramRow(string id, ulong index, int defaultArrayLength, string dataProcessingRef, chromatogramListRow parentchromatogramListRowBychromatogramList_chromatogram) {
                chromatogramRow rowchromatogramRow = ((chromatogramRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        index,
                        defaultArrayLength,
                        dataProcessingRef,
                        null,
                        null};
                if ((parentchromatogramListRowBychromatogramList_chromatogram != null)) {
                    columnValuesArray[5] = parentchromatogramListRowBychromatogramList_chromatogram[2];
                }
                rowchromatogramRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowchromatogramRow);
                return rowchromatogramRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                chromatogramDataTable cln = ((chromatogramDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new chromatogramDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnindex = base.Columns["index"];
                this.columndefaultArrayLength = base.Columns["defaultArrayLength"];
                this.columndataProcessingRef = base.Columns["dataProcessingRef"];
                this.columnchromatogram_Id = base.Columns["chromatogram_Id"];
                this.columnchromatogramList_Id = base.Columns["chromatogramList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnindex = new global::System.Data.DataColumn("index", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnindex);
                this.columndefaultArrayLength = new global::System.Data.DataColumn("defaultArrayLength", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndefaultArrayLength);
                this.columndataProcessingRef = new global::System.Data.DataColumn("dataProcessingRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndataProcessingRef);
                this.columnchromatogram_Id = new global::System.Data.DataColumn("chromatogram_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnchromatogram_Id);
                this.columnchromatogramList_Id = new global::System.Data.DataColumn("chromatogramList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnchromatogramList_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnchromatogram_Id}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnindex.AllowDBNull = false;
                this.columnindex.Namespace = "";
                this.columndefaultArrayLength.AllowDBNull = false;
                this.columndefaultArrayLength.Namespace = "";
                this.columndataProcessingRef.Namespace = "";
                this.columnchromatogram_Id.AutoIncrement = true;
                this.columnchromatogram_Id.AllowDBNull = false;
                this.columnchromatogram_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramRow NewchromatogramRow() {
                return ((chromatogramRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new chromatogramRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(chromatogramRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.chromatogramRowChanged != null)) {
                    this.chromatogramRowChanged(this, new chromatogramRowChangeEvent(((chromatogramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.chromatogramRowChanging != null)) {
                    this.chromatogramRowChanging(this, new chromatogramRowChangeEvent(((chromatogramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.chromatogramRowDeleted != null)) {
                    this.chromatogramRowDeleted(this, new chromatogramRowChangeEvent(((chromatogramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.chromatogramRowDeleting != null)) {
                    this.chromatogramRowDeleting(this, new chromatogramRowChangeEvent(((chromatogramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovechromatogramRow(chromatogramRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "chromatogramDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class indexListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columnindexList_Id;
            
            private global::System.Data.DataColumn columnindexedmzML_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexListDataTable() {
                this.TableName = "indexList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal indexListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected indexListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn indexList_IdColumn {
                get {
                    return this.columnindexList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn indexedmzML_IdColumn {
                get {
                    return this.columnindexedmzML_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexListRow this[int index] {
                get {
                    return ((indexListRow)(this.Rows[index]));
                }
            }
            
            public event indexListRowChangeEventHandler indexListRowChanging;
            
            public event indexListRowChangeEventHandler indexListRowChanged;
            
            public event indexListRowChangeEventHandler indexListRowDeleting;
            
            public event indexListRowChangeEventHandler indexListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddindexListRow(indexListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexListRow AddindexListRow(ulong count, indexedmzMLRow parentindexedmzMLRowByindexedmzML_indexList) {
                indexListRow rowindexListRow = ((indexListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        null,
                        null};
                if ((parentindexedmzMLRowByindexedmzML_indexList != null)) {
                    columnValuesArray[2] = parentindexedmzMLRowByindexedmzML_indexList[2];
                }
                rowindexListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowindexListRow);
                return rowindexListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                indexListDataTable cln = ((indexListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new indexListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columnindexList_Id = base.Columns["indexList_Id"];
                this.columnindexedmzML_Id = base.Columns["indexedmzML_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columnindexList_Id = new global::System.Data.DataColumn("indexList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnindexList_Id);
                this.columnindexedmzML_Id = new global::System.Data.DataColumn("indexedmzML_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnindexedmzML_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnindexList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columnindexList_Id.AutoIncrement = true;
                this.columnindexList_Id.AllowDBNull = false;
                this.columnindexList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexListRow NewindexListRow() {
                return ((indexListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new indexListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(indexListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.indexListRowChanged != null)) {
                    this.indexListRowChanged(this, new indexListRowChangeEvent(((indexListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.indexListRowChanging != null)) {
                    this.indexListRowChanging(this, new indexListRowChangeEvent(((indexListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.indexListRowDeleted != null)) {
                    this.indexListRowDeleted(this, new indexListRowChangeEvent(((indexListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.indexListRowDeleting != null)) {
                    this.indexListRowDeleting(this, new indexListRowChangeEvent(((indexListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveindexListRow(indexListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "indexListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class indexDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnindex_Id;
            
            private global::System.Data.DataColumn columnindexList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexDataTable() {
                this.TableName = "index";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal indexDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected indexDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn index_IdColumn {
                get {
                    return this.columnindex_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn indexList_IdColumn {
                get {
                    return this.columnindexList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexRow this[int index] {
                get {
                    return ((indexRow)(this.Rows[index]));
                }
            }
            
            public event indexRowChangeEventHandler indexRowChanging;
            
            public event indexRowChangeEventHandler indexRowChanged;
            
            public event indexRowChangeEventHandler indexRowDeleting;
            
            public event indexRowChangeEventHandler indexRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddindexRow(indexRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexRow AddindexRow(string name, indexListRow parentindexListRowByindexList_index) {
                indexRow rowindexRow = ((indexRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name,
                        null,
                        null};
                if ((parentindexListRowByindexList_index != null)) {
                    columnValuesArray[2] = parentindexListRowByindexList_index[1];
                }
                rowindexRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowindexRow);
                return rowindexRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                indexDataTable cln = ((indexDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new indexDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columnindex_Id = base.Columns["index_Id"];
                this.columnindexList_Id = base.Columns["indexList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columnindex_Id = new global::System.Data.DataColumn("index_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnindex_Id);
                this.columnindexList_Id = new global::System.Data.DataColumn("indexList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnindexList_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnindex_Id}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columnindex_Id.AutoIncrement = true;
                this.columnindex_Id.AllowDBNull = false;
                this.columnindex_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexRow NewindexRow() {
                return ((indexRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new indexRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(indexRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.indexRowChanged != null)) {
                    this.indexRowChanged(this, new indexRowChangeEvent(((indexRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.indexRowChanging != null)) {
                    this.indexRowChanging(this, new indexRowChangeEvent(((indexRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.indexRowDeleted != null)) {
                    this.indexRowDeleted(this, new indexRowChangeEvent(((indexRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.indexRowDeleting != null)) {
                    this.indexRowDeleting(this, new indexRowChangeEvent(((indexRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveindexRow(indexRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "indexDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class offsetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnidRef;
            
            private global::System.Data.DataColumn columnspotID;
            
            private global::System.Data.DataColumn columnscanTime;
            
            private global::System.Data.DataColumn columnoffset_text;
            
            private global::System.Data.DataColumn columnindex_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public offsetDataTable() {
                this.TableName = "offset";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal offsetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected offsetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idRefColumn {
                get {
                    return this.columnidRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spotIDColumn {
                get {
                    return this.columnspotID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanTimeColumn {
                get {
                    return this.columnscanTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn offset_textColumn {
                get {
                    return this.columnoffset_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn index_IdColumn {
                get {
                    return this.columnindex_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public offsetRow this[int index] {
                get {
                    return ((offsetRow)(this.Rows[index]));
                }
            }
            
            public event offsetRowChangeEventHandler offsetRowChanging;
            
            public event offsetRowChangeEventHandler offsetRowChanged;
            
            public event offsetRowChangeEventHandler offsetRowDeleting;
            
            public event offsetRowChangeEventHandler offsetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddoffsetRow(offsetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public offsetRow AddoffsetRow(string idRef, string spotID, double scanTime, long offset_text, indexRow parentindexRowByindex_offset) {
                offsetRow rowoffsetRow = ((offsetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        idRef,
                        spotID,
                        scanTime,
                        offset_text,
                        null};
                if ((parentindexRowByindex_offset != null)) {
                    columnValuesArray[4] = parentindexRowByindex_offset[1];
                }
                rowoffsetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowoffsetRow);
                return rowoffsetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                offsetDataTable cln = ((offsetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new offsetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidRef = base.Columns["idRef"];
                this.columnspotID = base.Columns["spotID"];
                this.columnscanTime = base.Columns["scanTime"];
                this.columnoffset_text = base.Columns["offset_text"];
                this.columnindex_Id = base.Columns["index_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidRef = new global::System.Data.DataColumn("idRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnidRef);
                this.columnspotID = new global::System.Data.DataColumn("spotID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnspotID);
                this.columnscanTime = new global::System.Data.DataColumn("scanTime", typeof(double), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnscanTime);
                this.columnoffset_text = new global::System.Data.DataColumn("offset_text", typeof(long), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnoffset_text);
                this.columnindex_Id = new global::System.Data.DataColumn("index_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnindex_Id);
                this.columnidRef.AllowDBNull = false;
                this.columnidRef.Namespace = "";
                this.columnspotID.Namespace = "";
                this.columnscanTime.Namespace = "";
                this.columnoffset_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public offsetRow NewoffsetRow() {
                return ((offsetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new offsetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(offsetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.offsetRowChanged != null)) {
                    this.offsetRowChanged(this, new offsetRowChangeEvent(((offsetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.offsetRowChanging != null)) {
                    this.offsetRowChanging(this, new offsetRowChangeEvent(((offsetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.offsetRowDeleted != null)) {
                    this.offsetRowDeleted(this, new offsetRowChangeEvent(((offsetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.offsetRowDeleting != null)) {
                    this.offsetRowDeleting(this, new offsetRowChangeEvent(((offsetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveoffsetRow(offsetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "offsetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class indexedmzMLRow : global::System.Data.DataRow {
            
            private indexedmzMLDataTable tableindexedmzML;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal indexedmzMLRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableindexedmzML = ((indexedmzMLDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long indexListOffset {
                get {
                    try {
                        return ((long)(this[this.tableindexedmzML.indexListOffsetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'indexListOffset\' in table \'indexedmzML\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableindexedmzML.indexListOffsetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fileChecksum {
                get {
                    return ((string)(this[this.tableindexedmzML.fileChecksumColumn]));
                }
                set {
                    this[this.tableindexedmzML.fileChecksumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int indexedmzML_Id {
                get {
                    return ((int)(this[this.tableindexedmzML.indexedmzML_IdColumn]));
                }
                set {
                    this[this.tableindexedmzML.indexedmzML_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsindexListOffsetNull() {
                return this.IsNull(this.tableindexedmzML.indexListOffsetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetindexListOffsetNull() {
                this[this.tableindexedmzML.indexListOffsetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mzMLRow[] GetmzMLRows() {
                if ((this.Table.ChildRelations["indexedmzML_mzML"] == null)) {
                    return new mzMLRow[0];
                }
                else {
                    return ((mzMLRow[])(base.GetChildRows(this.Table.ChildRelations["indexedmzML_mzML"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexListRow[] GetindexListRows() {
                if ((this.Table.ChildRelations["indexedmzML_indexList"] == null)) {
                    return new indexListRow[0];
                }
                else {
                    return ((indexListRow[])(base.GetChildRows(this.Table.ChildRelations["indexedmzML_indexList"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class mzMLRow : global::System.Data.DataRow {
            
            private mzMLDataTable tablemzML;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal mzMLRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemzML = ((mzMLDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string accession {
                get {
                    try {
                        return ((string)(this[this.tablemzML.accessionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'accession\' in table \'mzML\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemzML.accessionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string version {
                get {
                    return ((string)(this[this.tablemzML.versionColumn]));
                }
                set {
                    this[this.tablemzML.versionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    try {
                        return ((string)(this[this.tablemzML.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'mzML\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemzML.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int mzML_Id {
                get {
                    return ((int)(this[this.tablemzML.mzML_IdColumn]));
                }
                set {
                    this[this.tablemzML.mzML_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int indexedmzML_Id {
                get {
                    try {
                        return ((int)(this[this.tablemzML.indexedmzML_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'indexedmzML_Id\' in table \'mzML\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemzML.indexedmzML_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexedmzMLRow indexedmzMLRow {
                get {
                    return ((indexedmzMLRow)(this.GetParentRow(this.Table.ParentRelations["indexedmzML_mzML"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["indexedmzML_mzML"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccessionNull() {
                return this.IsNull(this.tablemzML.accessionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccessionNull() {
                this[this.tablemzML.accessionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tablemzML.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tablemzML.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsindexedmzML_IdNull() {
                return this.IsNull(this.tablemzML.indexedmzML_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetindexedmzML_IdNull() {
                this[this.tablemzML.indexedmzML_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvListRow[] GetcvListRows() {
                if ((this.Table.ChildRelations["mzML_cvList"] == null)) {
                    return new cvListRow[0];
                }
                else {
                    return ((cvListRow[])(base.GetChildRows(this.Table.ChildRelations["mzML_cvList"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileDescriptionRow[] GetfileDescriptionRows() {
                if ((this.Table.ChildRelations["mzML_fileDescription"] == null)) {
                    return new fileDescriptionRow[0];
                }
                else {
                    return ((fileDescriptionRow[])(base.GetChildRows(this.Table.ChildRelations["mzML_fileDescription"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupListRow[] GetreferenceableParamGroupListRows() {
                if ((this.Table.ChildRelations["mzML_referenceableParamGroupList"] == null)) {
                    return new referenceableParamGroupListRow[0];
                }
                else {
                    return ((referenceableParamGroupListRow[])(base.GetChildRows(this.Table.ChildRelations["mzML_referenceableParamGroupList"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sampleListRow[] GetsampleListRows() {
                if ((this.Table.ChildRelations["mzML_sampleList"] == null)) {
                    return new sampleListRow[0];
                }
                else {
                    return ((sampleListRow[])(base.GetChildRows(this.Table.ChildRelations["mzML_sampleList"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareListRow[] GetsoftwareListRows() {
                if ((this.Table.ChildRelations["mzML_softwareList"] == null)) {
                    return new softwareListRow[0];
                }
                else {
                    return ((softwareListRow[])(base.GetChildRows(this.Table.ChildRelations["mzML_softwareList"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanSettingsListRow[] GetscanSettingsListRows() {
                if ((this.Table.ChildRelations["mzML_scanSettingsList"] == null)) {
                    return new scanSettingsListRow[0];
                }
                else {
                    return ((scanSettingsListRow[])(base.GetChildRows(this.Table.ChildRelations["mzML_scanSettingsList"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentConfigurationListRow[] GetinstrumentConfigurationListRows() {
                if ((this.Table.ChildRelations["mzML_instrumentConfigurationList"] == null)) {
                    return new instrumentConfigurationListRow[0];
                }
                else {
                    return ((instrumentConfigurationListRow[])(base.GetChildRows(this.Table.ChildRelations["mzML_instrumentConfigurationList"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataProcessingListRow[] GetdataProcessingListRows() {
                if ((this.Table.ChildRelations["mzML_dataProcessingList"] == null)) {
                    return new dataProcessingListRow[0];
                }
                else {
                    return ((dataProcessingListRow[])(base.GetChildRows(this.Table.ChildRelations["mzML_dataProcessingList"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public runRow[] GetrunRows() {
                if ((this.Table.ChildRelations["mzML_run"] == null)) {
                    return new runRow[0];
                }
                else {
                    return ((runRow[])(base.GetChildRows(this.Table.ChildRelations["mzML_run"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class cvListRow : global::System.Data.DataRow {
            
            private cvListDataTable tablecvList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal cvListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecvList = ((cvListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong count {
                get {
                    return ((ulong)(this[this.tablecvList.countColumn]));
                }
                set {
                    this[this.tablecvList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cvList_Id {
                get {
                    return ((int)(this[this.tablecvList.cvList_IdColumn]));
                }
                set {
                    this[this.tablecvList.cvList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int mzML_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvList.mzML_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mzML_Id\' in table \'cvList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvList.mzML_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mzMLRow mzMLRow {
                get {
                    return ((mzMLRow)(this.GetParentRow(this.Table.ParentRelations["mzML_cvList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["mzML_cvList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmzML_IdNull() {
                return this.IsNull(this.tablecvList.mzML_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmzML_IdNull() {
                this[this.tablecvList.mzML_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvRow[] GetcvRows() {
                if ((this.Table.ChildRelations["cvList_cv"] == null)) {
                    return new cvRow[0];
                }
                else {
                    return ((cvRow[])(base.GetChildRows(this.Table.ChildRelations["cvList_cv"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class cvRow : global::System.Data.DataRow {
            
            private cvDataTable tablecv;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal cvRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecv = ((cvDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tablecv.idColumn]));
                }
                set {
                    this[this.tablecv.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fullName {
                get {
                    return ((string)(this[this.tablecv.fullNameColumn]));
                }
                set {
                    this[this.tablecv.fullNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string version {
                get {
                    try {
                        return ((string)(this[this.tablecv.versionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'version\' in table \'cv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecv.versionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Uri URI {
                get {
                    return ((global::System.Uri)(this[this.tablecv.URIColumn]));
                }
                set {
                    this[this.tablecv.URIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cvList_Id {
                get {
                    try {
                        return ((int)(this[this.tablecv.cvList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cvList_Id\' in table \'cv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecv.cvList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvListRow cvListRow {
                get {
                    return ((cvListRow)(this.GetParentRow(this.Table.ParentRelations["cvList_cv"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["cvList_cv"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionNull() {
                return this.IsNull(this.tablecv.versionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionNull() {
                this[this.tablecv.versionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscvList_IdNull() {
                return this.IsNull(this.tablecv.cvList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcvList_IdNull() {
                this[this.tablecv.cvList_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class fileDescriptionRow : global::System.Data.DataRow {
            
            private fileDescriptionDataTable tablefileDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal fileDescriptionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablefileDescription = ((fileDescriptionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fileDescription_Id {
                get {
                    return ((int)(this[this.tablefileDescription.fileDescription_IdColumn]));
                }
                set {
                    this[this.tablefileDescription.fileDescription_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int mzML_Id {
                get {
                    try {
                        return ((int)(this[this.tablefileDescription.mzML_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mzML_Id\' in table \'fileDescription\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefileDescription.mzML_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mzMLRow mzMLRow {
                get {
                    return ((mzMLRow)(this.GetParentRow(this.Table.ParentRelations["mzML_fileDescription"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["mzML_fileDescription"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmzML_IdNull() {
                return this.IsNull(this.tablefileDescription.mzML_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmzML_IdNull() {
                this[this.tablefileDescription.mzML_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileContentRow[] GetfileContentRows() {
                if ((this.Table.ChildRelations["fileDescription_fileContent"] == null)) {
                    return new fileContentRow[0];
                }
                else {
                    return ((fileContentRow[])(base.GetChildRows(this.Table.ChildRelations["fileDescription_fileContent"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileListRow[] GetsourceFileListRows() {
                if ((this.Table.ChildRelations["fileDescription_sourceFileList"] == null)) {
                    return new sourceFileListRow[0];
                }
                else {
                    return ((sourceFileListRow[])(base.GetChildRows(this.Table.ChildRelations["fileDescription_sourceFileList"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contactRow[] GetcontactRows() {
                if ((this.Table.ChildRelations["fileDescription_contact"] == null)) {
                    return new contactRow[0];
                }
                else {
                    return ((contactRow[])(base.GetChildRows(this.Table.ChildRelations["fileDescription_contact"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class fileContentRow : global::System.Data.DataRow {
            
            private fileContentDataTable tablefileContent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal fileContentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablefileContent = ((fileContentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fileContent_Id {
                get {
                    return ((int)(this[this.tablefileContent.fileContent_IdColumn]));
                }
                set {
                    this[this.tablefileContent.fileContent_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fileDescription_Id {
                get {
                    try {
                        return ((int)(this[this.tablefileContent.fileDescription_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fileDescription_Id\' in table \'fileContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefileContent.fileDescription_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileDescriptionRow fileDescriptionRow {
                get {
                    return ((fileDescriptionRow)(this.GetParentRow(this.Table.ParentRelations["fileDescription_fileContent"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fileDescription_fileContent"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfileDescription_IdNull() {
                return this.IsNull(this.tablefileContent.fileDescription_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfileDescription_IdNull() {
                this[this.tablefileContent.fileDescription_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["fileContent_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["fileContent_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["fileContent_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["fileContent_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["fileContent_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["fileContent_userParam"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class referenceableParamGroupRefRow : global::System.Data.DataRow {
            
            private referenceableParamGroupRefDataTable tablereferenceableParamGroupRef;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal referenceableParamGroupRefRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablereferenceableParamGroupRef = ((referenceableParamGroupRefDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _ref {
                get {
                    return ((string)(this[this.tablereferenceableParamGroupRef._refColumn]));
                }
                set {
                    this[this.tablereferenceableParamGroupRef._refColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fileContent_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.fileContent_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fileContent_Id\' in table \'referenceableParamGroupRef\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.fileContent_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sourceFile_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.sourceFile_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sourceFile_Id\' in table \'referenceableParamGroupRef\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.sourceFile_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int contact_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.contact_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'contact_Id\' in table \'referenceableParamGroupRef\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.contact_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sample_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.sample_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sample_Id\' in table \'referenceableParamGroupRef\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.sample_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int software_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.software_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'software_Id\' in table \'referenceableParamGroupRef\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.software_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int target_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.target_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'target_Id\' in table \'referenceableParamGroupRef\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.target_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scanSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.scanSettings_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scanSettings_Id\' in table \'referenceableParamGroupRef\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.scanSettings_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int source_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.source_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'source_Id\' in table \'referenceableParamGroupRef\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.source_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int analyzer_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.analyzer_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'analyzer_Id\' in table \'referenceableParamGroupRef\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.analyzer_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int detector_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.detector_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'detector_Id\' in table \'referenceableParamGroupRef\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.detector_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int instrumentConfiguration_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.instrumentConfiguration_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'instrumentConfiguration_Id\' in table \'referenceableParamGro" +
                                "upRef\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.instrumentConfiguration_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int processingMethod_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.processingMethod_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'processingMethod_Id\' in table \'referenceableParamGroupRef\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.processingMethod_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scanWindow_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.scanWindow_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scanWindow_Id\' in table \'referenceableParamGroupRef\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.scanWindow_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scan_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.scan_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scan_Id\' in table \'referenceableParamGroupRef\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.scan_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scanList_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.scanList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scanList_Id\' in table \'referenceableParamGroupRef\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.scanList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int isolationWindow_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.isolationWindow_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isolationWindow_Id\' in table \'referenceableParamGroupRef\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.isolationWindow_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int selectedIon_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.selectedIon_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'selectedIon_Id\' in table \'referenceableParamGroupRef\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.selectedIon_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int activation_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.activation_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'activation_Id\' in table \'referenceableParamGroupRef\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.activation_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int binaryDataArray_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.binaryDataArray_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'binaryDataArray_Id\' in table \'referenceableParamGroupRef\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.binaryDataArray_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spectrum_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.spectrum_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'spectrum_Id\' in table \'referenceableParamGroupRef\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.spectrum_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int chromatogram_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.chromatogram_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'chromatogram_Id\' in table \'referenceableParamGroupRef\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.chromatogram_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int run_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupRef.run_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'run_Id\' in table \'referenceableParamGroupRef\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupRef.run_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileContentRow fileContentRow {
                get {
                    return ((fileContentRow)(this.GetParentRow(this.Table.ParentRelations["fileContent_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fileContent_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRow sourceFileRow {
                get {
                    return ((sourceFileRow)(this.GetParentRow(this.Table.ParentRelations["sourceFile_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["sourceFile_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contactRow contactRow {
                get {
                    return ((contactRow)(this.GetParentRow(this.Table.ParentRelations["contact_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["contact_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sampleRow sampleRow {
                get {
                    return ((sampleRow)(this.GetParentRow(this.Table.ParentRelations["sample_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["sample_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareRow softwareRow {
                get {
                    return ((softwareRow)(this.GetParentRow(this.Table.ParentRelations["software_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["software_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public targetRow targetRow {
                get {
                    return ((targetRow)(this.GetParentRow(this.Table.ParentRelations["target_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["target_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanSettingsRow scanSettingsRow {
                get {
                    return ((scanSettingsRow)(this.GetParentRow(this.Table.ParentRelations["scanSettings_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scanSettings_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceRow sourceRow {
                get {
                    return ((sourceRow)(this.GetParentRow(this.Table.ParentRelations["source_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["source_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public analyzerRow analyzerRow {
                get {
                    return ((analyzerRow)(this.GetParentRow(this.Table.ParentRelations["analyzer_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["analyzer_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detectorRow detectorRow {
                get {
                    return ((detectorRow)(this.GetParentRow(this.Table.ParentRelations["detector_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["detector_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentConfigurationRow instrumentConfigurationRow {
                get {
                    return ((instrumentConfigurationRow)(this.GetParentRow(this.Table.ParentRelations["instrumentConfiguration_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["instrumentConfiguration_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public processingMethodRow processingMethodRow {
                get {
                    return ((processingMethodRow)(this.GetParentRow(this.Table.ParentRelations["processingMethod_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["processingMethod_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanWindowRow scanWindowRow {
                get {
                    return ((scanWindowRow)(this.GetParentRow(this.Table.ParentRelations["scanWindow_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scanWindow_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanRow scanRow {
                get {
                    return ((scanRow)(this.GetParentRow(this.Table.ParentRelations["scan_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scan_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanListRow scanListRow {
                get {
                    return ((scanListRow)(this.GetParentRow(this.Table.ParentRelations["scanList_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scanList_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isolationWindowRow isolationWindowRow {
                get {
                    return ((isolationWindowRow)(this.GetParentRow(this.Table.ParentRelations["isolationWindow_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["isolationWindow_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public selectedIonRow selectedIonRow {
                get {
                    return ((selectedIonRow)(this.GetParentRow(this.Table.ParentRelations["selectedIon_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["selectedIon_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public activationRow activationRow {
                get {
                    return ((activationRow)(this.GetParentRow(this.Table.ParentRelations["activation_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["activation_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public binaryDataArrayRow binaryDataArrayRow {
                get {
                    return ((binaryDataArrayRow)(this.GetParentRow(this.Table.ParentRelations["binaryDataArray_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["binaryDataArray_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumRow spectrumRow {
                get {
                    return ((spectrumRow)(this.GetParentRow(this.Table.ParentRelations["spectrum_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["spectrum_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramRow chromatogramRow {
                get {
                    return ((chromatogramRow)(this.GetParentRow(this.Table.ParentRelations["chromatogram_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["chromatogram_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public runRow runRow {
                get {
                    return ((runRow)(this.GetParentRow(this.Table.ParentRelations["run_referenceableParamGroupRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["run_referenceableParamGroupRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfileContent_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.fileContent_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfileContent_IdNull() {
                this[this.tablereferenceableParamGroupRef.fileContent_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssourceFile_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.sourceFile_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsourceFile_IdNull() {
                this[this.tablereferenceableParamGroupRef.sourceFile_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscontact_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.contact_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcontact_IdNull() {
                this[this.tablereferenceableParamGroupRef.contact_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issample_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.sample_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsample_IdNull() {
                this[this.tablereferenceableParamGroupRef.sample_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issoftware_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.software_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsoftware_IdNull() {
                this[this.tablereferenceableParamGroupRef.software_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istarget_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.target_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settarget_IdNull() {
                this[this.tablereferenceableParamGroupRef.target_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscanSettings_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.scanSettings_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscanSettings_IdNull() {
                this[this.tablereferenceableParamGroupRef.scanSettings_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issource_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.source_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsource_IdNull() {
                this[this.tablereferenceableParamGroupRef.source_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isanalyzer_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.analyzer_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setanalyzer_IdNull() {
                this[this.tablereferenceableParamGroupRef.analyzer_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdetector_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.detector_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdetector_IdNull() {
                this[this.tablereferenceableParamGroupRef.detector_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinstrumentConfiguration_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.instrumentConfiguration_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinstrumentConfiguration_IdNull() {
                this[this.tablereferenceableParamGroupRef.instrumentConfiguration_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprocessingMethod_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.processingMethod_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprocessingMethod_IdNull() {
                this[this.tablereferenceableParamGroupRef.processingMethod_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscanWindow_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.scanWindow_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscanWindow_IdNull() {
                this[this.tablereferenceableParamGroupRef.scanWindow_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isscan_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.scan_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setscan_IdNull() {
                this[this.tablereferenceableParamGroupRef.scan_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscanList_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.scanList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscanList_IdNull() {
                this[this.tablereferenceableParamGroupRef.scanList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisolationWindow_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.isolationWindow_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisolationWindow_IdNull() {
                this[this.tablereferenceableParamGroupRef.isolationWindow_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsselectedIon_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.selectedIon_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetselectedIon_IdNull() {
                this[this.tablereferenceableParamGroupRef.selectedIon_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isactivation_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.activation_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setactivation_IdNull() {
                this[this.tablereferenceableParamGroupRef.activation_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbinaryDataArray_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.binaryDataArray_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbinaryDataArray_IdNull() {
                this[this.tablereferenceableParamGroupRef.binaryDataArray_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isspectrum_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.spectrum_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setspectrum_IdNull() {
                this[this.tablereferenceableParamGroupRef.spectrum_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ischromatogram_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.chromatogram_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setchromatogram_IdNull() {
                this[this.tablereferenceableParamGroupRef.chromatogram_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrun_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupRef.run_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrun_IdNull() {
                this[this.tablereferenceableParamGroupRef.run_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class cvParamRow : global::System.Data.DataRow {
            
            private cvParamDataTable tablecvParam;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal cvParamRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecvParam = ((cvParamDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cvRef {
                get {
                    return ((string)(this[this.tablecvParam.cvRefColumn]));
                }
                set {
                    this[this.tablecvParam.cvRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string accession {
                get {
                    return ((string)(this[this.tablecvParam.accessionColumn]));
                }
                set {
                    this[this.tablecvParam.accessionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string value {
                get {
                    try {
                        return ((string)(this[this.tablecvParam.valueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'value\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tablecvParam.nameColumn]));
                }
                set {
                    this[this.tablecvParam.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unitAccession {
                get {
                    try {
                        return ((string)(this[this.tablecvParam.unitAccessionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'unitAccession\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.unitAccessionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unitName {
                get {
                    try {
                        return ((string)(this[this.tablecvParam.unitNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'unitName\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.unitNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unitCvRef {
                get {
                    try {
                        return ((string)(this[this.tablecvParam.unitCvRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'unitCvRef\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.unitCvRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fileContent_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.fileContent_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fileContent_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.fileContent_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sourceFile_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.sourceFile_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sourceFile_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.sourceFile_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int contact_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.contact_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'contact_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.contact_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int referenceableParamGroup_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.referenceableParamGroup_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'referenceableParamGroup_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.referenceableParamGroup_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sample_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.sample_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sample_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.sample_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int software_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.software_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'software_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.software_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int target_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.target_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'target_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.target_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scanSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.scanSettings_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scanSettings_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.scanSettings_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int source_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.source_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'source_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.source_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int analyzer_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.analyzer_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'analyzer_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.analyzer_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int detector_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.detector_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'detector_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.detector_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int instrumentConfiguration_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.instrumentConfiguration_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'instrumentConfiguration_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.instrumentConfiguration_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int processingMethod_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.processingMethod_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'processingMethod_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.processingMethod_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scanWindow_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.scanWindow_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scanWindow_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.scanWindow_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scan_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.scan_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scan_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.scan_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scanList_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.scanList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scanList_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.scanList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int isolationWindow_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.isolationWindow_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isolationWindow_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.isolationWindow_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int selectedIon_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.selectedIon_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'selectedIon_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.selectedIon_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int activation_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.activation_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'activation_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.activation_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int binaryDataArray_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.binaryDataArray_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'binaryDataArray_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.binaryDataArray_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spectrum_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.spectrum_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'spectrum_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.spectrum_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int chromatogram_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.chromatogram_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'chromatogram_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.chromatogram_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int run_Id {
                get {
                    try {
                        return ((int)(this[this.tablecvParam.run_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'run_Id\' in table \'cvParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecvParam.run_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileContentRow fileContentRow {
                get {
                    return ((fileContentRow)(this.GetParentRow(this.Table.ParentRelations["fileContent_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fileContent_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRow sourceFileRow {
                get {
                    return ((sourceFileRow)(this.GetParentRow(this.Table.ParentRelations["sourceFile_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["sourceFile_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contactRow contactRow {
                get {
                    return ((contactRow)(this.GetParentRow(this.Table.ParentRelations["contact_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["contact_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRow referenceableParamGroupRow {
                get {
                    return ((referenceableParamGroupRow)(this.GetParentRow(this.Table.ParentRelations["referenceableParamGroup_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["referenceableParamGroup_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sampleRow sampleRow {
                get {
                    return ((sampleRow)(this.GetParentRow(this.Table.ParentRelations["sample_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["sample_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareRow softwareRow {
                get {
                    return ((softwareRow)(this.GetParentRow(this.Table.ParentRelations["software_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["software_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public targetRow targetRow {
                get {
                    return ((targetRow)(this.GetParentRow(this.Table.ParentRelations["target_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["target_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanSettingsRow scanSettingsRow {
                get {
                    return ((scanSettingsRow)(this.GetParentRow(this.Table.ParentRelations["scanSettings_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scanSettings_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceRow sourceRow {
                get {
                    return ((sourceRow)(this.GetParentRow(this.Table.ParentRelations["source_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["source_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public analyzerRow analyzerRow {
                get {
                    return ((analyzerRow)(this.GetParentRow(this.Table.ParentRelations["analyzer_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["analyzer_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detectorRow detectorRow {
                get {
                    return ((detectorRow)(this.GetParentRow(this.Table.ParentRelations["detector_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["detector_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentConfigurationRow instrumentConfigurationRow {
                get {
                    return ((instrumentConfigurationRow)(this.GetParentRow(this.Table.ParentRelations["instrumentConfiguration_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["instrumentConfiguration_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public processingMethodRow processingMethodRow {
                get {
                    return ((processingMethodRow)(this.GetParentRow(this.Table.ParentRelations["processingMethod_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["processingMethod_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanWindowRow scanWindowRow {
                get {
                    return ((scanWindowRow)(this.GetParentRow(this.Table.ParentRelations["scanWindow_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scanWindow_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanRow scanRow {
                get {
                    return ((scanRow)(this.GetParentRow(this.Table.ParentRelations["scan_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scan_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanListRow scanListRow {
                get {
                    return ((scanListRow)(this.GetParentRow(this.Table.ParentRelations["scanList_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scanList_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isolationWindowRow isolationWindowRow {
                get {
                    return ((isolationWindowRow)(this.GetParentRow(this.Table.ParentRelations["isolationWindow_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["isolationWindow_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public selectedIonRow selectedIonRow {
                get {
                    return ((selectedIonRow)(this.GetParentRow(this.Table.ParentRelations["selectedIon_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["selectedIon_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public activationRow activationRow {
                get {
                    return ((activationRow)(this.GetParentRow(this.Table.ParentRelations["activation_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["activation_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public binaryDataArrayRow binaryDataArrayRow {
                get {
                    return ((binaryDataArrayRow)(this.GetParentRow(this.Table.ParentRelations["binaryDataArray_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["binaryDataArray_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumRow spectrumRow {
                get {
                    return ((spectrumRow)(this.GetParentRow(this.Table.ParentRelations["spectrum_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["spectrum_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramRow chromatogramRow {
                get {
                    return ((chromatogramRow)(this.GetParentRow(this.Table.ParentRelations["chromatogram_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["chromatogram_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public runRow runRow {
                get {
                    return ((runRow)(this.GetParentRow(this.Table.ParentRelations["run_cvParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["run_cvParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvalueNull() {
                return this.IsNull(this.tablecvParam.valueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvalueNull() {
                this[this.tablecvParam.valueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsunitAccessionNull() {
                return this.IsNull(this.tablecvParam.unitAccessionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetunitAccessionNull() {
                this[this.tablecvParam.unitAccessionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsunitNameNull() {
                return this.IsNull(this.tablecvParam.unitNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetunitNameNull() {
                this[this.tablecvParam.unitNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsunitCvRefNull() {
                return this.IsNull(this.tablecvParam.unitCvRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetunitCvRefNull() {
                this[this.tablecvParam.unitCvRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfileContent_IdNull() {
                return this.IsNull(this.tablecvParam.fileContent_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfileContent_IdNull() {
                this[this.tablecvParam.fileContent_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssourceFile_IdNull() {
                return this.IsNull(this.tablecvParam.sourceFile_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsourceFile_IdNull() {
                this[this.tablecvParam.sourceFile_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscontact_IdNull() {
                return this.IsNull(this.tablecvParam.contact_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcontact_IdNull() {
                this[this.tablecvParam.contact_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreferenceableParamGroup_IdNull() {
                return this.IsNull(this.tablecvParam.referenceableParamGroup_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreferenceableParamGroup_IdNull() {
                this[this.tablecvParam.referenceableParamGroup_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issample_IdNull() {
                return this.IsNull(this.tablecvParam.sample_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsample_IdNull() {
                this[this.tablecvParam.sample_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issoftware_IdNull() {
                return this.IsNull(this.tablecvParam.software_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsoftware_IdNull() {
                this[this.tablecvParam.software_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istarget_IdNull() {
                return this.IsNull(this.tablecvParam.target_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settarget_IdNull() {
                this[this.tablecvParam.target_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscanSettings_IdNull() {
                return this.IsNull(this.tablecvParam.scanSettings_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscanSettings_IdNull() {
                this[this.tablecvParam.scanSettings_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issource_IdNull() {
                return this.IsNull(this.tablecvParam.source_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsource_IdNull() {
                this[this.tablecvParam.source_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isanalyzer_IdNull() {
                return this.IsNull(this.tablecvParam.analyzer_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setanalyzer_IdNull() {
                this[this.tablecvParam.analyzer_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdetector_IdNull() {
                return this.IsNull(this.tablecvParam.detector_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdetector_IdNull() {
                this[this.tablecvParam.detector_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinstrumentConfiguration_IdNull() {
                return this.IsNull(this.tablecvParam.instrumentConfiguration_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinstrumentConfiguration_IdNull() {
                this[this.tablecvParam.instrumentConfiguration_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprocessingMethod_IdNull() {
                return this.IsNull(this.tablecvParam.processingMethod_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprocessingMethod_IdNull() {
                this[this.tablecvParam.processingMethod_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscanWindow_IdNull() {
                return this.IsNull(this.tablecvParam.scanWindow_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscanWindow_IdNull() {
                this[this.tablecvParam.scanWindow_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isscan_IdNull() {
                return this.IsNull(this.tablecvParam.scan_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setscan_IdNull() {
                this[this.tablecvParam.scan_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscanList_IdNull() {
                return this.IsNull(this.tablecvParam.scanList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscanList_IdNull() {
                this[this.tablecvParam.scanList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisolationWindow_IdNull() {
                return this.IsNull(this.tablecvParam.isolationWindow_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisolationWindow_IdNull() {
                this[this.tablecvParam.isolationWindow_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsselectedIon_IdNull() {
                return this.IsNull(this.tablecvParam.selectedIon_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetselectedIon_IdNull() {
                this[this.tablecvParam.selectedIon_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isactivation_IdNull() {
                return this.IsNull(this.tablecvParam.activation_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setactivation_IdNull() {
                this[this.tablecvParam.activation_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbinaryDataArray_IdNull() {
                return this.IsNull(this.tablecvParam.binaryDataArray_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbinaryDataArray_IdNull() {
                this[this.tablecvParam.binaryDataArray_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isspectrum_IdNull() {
                return this.IsNull(this.tablecvParam.spectrum_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setspectrum_IdNull() {
                this[this.tablecvParam.spectrum_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ischromatogram_IdNull() {
                return this.IsNull(this.tablecvParam.chromatogram_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setchromatogram_IdNull() {
                this[this.tablecvParam.chromatogram_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrun_IdNull() {
                return this.IsNull(this.tablecvParam.run_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrun_IdNull() {
                this[this.tablecvParam.run_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class userParamRow : global::System.Data.DataRow {
            
            private userParamDataTable tableuserParam;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal userParamRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableuserParam = ((userParamDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableuserParam.nameColumn]));
                }
                set {
                    this[this.tableuserParam.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    try {
                        return ((string)(this[this.tableuserParam.typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'type\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string value {
                get {
                    try {
                        return ((string)(this[this.tableuserParam.valueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'value\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unitAccession {
                get {
                    try {
                        return ((string)(this[this.tableuserParam.unitAccessionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'unitAccession\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.unitAccessionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unitName {
                get {
                    try {
                        return ((string)(this[this.tableuserParam.unitNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'unitName\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.unitNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unitCvRef {
                get {
                    try {
                        return ((string)(this[this.tableuserParam.unitCvRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'unitCvRef\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.unitCvRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fileContent_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.fileContent_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fileContent_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.fileContent_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sourceFile_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.sourceFile_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sourceFile_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.sourceFile_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int contact_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.contact_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'contact_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.contact_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int referenceableParamGroup_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.referenceableParamGroup_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'referenceableParamGroup_Id\' in table \'userParam\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableuserParam.referenceableParamGroup_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sample_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.sample_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sample_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.sample_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int software_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.software_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'software_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.software_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int target_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.target_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'target_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.target_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scanSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.scanSettings_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scanSettings_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.scanSettings_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int source_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.source_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'source_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.source_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int analyzer_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.analyzer_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'analyzer_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.analyzer_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int detector_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.detector_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'detector_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.detector_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int instrumentConfiguration_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.instrumentConfiguration_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'instrumentConfiguration_Id\' in table \'userParam\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableuserParam.instrumentConfiguration_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int processingMethod_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.processingMethod_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'processingMethod_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.processingMethod_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scanWindow_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.scanWindow_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scanWindow_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.scanWindow_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scan_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.scan_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scan_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.scan_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scanList_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.scanList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scanList_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.scanList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int isolationWindow_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.isolationWindow_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isolationWindow_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.isolationWindow_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int selectedIon_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.selectedIon_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'selectedIon_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.selectedIon_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int activation_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.activation_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'activation_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.activation_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int binaryDataArray_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.binaryDataArray_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'binaryDataArray_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.binaryDataArray_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spectrum_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.spectrum_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'spectrum_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.spectrum_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int chromatogram_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.chromatogram_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'chromatogram_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.chromatogram_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int run_Id {
                get {
                    try {
                        return ((int)(this[this.tableuserParam.run_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'run_Id\' in table \'userParam\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuserParam.run_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileContentRow fileContentRow {
                get {
                    return ((fileContentRow)(this.GetParentRow(this.Table.ParentRelations["fileContent_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fileContent_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRow sourceFileRow {
                get {
                    return ((sourceFileRow)(this.GetParentRow(this.Table.ParentRelations["sourceFile_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["sourceFile_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contactRow contactRow {
                get {
                    return ((contactRow)(this.GetParentRow(this.Table.ParentRelations["contact_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["contact_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRow referenceableParamGroupRow {
                get {
                    return ((referenceableParamGroupRow)(this.GetParentRow(this.Table.ParentRelations["referenceableParamGroup_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["referenceableParamGroup_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sampleRow sampleRow {
                get {
                    return ((sampleRow)(this.GetParentRow(this.Table.ParentRelations["sample_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["sample_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareRow softwareRow {
                get {
                    return ((softwareRow)(this.GetParentRow(this.Table.ParentRelations["software_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["software_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public targetRow targetRow {
                get {
                    return ((targetRow)(this.GetParentRow(this.Table.ParentRelations["target_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["target_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanSettingsRow scanSettingsRow {
                get {
                    return ((scanSettingsRow)(this.GetParentRow(this.Table.ParentRelations["scanSettings_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scanSettings_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceRow sourceRow {
                get {
                    return ((sourceRow)(this.GetParentRow(this.Table.ParentRelations["source_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["source_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public analyzerRow analyzerRow {
                get {
                    return ((analyzerRow)(this.GetParentRow(this.Table.ParentRelations["analyzer_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["analyzer_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detectorRow detectorRow {
                get {
                    return ((detectorRow)(this.GetParentRow(this.Table.ParentRelations["detector_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["detector_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentConfigurationRow instrumentConfigurationRow {
                get {
                    return ((instrumentConfigurationRow)(this.GetParentRow(this.Table.ParentRelations["instrumentConfiguration_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["instrumentConfiguration_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public processingMethodRow processingMethodRow {
                get {
                    return ((processingMethodRow)(this.GetParentRow(this.Table.ParentRelations["processingMethod_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["processingMethod_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanWindowRow scanWindowRow {
                get {
                    return ((scanWindowRow)(this.GetParentRow(this.Table.ParentRelations["scanWindow_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scanWindow_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanRow scanRow {
                get {
                    return ((scanRow)(this.GetParentRow(this.Table.ParentRelations["scan_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scan_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanListRow scanListRow {
                get {
                    return ((scanListRow)(this.GetParentRow(this.Table.ParentRelations["scanList_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scanList_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isolationWindowRow isolationWindowRow {
                get {
                    return ((isolationWindowRow)(this.GetParentRow(this.Table.ParentRelations["isolationWindow_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["isolationWindow_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public selectedIonRow selectedIonRow {
                get {
                    return ((selectedIonRow)(this.GetParentRow(this.Table.ParentRelations["selectedIon_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["selectedIon_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public activationRow activationRow {
                get {
                    return ((activationRow)(this.GetParentRow(this.Table.ParentRelations["activation_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["activation_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public binaryDataArrayRow binaryDataArrayRow {
                get {
                    return ((binaryDataArrayRow)(this.GetParentRow(this.Table.ParentRelations["binaryDataArray_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["binaryDataArray_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumRow spectrumRow {
                get {
                    return ((spectrumRow)(this.GetParentRow(this.Table.ParentRelations["spectrum_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["spectrum_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramRow chromatogramRow {
                get {
                    return ((chromatogramRow)(this.GetParentRow(this.Table.ParentRelations["chromatogram_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["chromatogram_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public runRow runRow {
                get {
                    return ((runRow)(this.GetParentRow(this.Table.ParentRelations["run_userParam"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["run_userParam"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.tableuserParam.typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.tableuserParam.typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvalueNull() {
                return this.IsNull(this.tableuserParam.valueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvalueNull() {
                this[this.tableuserParam.valueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsunitAccessionNull() {
                return this.IsNull(this.tableuserParam.unitAccessionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetunitAccessionNull() {
                this[this.tableuserParam.unitAccessionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsunitNameNull() {
                return this.IsNull(this.tableuserParam.unitNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetunitNameNull() {
                this[this.tableuserParam.unitNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsunitCvRefNull() {
                return this.IsNull(this.tableuserParam.unitCvRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetunitCvRefNull() {
                this[this.tableuserParam.unitCvRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfileContent_IdNull() {
                return this.IsNull(this.tableuserParam.fileContent_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfileContent_IdNull() {
                this[this.tableuserParam.fileContent_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssourceFile_IdNull() {
                return this.IsNull(this.tableuserParam.sourceFile_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsourceFile_IdNull() {
                this[this.tableuserParam.sourceFile_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscontact_IdNull() {
                return this.IsNull(this.tableuserParam.contact_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcontact_IdNull() {
                this[this.tableuserParam.contact_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreferenceableParamGroup_IdNull() {
                return this.IsNull(this.tableuserParam.referenceableParamGroup_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreferenceableParamGroup_IdNull() {
                this[this.tableuserParam.referenceableParamGroup_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issample_IdNull() {
                return this.IsNull(this.tableuserParam.sample_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsample_IdNull() {
                this[this.tableuserParam.sample_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issoftware_IdNull() {
                return this.IsNull(this.tableuserParam.software_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsoftware_IdNull() {
                this[this.tableuserParam.software_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istarget_IdNull() {
                return this.IsNull(this.tableuserParam.target_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settarget_IdNull() {
                this[this.tableuserParam.target_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscanSettings_IdNull() {
                return this.IsNull(this.tableuserParam.scanSettings_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscanSettings_IdNull() {
                this[this.tableuserParam.scanSettings_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issource_IdNull() {
                return this.IsNull(this.tableuserParam.source_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsource_IdNull() {
                this[this.tableuserParam.source_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isanalyzer_IdNull() {
                return this.IsNull(this.tableuserParam.analyzer_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setanalyzer_IdNull() {
                this[this.tableuserParam.analyzer_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdetector_IdNull() {
                return this.IsNull(this.tableuserParam.detector_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdetector_IdNull() {
                this[this.tableuserParam.detector_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinstrumentConfiguration_IdNull() {
                return this.IsNull(this.tableuserParam.instrumentConfiguration_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinstrumentConfiguration_IdNull() {
                this[this.tableuserParam.instrumentConfiguration_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprocessingMethod_IdNull() {
                return this.IsNull(this.tableuserParam.processingMethod_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprocessingMethod_IdNull() {
                this[this.tableuserParam.processingMethod_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscanWindow_IdNull() {
                return this.IsNull(this.tableuserParam.scanWindow_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscanWindow_IdNull() {
                this[this.tableuserParam.scanWindow_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isscan_IdNull() {
                return this.IsNull(this.tableuserParam.scan_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setscan_IdNull() {
                this[this.tableuserParam.scan_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscanList_IdNull() {
                return this.IsNull(this.tableuserParam.scanList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscanList_IdNull() {
                this[this.tableuserParam.scanList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisolationWindow_IdNull() {
                return this.IsNull(this.tableuserParam.isolationWindow_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisolationWindow_IdNull() {
                this[this.tableuserParam.isolationWindow_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsselectedIon_IdNull() {
                return this.IsNull(this.tableuserParam.selectedIon_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetselectedIon_IdNull() {
                this[this.tableuserParam.selectedIon_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isactivation_IdNull() {
                return this.IsNull(this.tableuserParam.activation_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setactivation_IdNull() {
                this[this.tableuserParam.activation_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbinaryDataArray_IdNull() {
                return this.IsNull(this.tableuserParam.binaryDataArray_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbinaryDataArray_IdNull() {
                this[this.tableuserParam.binaryDataArray_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isspectrum_IdNull() {
                return this.IsNull(this.tableuserParam.spectrum_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setspectrum_IdNull() {
                this[this.tableuserParam.spectrum_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ischromatogram_IdNull() {
                return this.IsNull(this.tableuserParam.chromatogram_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setchromatogram_IdNull() {
                this[this.tableuserParam.chromatogram_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrun_IdNull() {
                return this.IsNull(this.tableuserParam.run_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrun_IdNull() {
                this[this.tableuserParam.run_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class sourceFileListRow : global::System.Data.DataRow {
            
            private sourceFileListDataTable tablesourceFileList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sourceFileListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesourceFileList = ((sourceFileListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong count {
                get {
                    return ((ulong)(this[this.tablesourceFileList.countColumn]));
                }
                set {
                    this[this.tablesourceFileList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sourceFileList_Id {
                get {
                    return ((int)(this[this.tablesourceFileList.sourceFileList_IdColumn]));
                }
                set {
                    this[this.tablesourceFileList.sourceFileList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fileDescription_Id {
                get {
                    try {
                        return ((int)(this[this.tablesourceFileList.fileDescription_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fileDescription_Id\' in table \'sourceFileList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesourceFileList.fileDescription_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileDescriptionRow fileDescriptionRow {
                get {
                    return ((fileDescriptionRow)(this.GetParentRow(this.Table.ParentRelations["fileDescription_sourceFileList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fileDescription_sourceFileList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfileDescription_IdNull() {
                return this.IsNull(this.tablesourceFileList.fileDescription_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfileDescription_IdNull() {
                this[this.tablesourceFileList.fileDescription_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRow[] GetsourceFileRows() {
                if ((this.Table.ChildRelations["sourceFileList_sourceFile"] == null)) {
                    return new sourceFileRow[0];
                }
                else {
                    return ((sourceFileRow[])(base.GetChildRows(this.Table.ChildRelations["sourceFileList_sourceFile"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class sourceFileRow : global::System.Data.DataRow {
            
            private sourceFileDataTable tablesourceFile;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sourceFileRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesourceFile = ((sourceFileDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tablesourceFile.idColumn]));
                }
                set {
                    this[this.tablesourceFile.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tablesourceFile.nameColumn]));
                }
                set {
                    this[this.tablesourceFile.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Uri location {
                get {
                    return ((global::System.Uri)(this[this.tablesourceFile.locationColumn]));
                }
                set {
                    this[this.tablesourceFile.locationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sourceFile_Id {
                get {
                    return ((int)(this[this.tablesourceFile.sourceFile_IdColumn]));
                }
                set {
                    this[this.tablesourceFile.sourceFile_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sourceFileList_Id {
                get {
                    try {
                        return ((int)(this[this.tablesourceFile.sourceFileList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sourceFileList_Id\' in table \'sourceFile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesourceFile.sourceFileList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileListRow sourceFileListRow {
                get {
                    return ((sourceFileListRow)(this.GetParentRow(this.Table.ParentRelations["sourceFileList_sourceFile"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["sourceFileList_sourceFile"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssourceFileList_IdNull() {
                return this.IsNull(this.tablesourceFile.sourceFileList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsourceFileList_IdNull() {
                this[this.tablesourceFile.sourceFileList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["sourceFile_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["sourceFile_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["sourceFile_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["sourceFile_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["sourceFile_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["sourceFile_userParam"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class contactRow : global::System.Data.DataRow {
            
            private contactDataTable tablecontact;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal contactRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecontact = ((contactDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int contact_Id {
                get {
                    return ((int)(this[this.tablecontact.contact_IdColumn]));
                }
                set {
                    this[this.tablecontact.contact_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fileDescription_Id {
                get {
                    try {
                        return ((int)(this[this.tablecontact.fileDescription_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fileDescription_Id\' in table \'contact\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecontact.fileDescription_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileDescriptionRow fileDescriptionRow {
                get {
                    return ((fileDescriptionRow)(this.GetParentRow(this.Table.ParentRelations["fileDescription_contact"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fileDescription_contact"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfileDescription_IdNull() {
                return this.IsNull(this.tablecontact.fileDescription_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfileDescription_IdNull() {
                this[this.tablecontact.fileDescription_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["contact_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["contact_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["contact_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["contact_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["contact_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["contact_userParam"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class referenceableParamGroupListRow : global::System.Data.DataRow {
            
            private referenceableParamGroupListDataTable tablereferenceableParamGroupList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal referenceableParamGroupListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablereferenceableParamGroupList = ((referenceableParamGroupListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong count {
                get {
                    return ((ulong)(this[this.tablereferenceableParamGroupList.countColumn]));
                }
                set {
                    this[this.tablereferenceableParamGroupList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int referenceableParamGroupList_Id {
                get {
                    return ((int)(this[this.tablereferenceableParamGroupList.referenceableParamGroupList_IdColumn]));
                }
                set {
                    this[this.tablereferenceableParamGroupList.referenceableParamGroupList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int mzML_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroupList.mzML_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mzML_Id\' in table \'referenceableParamGroupList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroupList.mzML_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mzMLRow mzMLRow {
                get {
                    return ((mzMLRow)(this.GetParentRow(this.Table.ParentRelations["mzML_referenceableParamGroupList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["mzML_referenceableParamGroupList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmzML_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroupList.mzML_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmzML_IdNull() {
                this[this.tablereferenceableParamGroupList.mzML_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRow[] GetreferenceableParamGroupRows() {
                if ((this.Table.ChildRelations["referenceableParamGroupList_referenceableParamGroup"] == null)) {
                    return new referenceableParamGroupRow[0];
                }
                else {
                    return ((referenceableParamGroupRow[])(base.GetChildRows(this.Table.ChildRelations["referenceableParamGroupList_referenceableParamGroup"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class referenceableParamGroupRow : global::System.Data.DataRow {
            
            private referenceableParamGroupDataTable tablereferenceableParamGroup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal referenceableParamGroupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablereferenceableParamGroup = ((referenceableParamGroupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tablereferenceableParamGroup.idColumn]));
                }
                set {
                    this[this.tablereferenceableParamGroup.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int referenceableParamGroup_Id {
                get {
                    return ((int)(this[this.tablereferenceableParamGroup.referenceableParamGroup_IdColumn]));
                }
                set {
                    this[this.tablereferenceableParamGroup.referenceableParamGroup_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int referenceableParamGroupList_Id {
                get {
                    try {
                        return ((int)(this[this.tablereferenceableParamGroup.referenceableParamGroupList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'referenceableParamGroupList_Id\' in table \'referenceablePara" +
                                "mGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablereferenceableParamGroup.referenceableParamGroupList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupListRow referenceableParamGroupListRow {
                get {
                    return ((referenceableParamGroupListRow)(this.GetParentRow(this.Table.ParentRelations["referenceableParamGroupList_referenceableParamGroup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["referenceableParamGroupList_referenceableParamGroup"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreferenceableParamGroupList_IdNull() {
                return this.IsNull(this.tablereferenceableParamGroup.referenceableParamGroupList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreferenceableParamGroupList_IdNull() {
                this[this.tablereferenceableParamGroup.referenceableParamGroupList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["referenceableParamGroup_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["referenceableParamGroup_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["referenceableParamGroup_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["referenceableParamGroup_userParam"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class sampleListRow : global::System.Data.DataRow {
            
            private sampleListDataTable tablesampleList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sampleListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesampleList = ((sampleListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong count {
                get {
                    return ((ulong)(this[this.tablesampleList.countColumn]));
                }
                set {
                    this[this.tablesampleList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sampleList_Id {
                get {
                    return ((int)(this[this.tablesampleList.sampleList_IdColumn]));
                }
                set {
                    this[this.tablesampleList.sampleList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int mzML_Id {
                get {
                    try {
                        return ((int)(this[this.tablesampleList.mzML_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mzML_Id\' in table \'sampleList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesampleList.mzML_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mzMLRow mzMLRow {
                get {
                    return ((mzMLRow)(this.GetParentRow(this.Table.ParentRelations["mzML_sampleList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["mzML_sampleList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmzML_IdNull() {
                return this.IsNull(this.tablesampleList.mzML_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmzML_IdNull() {
                this[this.tablesampleList.mzML_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sampleRow[] GetsampleRows() {
                if ((this.Table.ChildRelations["sampleList_sample"] == null)) {
                    return new sampleRow[0];
                }
                else {
                    return ((sampleRow[])(base.GetChildRows(this.Table.ChildRelations["sampleList_sample"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class sampleRow : global::System.Data.DataRow {
            
            private sampleDataTable tablesample;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sampleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesample = ((sampleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tablesample.idColumn]));
                }
                set {
                    this[this.tablesample.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablesample.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'sample\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesample.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sample_Id {
                get {
                    return ((int)(this[this.tablesample.sample_IdColumn]));
                }
                set {
                    this[this.tablesample.sample_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sampleList_Id {
                get {
                    try {
                        return ((int)(this[this.tablesample.sampleList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sampleList_Id\' in table \'sample\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesample.sampleList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sampleListRow sampleListRow {
                get {
                    return ((sampleListRow)(this.GetParentRow(this.Table.ParentRelations["sampleList_sample"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["sampleList_sample"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tablesample.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tablesample.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssampleList_IdNull() {
                return this.IsNull(this.tablesample.sampleList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsampleList_IdNull() {
                this[this.tablesample.sampleList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["sample_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["sample_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["sample_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["sample_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["sample_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["sample_userParam"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class softwareListRow : global::System.Data.DataRow {
            
            private softwareListDataTable tablesoftwareList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal softwareListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesoftwareList = ((softwareListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong count {
                get {
                    return ((ulong)(this[this.tablesoftwareList.countColumn]));
                }
                set {
                    this[this.tablesoftwareList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int softwareList_Id {
                get {
                    return ((int)(this[this.tablesoftwareList.softwareList_IdColumn]));
                }
                set {
                    this[this.tablesoftwareList.softwareList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int mzML_Id {
                get {
                    try {
                        return ((int)(this[this.tablesoftwareList.mzML_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mzML_Id\' in table \'softwareList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesoftwareList.mzML_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mzMLRow mzMLRow {
                get {
                    return ((mzMLRow)(this.GetParentRow(this.Table.ParentRelations["mzML_softwareList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["mzML_softwareList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmzML_IdNull() {
                return this.IsNull(this.tablesoftwareList.mzML_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmzML_IdNull() {
                this[this.tablesoftwareList.mzML_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareRow[] GetsoftwareRows() {
                if ((this.Table.ChildRelations["softwareList_software"] == null)) {
                    return new softwareRow[0];
                }
                else {
                    return ((softwareRow[])(base.GetChildRows(this.Table.ChildRelations["softwareList_software"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class softwareRow : global::System.Data.DataRow {
            
            private softwareDataTable tablesoftware;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal softwareRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesoftware = ((softwareDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tablesoftware.idColumn]));
                }
                set {
                    this[this.tablesoftware.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string version {
                get {
                    return ((string)(this[this.tablesoftware.versionColumn]));
                }
                set {
                    this[this.tablesoftware.versionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int software_Id {
                get {
                    return ((int)(this[this.tablesoftware.software_IdColumn]));
                }
                set {
                    this[this.tablesoftware.software_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int softwareList_Id {
                get {
                    try {
                        return ((int)(this[this.tablesoftware.softwareList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'softwareList_Id\' in table \'software\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesoftware.softwareList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareListRow softwareListRow {
                get {
                    return ((softwareListRow)(this.GetParentRow(this.Table.ParentRelations["softwareList_software"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["softwareList_software"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssoftwareList_IdNull() {
                return this.IsNull(this.tablesoftware.softwareList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsoftwareList_IdNull() {
                this[this.tablesoftware.softwareList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["software_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["software_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["software_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["software_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["software_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["software_userParam"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class scanSettingsListRow : global::System.Data.DataRow {
            
            private scanSettingsListDataTable tablescanSettingsList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scanSettingsListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablescanSettingsList = ((scanSettingsListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong count {
                get {
                    return ((ulong)(this[this.tablescanSettingsList.countColumn]));
                }
                set {
                    this[this.tablescanSettingsList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scanSettingsList_Id {
                get {
                    return ((int)(this[this.tablescanSettingsList.scanSettingsList_IdColumn]));
                }
                set {
                    this[this.tablescanSettingsList.scanSettingsList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int mzML_Id {
                get {
                    try {
                        return ((int)(this[this.tablescanSettingsList.mzML_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mzML_Id\' in table \'scanSettingsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescanSettingsList.mzML_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mzMLRow mzMLRow {
                get {
                    return ((mzMLRow)(this.GetParentRow(this.Table.ParentRelations["mzML_scanSettingsList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["mzML_scanSettingsList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmzML_IdNull() {
                return this.IsNull(this.tablescanSettingsList.mzML_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmzML_IdNull() {
                this[this.tablescanSettingsList.mzML_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanSettingsRow[] GetscanSettingsRows() {
                if ((this.Table.ChildRelations["scanSettingsList_scanSettings"] == null)) {
                    return new scanSettingsRow[0];
                }
                else {
                    return ((scanSettingsRow[])(base.GetChildRows(this.Table.ChildRelations["scanSettingsList_scanSettings"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class scanSettingsRow : global::System.Data.DataRow {
            
            private scanSettingsDataTable tablescanSettings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scanSettingsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablescanSettings = ((scanSettingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tablescanSettings.idColumn]));
                }
                set {
                    this[this.tablescanSettings.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scanSettings_Id {
                get {
                    return ((int)(this[this.tablescanSettings.scanSettings_IdColumn]));
                }
                set {
                    this[this.tablescanSettings.scanSettings_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scanSettingsList_Id {
                get {
                    try {
                        return ((int)(this[this.tablescanSettings.scanSettingsList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scanSettingsList_Id\' in table \'scanSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescanSettings.scanSettingsList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanSettingsListRow scanSettingsListRow {
                get {
                    return ((scanSettingsListRow)(this.GetParentRow(this.Table.ParentRelations["scanSettingsList_scanSettings"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scanSettingsList_scanSettings"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscanSettingsList_IdNull() {
                return this.IsNull(this.tablescanSettings.scanSettingsList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscanSettingsList_IdNull() {
                this[this.tablescanSettings.scanSettingsList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["scanSettings_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["scanSettings_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["scanSettings_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["scanSettings_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["scanSettings_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["scanSettings_userParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRefListRow[] GetsourceFileRefListRows() {
                if ((this.Table.ChildRelations["scanSettings_sourceFileRefList"] == null)) {
                    return new sourceFileRefListRow[0];
                }
                else {
                    return ((sourceFileRefListRow[])(base.GetChildRows(this.Table.ChildRelations["scanSettings_sourceFileRefList"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public targetListRow[] GettargetListRows() {
                if ((this.Table.ChildRelations["scanSettings_targetList"] == null)) {
                    return new targetListRow[0];
                }
                else {
                    return ((targetListRow[])(base.GetChildRows(this.Table.ChildRelations["scanSettings_targetList"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class sourceFileRefListRow : global::System.Data.DataRow {
            
            private sourceFileRefListDataTable tablesourceFileRefList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sourceFileRefListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesourceFileRefList = ((sourceFileRefListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong count {
                get {
                    return ((ulong)(this[this.tablesourceFileRefList.countColumn]));
                }
                set {
                    this[this.tablesourceFileRefList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sourceFileRefList_Id {
                get {
                    return ((int)(this[this.tablesourceFileRefList.sourceFileRefList_IdColumn]));
                }
                set {
                    this[this.tablesourceFileRefList.sourceFileRefList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scanSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tablesourceFileRefList.scanSettings_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scanSettings_Id\' in table \'sourceFileRefList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesourceFileRefList.scanSettings_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanSettingsRow scanSettingsRow {
                get {
                    return ((scanSettingsRow)(this.GetParentRow(this.Table.ParentRelations["scanSettings_sourceFileRefList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scanSettings_sourceFileRefList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscanSettings_IdNull() {
                return this.IsNull(this.tablesourceFileRefList.scanSettings_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscanSettings_IdNull() {
                this[this.tablesourceFileRefList.scanSettings_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRefRow[] GetsourceFileRefRows() {
                if ((this.Table.ChildRelations["sourceFileRefList_sourceFileRef"] == null)) {
                    return new sourceFileRefRow[0];
                }
                else {
                    return ((sourceFileRefRow[])(base.GetChildRows(this.Table.ChildRelations["sourceFileRefList_sourceFileRef"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class sourceFileRefRow : global::System.Data.DataRow {
            
            private sourceFileRefDataTable tablesourceFileRef;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sourceFileRefRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesourceFileRef = ((sourceFileRefDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _ref {
                get {
                    return ((string)(this[this.tablesourceFileRef._refColumn]));
                }
                set {
                    this[this.tablesourceFileRef._refColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sourceFileRefList_Id {
                get {
                    try {
                        return ((int)(this[this.tablesourceFileRef.sourceFileRefList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sourceFileRefList_Id\' in table \'sourceFileRef\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesourceFileRef.sourceFileRefList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRefListRow sourceFileRefListRow {
                get {
                    return ((sourceFileRefListRow)(this.GetParentRow(this.Table.ParentRelations["sourceFileRefList_sourceFileRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["sourceFileRefList_sourceFileRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssourceFileRefList_IdNull() {
                return this.IsNull(this.tablesourceFileRef.sourceFileRefList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsourceFileRefList_IdNull() {
                this[this.tablesourceFileRef.sourceFileRefList_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class targetListRow : global::System.Data.DataRow {
            
            private targetListDataTable tabletargetList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal targetListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletargetList = ((targetListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong count {
                get {
                    return ((ulong)(this[this.tabletargetList.countColumn]));
                }
                set {
                    this[this.tabletargetList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int targetList_Id {
                get {
                    return ((int)(this[this.tabletargetList.targetList_IdColumn]));
                }
                set {
                    this[this.tabletargetList.targetList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scanSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tabletargetList.scanSettings_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scanSettings_Id\' in table \'targetList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletargetList.scanSettings_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanSettingsRow scanSettingsRow {
                get {
                    return ((scanSettingsRow)(this.GetParentRow(this.Table.ParentRelations["scanSettings_targetList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scanSettings_targetList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscanSettings_IdNull() {
                return this.IsNull(this.tabletargetList.scanSettings_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscanSettings_IdNull() {
                this[this.tabletargetList.scanSettings_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public targetRow[] GettargetRows() {
                if ((this.Table.ChildRelations["targetList_target"] == null)) {
                    return new targetRow[0];
                }
                else {
                    return ((targetRow[])(base.GetChildRows(this.Table.ChildRelations["targetList_target"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class targetRow : global::System.Data.DataRow {
            
            private targetDataTable tabletarget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal targetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletarget = ((targetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int target_Id {
                get {
                    return ((int)(this[this.tabletarget.target_IdColumn]));
                }
                set {
                    this[this.tabletarget.target_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int targetList_Id {
                get {
                    try {
                        return ((int)(this[this.tabletarget.targetList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'targetList_Id\' in table \'target\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletarget.targetList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public targetListRow targetListRow {
                get {
                    return ((targetListRow)(this.GetParentRow(this.Table.ParentRelations["targetList_target"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["targetList_target"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstargetList_IdNull() {
                return this.IsNull(this.tabletarget.targetList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettargetList_IdNull() {
                this[this.tabletarget.targetList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["target_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["target_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["target_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["target_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["target_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["target_userParam"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class instrumentConfigurationListRow : global::System.Data.DataRow {
            
            private instrumentConfigurationListDataTable tableinstrumentConfigurationList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal instrumentConfigurationListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableinstrumentConfigurationList = ((instrumentConfigurationListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong count {
                get {
                    return ((ulong)(this[this.tableinstrumentConfigurationList.countColumn]));
                }
                set {
                    this[this.tableinstrumentConfigurationList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int instrumentConfigurationList_Id {
                get {
                    return ((int)(this[this.tableinstrumentConfigurationList.instrumentConfigurationList_IdColumn]));
                }
                set {
                    this[this.tableinstrumentConfigurationList.instrumentConfigurationList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int mzML_Id {
                get {
                    try {
                        return ((int)(this[this.tableinstrumentConfigurationList.mzML_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mzML_Id\' in table \'instrumentConfigurationList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinstrumentConfigurationList.mzML_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mzMLRow mzMLRow {
                get {
                    return ((mzMLRow)(this.GetParentRow(this.Table.ParentRelations["mzML_instrumentConfigurationList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["mzML_instrumentConfigurationList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmzML_IdNull() {
                return this.IsNull(this.tableinstrumentConfigurationList.mzML_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmzML_IdNull() {
                this[this.tableinstrumentConfigurationList.mzML_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentConfigurationRow[] GetinstrumentConfigurationRows() {
                if ((this.Table.ChildRelations["instrumentConfigurationList_instrumentConfiguration"] == null)) {
                    return new instrumentConfigurationRow[0];
                }
                else {
                    return ((instrumentConfigurationRow[])(base.GetChildRows(this.Table.ChildRelations["instrumentConfigurationList_instrumentConfiguration"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class instrumentConfigurationRow : global::System.Data.DataRow {
            
            private instrumentConfigurationDataTable tableinstrumentConfiguration;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal instrumentConfigurationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableinstrumentConfiguration = ((instrumentConfigurationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tableinstrumentConfiguration.idColumn]));
                }
                set {
                    this[this.tableinstrumentConfiguration.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string scanSettingsRef {
                get {
                    try {
                        return ((string)(this[this.tableinstrumentConfiguration.scanSettingsRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scanSettingsRef\' in table \'instrumentConfiguration\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableinstrumentConfiguration.scanSettingsRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int instrumentConfiguration_Id {
                get {
                    return ((int)(this[this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn]));
                }
                set {
                    this[this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int instrumentConfigurationList_Id {
                get {
                    try {
                        return ((int)(this[this.tableinstrumentConfiguration.instrumentConfigurationList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'instrumentConfigurationList_Id\' in table \'instrumentConfigu" +
                                "ration\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinstrumentConfiguration.instrumentConfigurationList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentConfigurationListRow instrumentConfigurationListRow {
                get {
                    return ((instrumentConfigurationListRow)(this.GetParentRow(this.Table.ParentRelations["instrumentConfigurationList_instrumentConfiguration"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["instrumentConfigurationList_instrumentConfiguration"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscanSettingsRefNull() {
                return this.IsNull(this.tableinstrumentConfiguration.scanSettingsRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscanSettingsRefNull() {
                this[this.tableinstrumentConfiguration.scanSettingsRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinstrumentConfigurationList_IdNull() {
                return this.IsNull(this.tableinstrumentConfiguration.instrumentConfigurationList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinstrumentConfigurationList_IdNull() {
                this[this.tableinstrumentConfiguration.instrumentConfigurationList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["instrumentConfiguration_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["instrumentConfiguration_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["instrumentConfiguration_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["instrumentConfiguration_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["instrumentConfiguration_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["instrumentConfiguration_userParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public componentListRow[] GetcomponentListRows() {
                if ((this.Table.ChildRelations["instrumentConfiguration_componentList"] == null)) {
                    return new componentListRow[0];
                }
                else {
                    return ((componentListRow[])(base.GetChildRows(this.Table.ChildRelations["instrumentConfiguration_componentList"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareRefRow[] GetsoftwareRefRows() {
                if ((this.Table.ChildRelations["instrumentConfiguration_softwareRef"] == null)) {
                    return new softwareRefRow[0];
                }
                else {
                    return ((softwareRefRow[])(base.GetChildRows(this.Table.ChildRelations["instrumentConfiguration_softwareRef"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class componentListRow : global::System.Data.DataRow {
            
            private componentListDataTable tablecomponentList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal componentListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecomponentList = ((componentListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong count {
                get {
                    return ((ulong)(this[this.tablecomponentList.countColumn]));
                }
                set {
                    this[this.tablecomponentList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int componentList_Id {
                get {
                    return ((int)(this[this.tablecomponentList.componentList_IdColumn]));
                }
                set {
                    this[this.tablecomponentList.componentList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int instrumentConfiguration_Id {
                get {
                    try {
                        return ((int)(this[this.tablecomponentList.instrumentConfiguration_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'instrumentConfiguration_Id\' in table \'componentList\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablecomponentList.instrumentConfiguration_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentConfigurationRow instrumentConfigurationRow {
                get {
                    return ((instrumentConfigurationRow)(this.GetParentRow(this.Table.ParentRelations["instrumentConfiguration_componentList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["instrumentConfiguration_componentList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinstrumentConfiguration_IdNull() {
                return this.IsNull(this.tablecomponentList.instrumentConfiguration_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinstrumentConfiguration_IdNull() {
                this[this.tablecomponentList.instrumentConfiguration_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceRow[] GetsourceRows() {
                if ((this.Table.ChildRelations["componentList_source"] == null)) {
                    return new sourceRow[0];
                }
                else {
                    return ((sourceRow[])(base.GetChildRows(this.Table.ChildRelations["componentList_source"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public analyzerRow[] GetanalyzerRows() {
                if ((this.Table.ChildRelations["componentList_analyzer"] == null)) {
                    return new analyzerRow[0];
                }
                else {
                    return ((analyzerRow[])(base.GetChildRows(this.Table.ChildRelations["componentList_analyzer"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detectorRow[] GetdetectorRows() {
                if ((this.Table.ChildRelations["componentList_detector"] == null)) {
                    return new detectorRow[0];
                }
                else {
                    return ((detectorRow[])(base.GetChildRows(this.Table.ChildRelations["componentList_detector"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class sourceRow : global::System.Data.DataRow {
            
            private sourceDataTable tablesource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesource = ((sourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int order {
                get {
                    return ((int)(this[this.tablesource.orderColumn]));
                }
                set {
                    this[this.tablesource.orderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int source_Id {
                get {
                    return ((int)(this[this.tablesource.source_IdColumn]));
                }
                set {
                    this[this.tablesource.source_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int componentList_Id {
                get {
                    try {
                        return ((int)(this[this.tablesource.componentList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'componentList_Id\' in table \'source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesource.componentList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public componentListRow componentListRow {
                get {
                    return ((componentListRow)(this.GetParentRow(this.Table.ParentRelations["componentList_source"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["componentList_source"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscomponentList_IdNull() {
                return this.IsNull(this.tablesource.componentList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcomponentList_IdNull() {
                this[this.tablesource.componentList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["source_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["source_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["source_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["source_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["source_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["source_userParam"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class analyzerRow : global::System.Data.DataRow {
            
            private analyzerDataTable tableanalyzer;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal analyzerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableanalyzer = ((analyzerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int order {
                get {
                    return ((int)(this[this.tableanalyzer.orderColumn]));
                }
                set {
                    this[this.tableanalyzer.orderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int analyzer_Id {
                get {
                    return ((int)(this[this.tableanalyzer.analyzer_IdColumn]));
                }
                set {
                    this[this.tableanalyzer.analyzer_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int componentList_Id {
                get {
                    try {
                        return ((int)(this[this.tableanalyzer.componentList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'componentList_Id\' in table \'analyzer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableanalyzer.componentList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public componentListRow componentListRow {
                get {
                    return ((componentListRow)(this.GetParentRow(this.Table.ParentRelations["componentList_analyzer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["componentList_analyzer"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscomponentList_IdNull() {
                return this.IsNull(this.tableanalyzer.componentList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcomponentList_IdNull() {
                this[this.tableanalyzer.componentList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["analyzer_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["analyzer_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["analyzer_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["analyzer_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["analyzer_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["analyzer_userParam"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class detectorRow : global::System.Data.DataRow {
            
            private detectorDataTable tabledetector;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal detectorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledetector = ((detectorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int order {
                get {
                    return ((int)(this[this.tabledetector.orderColumn]));
                }
                set {
                    this[this.tabledetector.orderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int detector_Id {
                get {
                    return ((int)(this[this.tabledetector.detector_IdColumn]));
                }
                set {
                    this[this.tabledetector.detector_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int componentList_Id {
                get {
                    try {
                        return ((int)(this[this.tabledetector.componentList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'componentList_Id\' in table \'detector\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledetector.componentList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public componentListRow componentListRow {
                get {
                    return ((componentListRow)(this.GetParentRow(this.Table.ParentRelations["componentList_detector"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["componentList_detector"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscomponentList_IdNull() {
                return this.IsNull(this.tabledetector.componentList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcomponentList_IdNull() {
                this[this.tabledetector.componentList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["detector_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["detector_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["detector_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["detector_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["detector_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["detector_userParam"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class softwareRefRow : global::System.Data.DataRow {
            
            private softwareRefDataTable tablesoftwareRef;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal softwareRefRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesoftwareRef = ((softwareRefDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _ref {
                get {
                    return ((string)(this[this.tablesoftwareRef._refColumn]));
                }
                set {
                    this[this.tablesoftwareRef._refColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int instrumentConfiguration_Id {
                get {
                    try {
                        return ((int)(this[this.tablesoftwareRef.instrumentConfiguration_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'instrumentConfiguration_Id\' in table \'softwareRef\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablesoftwareRef.instrumentConfiguration_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentConfigurationRow instrumentConfigurationRow {
                get {
                    return ((instrumentConfigurationRow)(this.GetParentRow(this.Table.ParentRelations["instrumentConfiguration_softwareRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["instrumentConfiguration_softwareRef"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinstrumentConfiguration_IdNull() {
                return this.IsNull(this.tablesoftwareRef.instrumentConfiguration_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinstrumentConfiguration_IdNull() {
                this[this.tablesoftwareRef.instrumentConfiguration_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dataProcessingListRow : global::System.Data.DataRow {
            
            private dataProcessingListDataTable tabledataProcessingList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dataProcessingListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledataProcessingList = ((dataProcessingListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong count {
                get {
                    return ((ulong)(this[this.tabledataProcessingList.countColumn]));
                }
                set {
                    this[this.tabledataProcessingList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dataProcessingList_Id {
                get {
                    return ((int)(this[this.tabledataProcessingList.dataProcessingList_IdColumn]));
                }
                set {
                    this[this.tabledataProcessingList.dataProcessingList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int mzML_Id {
                get {
                    try {
                        return ((int)(this[this.tabledataProcessingList.mzML_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mzML_Id\' in table \'dataProcessingList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataProcessingList.mzML_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mzMLRow mzMLRow {
                get {
                    return ((mzMLRow)(this.GetParentRow(this.Table.ParentRelations["mzML_dataProcessingList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["mzML_dataProcessingList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmzML_IdNull() {
                return this.IsNull(this.tabledataProcessingList.mzML_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmzML_IdNull() {
                this[this.tabledataProcessingList.mzML_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataProcessingRow[] GetdataProcessingRows() {
                if ((this.Table.ChildRelations["dataProcessingList_dataProcessing"] == null)) {
                    return new dataProcessingRow[0];
                }
                else {
                    return ((dataProcessingRow[])(base.GetChildRows(this.Table.ChildRelations["dataProcessingList_dataProcessing"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dataProcessingRow : global::System.Data.DataRow {
            
            private dataProcessingDataTable tabledataProcessing;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dataProcessingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledataProcessing = ((dataProcessingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tabledataProcessing.idColumn]));
                }
                set {
                    this[this.tabledataProcessing.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dataProcessing_Id {
                get {
                    return ((int)(this[this.tabledataProcessing.dataProcessing_IdColumn]));
                }
                set {
                    this[this.tabledataProcessing.dataProcessing_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dataProcessingList_Id {
                get {
                    try {
                        return ((int)(this[this.tabledataProcessing.dataProcessingList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataProcessingList_Id\' in table \'dataProcessing\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tabledataProcessing.dataProcessingList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataProcessingListRow dataProcessingListRow {
                get {
                    return ((dataProcessingListRow)(this.GetParentRow(this.Table.ParentRelations["dataProcessingList_dataProcessing"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["dataProcessingList_dataProcessing"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataProcessingList_IdNull() {
                return this.IsNull(this.tabledataProcessing.dataProcessingList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataProcessingList_IdNull() {
                this[this.tabledataProcessing.dataProcessingList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public processingMethodRow[] GetprocessingMethodRows() {
                if ((this.Table.ChildRelations["dataProcessing_processingMethod"] == null)) {
                    return new processingMethodRow[0];
                }
                else {
                    return ((processingMethodRow[])(base.GetChildRows(this.Table.ChildRelations["dataProcessing_processingMethod"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class processingMethodRow : global::System.Data.DataRow {
            
            private processingMethodDataTable tableprocessingMethod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal processingMethodRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableprocessingMethod = ((processingMethodDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong order {
                get {
                    return ((ulong)(this[this.tableprocessingMethod.orderColumn]));
                }
                set {
                    this[this.tableprocessingMethod.orderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string softwareRef {
                get {
                    return ((string)(this[this.tableprocessingMethod.softwareRefColumn]));
                }
                set {
                    this[this.tableprocessingMethod.softwareRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int processingMethod_Id {
                get {
                    return ((int)(this[this.tableprocessingMethod.processingMethod_IdColumn]));
                }
                set {
                    this[this.tableprocessingMethod.processingMethod_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dataProcessing_Id {
                get {
                    try {
                        return ((int)(this[this.tableprocessingMethod.dataProcessing_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataProcessing_Id\' in table \'processingMethod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprocessingMethod.dataProcessing_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataProcessingRow dataProcessingRow {
                get {
                    return ((dataProcessingRow)(this.GetParentRow(this.Table.ParentRelations["dataProcessing_processingMethod"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["dataProcessing_processingMethod"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataProcessing_IdNull() {
                return this.IsNull(this.tableprocessingMethod.dataProcessing_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataProcessing_IdNull() {
                this[this.tableprocessingMethod.dataProcessing_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["processingMethod_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["processingMethod_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["processingMethod_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["processingMethod_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["processingMethod_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["processingMethod_userParam"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class runRow : global::System.Data.DataRow {
            
            private runDataTable tablerun;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal runRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerun = ((runDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tablerun.idColumn]));
                }
                set {
                    this[this.tablerun.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string defaultInstrumentConfigurationRef {
                get {
                    return ((string)(this[this.tablerun.defaultInstrumentConfigurationRefColumn]));
                }
                set {
                    this[this.tablerun.defaultInstrumentConfigurationRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string defaultSourceFileRef {
                get {
                    try {
                        return ((string)(this[this.tablerun.defaultSourceFileRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'defaultSourceFileRef\' in table \'run\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerun.defaultSourceFileRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sampleRef {
                get {
                    try {
                        return ((string)(this[this.tablerun.sampleRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sampleRef\' in table \'run\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerun.sampleRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime startTimeStamp {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablerun.startTimeStampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'startTimeStamp\' in table \'run\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerun.startTimeStampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int run_Id {
                get {
                    return ((int)(this[this.tablerun.run_IdColumn]));
                }
                set {
                    this[this.tablerun.run_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int mzML_Id {
                get {
                    try {
                        return ((int)(this[this.tablerun.mzML_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mzML_Id\' in table \'run\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerun.mzML_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mzMLRow mzMLRow {
                get {
                    return ((mzMLRow)(this.GetParentRow(this.Table.ParentRelations["mzML_run"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["mzML_run"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdefaultSourceFileRefNull() {
                return this.IsNull(this.tablerun.defaultSourceFileRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdefaultSourceFileRefNull() {
                this[this.tablerun.defaultSourceFileRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssampleRefNull() {
                return this.IsNull(this.tablerun.sampleRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsampleRefNull() {
                this[this.tablerun.sampleRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstartTimeStampNull() {
                return this.IsNull(this.tablerun.startTimeStampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstartTimeStampNull() {
                this[this.tablerun.startTimeStampColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmzML_IdNull() {
                return this.IsNull(this.tablerun.mzML_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmzML_IdNull() {
                this[this.tablerun.mzML_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["run_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["run_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["run_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["run_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["run_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["run_userParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumListRow[] GetspectrumListRows() {
                if ((this.Table.ChildRelations["run_spectrumList"] == null)) {
                    return new spectrumListRow[0];
                }
                else {
                    return ((spectrumListRow[])(base.GetChildRows(this.Table.ChildRelations["run_spectrumList"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramListRow[] GetchromatogramListRows() {
                if ((this.Table.ChildRelations["run_chromatogramList"] == null)) {
                    return new chromatogramListRow[0];
                }
                else {
                    return ((chromatogramListRow[])(base.GetChildRows(this.Table.ChildRelations["run_chromatogramList"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class spectrumListRow : global::System.Data.DataRow {
            
            private spectrumListDataTable tablespectrumList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal spectrumListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablespectrumList = ((spectrumListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong count {
                get {
                    return ((ulong)(this[this.tablespectrumList.countColumn]));
                }
                set {
                    this[this.tablespectrumList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string defaultDataProcessingRef {
                get {
                    return ((string)(this[this.tablespectrumList.defaultDataProcessingRefColumn]));
                }
                set {
                    this[this.tablespectrumList.defaultDataProcessingRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spectrumList_Id {
                get {
                    return ((int)(this[this.tablespectrumList.spectrumList_IdColumn]));
                }
                set {
                    this[this.tablespectrumList.spectrumList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int run_Id {
                get {
                    try {
                        return ((int)(this[this.tablespectrumList.run_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'run_Id\' in table \'spectrumList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespectrumList.run_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public runRow runRow {
                get {
                    return ((runRow)(this.GetParentRow(this.Table.ParentRelations["run_spectrumList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["run_spectrumList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrun_IdNull() {
                return this.IsNull(this.tablespectrumList.run_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrun_IdNull() {
                this[this.tablespectrumList.run_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumRow[] GetspectrumRows() {
                if ((this.Table.ChildRelations["spectrumList_spectrum"] == null)) {
                    return new spectrumRow[0];
                }
                else {
                    return ((spectrumRow[])(base.GetChildRows(this.Table.ChildRelations["spectrumList_spectrum"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class spectrumRow : global::System.Data.DataRow {
            
            private spectrumDataTable tablespectrum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal spectrumRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablespectrum = ((spectrumDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tablespectrum.idColumn]));
                }
                set {
                    this[this.tablespectrum.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string spotID {
                get {
                    try {
                        return ((string)(this[this.tablespectrum.spotIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'spotID\' in table \'spectrum\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespectrum.spotIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong index {
                get {
                    return ((ulong)(this[this.tablespectrum.indexColumn]));
                }
                set {
                    this[this.tablespectrum.indexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int defaultArrayLength {
                get {
                    return ((int)(this[this.tablespectrum.defaultArrayLengthColumn]));
                }
                set {
                    this[this.tablespectrum.defaultArrayLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataProcessingRef {
                get {
                    try {
                        return ((string)(this[this.tablespectrum.dataProcessingRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataProcessingRef\' in table \'spectrum\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespectrum.dataProcessingRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sourceFileRef {
                get {
                    try {
                        return ((string)(this[this.tablespectrum.sourceFileRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sourceFileRef\' in table \'spectrum\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespectrum.sourceFileRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spectrum_Id {
                get {
                    return ((int)(this[this.tablespectrum.spectrum_IdColumn]));
                }
                set {
                    this[this.tablespectrum.spectrum_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spectrumList_Id {
                get {
                    try {
                        return ((int)(this[this.tablespectrum.spectrumList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'spectrumList_Id\' in table \'spectrum\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespectrum.spectrumList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumListRow spectrumListRow {
                get {
                    return ((spectrumListRow)(this.GetParentRow(this.Table.ParentRelations["spectrumList_spectrum"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["spectrumList_spectrum"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsspotIDNull() {
                return this.IsNull(this.tablespectrum.spotIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetspotIDNull() {
                this[this.tablespectrum.spotIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataProcessingRefNull() {
                return this.IsNull(this.tablespectrum.dataProcessingRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataProcessingRefNull() {
                this[this.tablespectrum.dataProcessingRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssourceFileRefNull() {
                return this.IsNull(this.tablespectrum.sourceFileRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsourceFileRefNull() {
                this[this.tablespectrum.sourceFileRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsspectrumList_IdNull() {
                return this.IsNull(this.tablespectrum.spectrumList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetspectrumList_IdNull() {
                this[this.tablespectrum.spectrumList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["spectrum_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["spectrum_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["spectrum_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["spectrum_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["spectrum_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["spectrum_userParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanListRow[] GetscanListRows() {
                if ((this.Table.ChildRelations["spectrum_scanList"] == null)) {
                    return new scanListRow[0];
                }
                else {
                    return ((scanListRow[])(base.GetChildRows(this.Table.ChildRelations["spectrum_scanList"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public precursorListRow[] GetprecursorListRows() {
                if ((this.Table.ChildRelations["spectrum_precursorList"] == null)) {
                    return new precursorListRow[0];
                }
                else {
                    return ((precursorListRow[])(base.GetChildRows(this.Table.ChildRelations["spectrum_precursorList"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productListRow[] GetproductListRows() {
                if ((this.Table.ChildRelations["spectrum_productList"] == null)) {
                    return new productListRow[0];
                }
                else {
                    return ((productListRow[])(base.GetChildRows(this.Table.ChildRelations["spectrum_productList"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public binaryDataArrayListRow[] GetbinaryDataArrayListRows() {
                if ((this.Table.ChildRelations["spectrum_binaryDataArrayList"] == null)) {
                    return new binaryDataArrayListRow[0];
                }
                else {
                    return ((binaryDataArrayListRow[])(base.GetChildRows(this.Table.ChildRelations["spectrum_binaryDataArrayList"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class scanListRow : global::System.Data.DataRow {
            
            private scanListDataTable tablescanList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scanListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablescanList = ((scanListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong count {
                get {
                    return ((ulong)(this[this.tablescanList.countColumn]));
                }
                set {
                    this[this.tablescanList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scanList_Id {
                get {
                    return ((int)(this[this.tablescanList.scanList_IdColumn]));
                }
                set {
                    this[this.tablescanList.scanList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spectrum_Id {
                get {
                    try {
                        return ((int)(this[this.tablescanList.spectrum_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'spectrum_Id\' in table \'scanList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescanList.spectrum_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumRow spectrumRow {
                get {
                    return ((spectrumRow)(this.GetParentRow(this.Table.ParentRelations["spectrum_scanList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["spectrum_scanList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isspectrum_IdNull() {
                return this.IsNull(this.tablescanList.spectrum_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setspectrum_IdNull() {
                this[this.tablescanList.spectrum_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["scanList_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["scanList_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["scanList_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["scanList_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["scanList_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["scanList_userParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanRow[] GetscanRows() {
                if ((this.Table.ChildRelations["scanList_scan"] == null)) {
                    return new scanRow[0];
                }
                else {
                    return ((scanRow[])(base.GetChildRows(this.Table.ChildRelations["scanList_scan"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class scanRow : global::System.Data.DataRow {
            
            private scanDataTable tablescan;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scanRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablescan = ((scanDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string spectrumRef {
                get {
                    try {
                        return ((string)(this[this.tablescan.spectrumRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'spectrumRef\' in table \'scan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescan.spectrumRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sourceFileRef {
                get {
                    try {
                        return ((string)(this[this.tablescan.sourceFileRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sourceFileRef\' in table \'scan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescan.sourceFileRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string externalSpectrumID {
                get {
                    try {
                        return ((string)(this[this.tablescan.externalSpectrumIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'externalSpectrumID\' in table \'scan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescan.externalSpectrumIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string instrumentConfigurationRef {
                get {
                    try {
                        return ((string)(this[this.tablescan.instrumentConfigurationRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'instrumentConfigurationRef\' in table \'scan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescan.instrumentConfigurationRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scan_Id {
                get {
                    return ((int)(this[this.tablescan.scan_IdColumn]));
                }
                set {
                    this[this.tablescan.scan_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scanList_Id {
                get {
                    try {
                        return ((int)(this[this.tablescan.scanList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scanList_Id\' in table \'scan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescan.scanList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanListRow scanListRow {
                get {
                    return ((scanListRow)(this.GetParentRow(this.Table.ParentRelations["scanList_scan"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scanList_scan"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsspectrumRefNull() {
                return this.IsNull(this.tablescan.spectrumRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetspectrumRefNull() {
                this[this.tablescan.spectrumRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssourceFileRefNull() {
                return this.IsNull(this.tablescan.sourceFileRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsourceFileRefNull() {
                this[this.tablescan.sourceFileRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexternalSpectrumIDNull() {
                return this.IsNull(this.tablescan.externalSpectrumIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexternalSpectrumIDNull() {
                this[this.tablescan.externalSpectrumIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinstrumentConfigurationRefNull() {
                return this.IsNull(this.tablescan.instrumentConfigurationRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinstrumentConfigurationRefNull() {
                this[this.tablescan.instrumentConfigurationRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscanList_IdNull() {
                return this.IsNull(this.tablescan.scanList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscanList_IdNull() {
                this[this.tablescan.scanList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["scan_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["scan_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["scan_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["scan_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["scan_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["scan_userParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanWindowListRow[] GetscanWindowListRows() {
                if ((this.Table.ChildRelations["scan_scanWindowList"] == null)) {
                    return new scanWindowListRow[0];
                }
                else {
                    return ((scanWindowListRow[])(base.GetChildRows(this.Table.ChildRelations["scan_scanWindowList"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class scanWindowListRow : global::System.Data.DataRow {
            
            private scanWindowListDataTable tablescanWindowList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scanWindowListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablescanWindowList = ((scanWindowListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int count {
                get {
                    return ((int)(this[this.tablescanWindowList.countColumn]));
                }
                set {
                    this[this.tablescanWindowList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scanWindowList_Id {
                get {
                    return ((int)(this[this.tablescanWindowList.scanWindowList_IdColumn]));
                }
                set {
                    this[this.tablescanWindowList.scanWindowList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scan_Id {
                get {
                    try {
                        return ((int)(this[this.tablescanWindowList.scan_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scan_Id\' in table \'scanWindowList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescanWindowList.scan_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanRow scanRow {
                get {
                    return ((scanRow)(this.GetParentRow(this.Table.ParentRelations["scan_scanWindowList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scan_scanWindowList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isscan_IdNull() {
                return this.IsNull(this.tablescanWindowList.scan_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setscan_IdNull() {
                this[this.tablescanWindowList.scan_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanWindowRow[] GetscanWindowRows() {
                if ((this.Table.ChildRelations["scanWindowList_scanWindow"] == null)) {
                    return new scanWindowRow[0];
                }
                else {
                    return ((scanWindowRow[])(base.GetChildRows(this.Table.ChildRelations["scanWindowList_scanWindow"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class scanWindowRow : global::System.Data.DataRow {
            
            private scanWindowDataTable tablescanWindow;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scanWindowRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablescanWindow = ((scanWindowDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scanWindow_Id {
                get {
                    return ((int)(this[this.tablescanWindow.scanWindow_IdColumn]));
                }
                set {
                    this[this.tablescanWindow.scanWindow_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scanWindowList_Id {
                get {
                    try {
                        return ((int)(this[this.tablescanWindow.scanWindowList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scanWindowList_Id\' in table \'scanWindow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescanWindow.scanWindowList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanWindowListRow scanWindowListRow {
                get {
                    return ((scanWindowListRow)(this.GetParentRow(this.Table.ParentRelations["scanWindowList_scanWindow"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scanWindowList_scanWindow"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscanWindowList_IdNull() {
                return this.IsNull(this.tablescanWindow.scanWindowList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscanWindowList_IdNull() {
                this[this.tablescanWindow.scanWindowList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["scanWindow_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["scanWindow_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["scanWindow_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["scanWindow_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["scanWindow_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["scanWindow_userParam"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class precursorListRow : global::System.Data.DataRow {
            
            private precursorListDataTable tableprecursorList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal precursorListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableprecursorList = ((precursorListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong count {
                get {
                    return ((ulong)(this[this.tableprecursorList.countColumn]));
                }
                set {
                    this[this.tableprecursorList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int precursorList_Id {
                get {
                    return ((int)(this[this.tableprecursorList.precursorList_IdColumn]));
                }
                set {
                    this[this.tableprecursorList.precursorList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spectrum_Id {
                get {
                    try {
                        return ((int)(this[this.tableprecursorList.spectrum_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'spectrum_Id\' in table \'precursorList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprecursorList.spectrum_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumRow spectrumRow {
                get {
                    return ((spectrumRow)(this.GetParentRow(this.Table.ParentRelations["spectrum_precursorList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["spectrum_precursorList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isspectrum_IdNull() {
                return this.IsNull(this.tableprecursorList.spectrum_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setspectrum_IdNull() {
                this[this.tableprecursorList.spectrum_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public precursorRow[] GetprecursorRows() {
                if ((this.Table.ChildRelations["precursorList_precursor"] == null)) {
                    return new precursorRow[0];
                }
                else {
                    return ((precursorRow[])(base.GetChildRows(this.Table.ChildRelations["precursorList_precursor"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class precursorRow : global::System.Data.DataRow {
            
            private precursorDataTable tableprecursor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal precursorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableprecursor = ((precursorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string spectrumRef {
                get {
                    try {
                        return ((string)(this[this.tableprecursor.spectrumRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'spectrumRef\' in table \'precursor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprecursor.spectrumRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sourceFileRef {
                get {
                    try {
                        return ((string)(this[this.tableprecursor.sourceFileRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sourceFileRef\' in table \'precursor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprecursor.sourceFileRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string externalSpectrumID {
                get {
                    try {
                        return ((string)(this[this.tableprecursor.externalSpectrumIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'externalSpectrumID\' in table \'precursor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprecursor.externalSpectrumIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int precursor_Id {
                get {
                    return ((int)(this[this.tableprecursor.precursor_IdColumn]));
                }
                set {
                    this[this.tableprecursor.precursor_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int precursorList_Id {
                get {
                    try {
                        return ((int)(this[this.tableprecursor.precursorList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'precursorList_Id\' in table \'precursor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprecursor.precursorList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int chromatogram_Id {
                get {
                    try {
                        return ((int)(this[this.tableprecursor.chromatogram_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'chromatogram_Id\' in table \'precursor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprecursor.chromatogram_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public precursorListRow precursorListRow {
                get {
                    return ((precursorListRow)(this.GetParentRow(this.Table.ParentRelations["precursorList_precursor"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["precursorList_precursor"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramRow chromatogramRow {
                get {
                    return ((chromatogramRow)(this.GetParentRow(this.Table.ParentRelations["chromatogram_precursor"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["chromatogram_precursor"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsspectrumRefNull() {
                return this.IsNull(this.tableprecursor.spectrumRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetspectrumRefNull() {
                this[this.tableprecursor.spectrumRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssourceFileRefNull() {
                return this.IsNull(this.tableprecursor.sourceFileRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsourceFileRefNull() {
                this[this.tableprecursor.sourceFileRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexternalSpectrumIDNull() {
                return this.IsNull(this.tableprecursor.externalSpectrumIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexternalSpectrumIDNull() {
                this[this.tableprecursor.externalSpectrumIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprecursorList_IdNull() {
                return this.IsNull(this.tableprecursor.precursorList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprecursorList_IdNull() {
                this[this.tableprecursor.precursorList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ischromatogram_IdNull() {
                return this.IsNull(this.tableprecursor.chromatogram_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setchromatogram_IdNull() {
                this[this.tableprecursor.chromatogram_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isolationWindowRow[] GetisolationWindowRows() {
                if ((this.Table.ChildRelations["precursor_isolationWindow"] == null)) {
                    return new isolationWindowRow[0];
                }
                else {
                    return ((isolationWindowRow[])(base.GetChildRows(this.Table.ChildRelations["precursor_isolationWindow"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public selectedIonListRow[] GetselectedIonListRows() {
                if ((this.Table.ChildRelations["precursor_selectedIonList"] == null)) {
                    return new selectedIonListRow[0];
                }
                else {
                    return ((selectedIonListRow[])(base.GetChildRows(this.Table.ChildRelations["precursor_selectedIonList"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public activationRow[] GetactivationRows() {
                if ((this.Table.ChildRelations["precursor_activation"] == null)) {
                    return new activationRow[0];
                }
                else {
                    return ((activationRow[])(base.GetChildRows(this.Table.ChildRelations["precursor_activation"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isolationWindowRow : global::System.Data.DataRow {
            
            private isolationWindowDataTable tableisolationWindow;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isolationWindowRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisolationWindow = ((isolationWindowDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int isolationWindow_Id {
                get {
                    return ((int)(this[this.tableisolationWindow.isolationWindow_IdColumn]));
                }
                set {
                    this[this.tableisolationWindow.isolationWindow_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int precursor_Id {
                get {
                    try {
                        return ((int)(this[this.tableisolationWindow.precursor_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'precursor_Id\' in table \'isolationWindow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisolationWindow.precursor_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int product_Id {
                get {
                    try {
                        return ((int)(this[this.tableisolationWindow.product_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'product_Id\' in table \'isolationWindow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisolationWindow.product_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public precursorRow precursorRow {
                get {
                    return ((precursorRow)(this.GetParentRow(this.Table.ParentRelations["precursor_isolationWindow"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["precursor_isolationWindow"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRow productRow {
                get {
                    return ((productRow)(this.GetParentRow(this.Table.ParentRelations["product_isolationWindow"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["product_isolationWindow"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprecursor_IdNull() {
                return this.IsNull(this.tableisolationWindow.precursor_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprecursor_IdNull() {
                this[this.tableisolationWindow.precursor_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isproduct_IdNull() {
                return this.IsNull(this.tableisolationWindow.product_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setproduct_IdNull() {
                this[this.tableisolationWindow.product_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["isolationWindow_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["isolationWindow_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["isolationWindow_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["isolationWindow_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["isolationWindow_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["isolationWindow_userParam"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class selectedIonListRow : global::System.Data.DataRow {
            
            private selectedIonListDataTable tableselectedIonList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal selectedIonListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableselectedIonList = ((selectedIonListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong count {
                get {
                    return ((ulong)(this[this.tableselectedIonList.countColumn]));
                }
                set {
                    this[this.tableselectedIonList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int selectedIonList_Id {
                get {
                    return ((int)(this[this.tableselectedIonList.selectedIonList_IdColumn]));
                }
                set {
                    this[this.tableselectedIonList.selectedIonList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int precursor_Id {
                get {
                    try {
                        return ((int)(this[this.tableselectedIonList.precursor_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'precursor_Id\' in table \'selectedIonList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableselectedIonList.precursor_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public precursorRow precursorRow {
                get {
                    return ((precursorRow)(this.GetParentRow(this.Table.ParentRelations["precursor_selectedIonList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["precursor_selectedIonList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprecursor_IdNull() {
                return this.IsNull(this.tableselectedIonList.precursor_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprecursor_IdNull() {
                this[this.tableselectedIonList.precursor_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public selectedIonRow[] GetselectedIonRows() {
                if ((this.Table.ChildRelations["selectedIonList_selectedIon"] == null)) {
                    return new selectedIonRow[0];
                }
                else {
                    return ((selectedIonRow[])(base.GetChildRows(this.Table.ChildRelations["selectedIonList_selectedIon"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class selectedIonRow : global::System.Data.DataRow {
            
            private selectedIonDataTable tableselectedIon;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal selectedIonRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableselectedIon = ((selectedIonDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int selectedIon_Id {
                get {
                    return ((int)(this[this.tableselectedIon.selectedIon_IdColumn]));
                }
                set {
                    this[this.tableselectedIon.selectedIon_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int selectedIonList_Id {
                get {
                    try {
                        return ((int)(this[this.tableselectedIon.selectedIonList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'selectedIonList_Id\' in table \'selectedIon\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableselectedIon.selectedIonList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public selectedIonListRow selectedIonListRow {
                get {
                    return ((selectedIonListRow)(this.GetParentRow(this.Table.ParentRelations["selectedIonList_selectedIon"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["selectedIonList_selectedIon"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsselectedIonList_IdNull() {
                return this.IsNull(this.tableselectedIon.selectedIonList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetselectedIonList_IdNull() {
                this[this.tableselectedIon.selectedIonList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["selectedIon_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["selectedIon_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["selectedIon_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["selectedIon_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["selectedIon_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["selectedIon_userParam"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class activationRow : global::System.Data.DataRow {
            
            private activationDataTable tableactivation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal activationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableactivation = ((activationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int activation_Id {
                get {
                    return ((int)(this[this.tableactivation.activation_IdColumn]));
                }
                set {
                    this[this.tableactivation.activation_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int precursor_Id {
                get {
                    try {
                        return ((int)(this[this.tableactivation.precursor_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'precursor_Id\' in table \'activation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableactivation.precursor_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public precursorRow precursorRow {
                get {
                    return ((precursorRow)(this.GetParentRow(this.Table.ParentRelations["precursor_activation"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["precursor_activation"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprecursor_IdNull() {
                return this.IsNull(this.tableactivation.precursor_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprecursor_IdNull() {
                this[this.tableactivation.precursor_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["activation_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["activation_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["activation_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["activation_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["activation_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["activation_userParam"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class productListRow : global::System.Data.DataRow {
            
            private productListDataTable tableproductList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal productListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableproductList = ((productListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong count {
                get {
                    return ((ulong)(this[this.tableproductList.countColumn]));
                }
                set {
                    this[this.tableproductList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int productList_Id {
                get {
                    return ((int)(this[this.tableproductList.productList_IdColumn]));
                }
                set {
                    this[this.tableproductList.productList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spectrum_Id {
                get {
                    try {
                        return ((int)(this[this.tableproductList.spectrum_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'spectrum_Id\' in table \'productList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproductList.spectrum_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumRow spectrumRow {
                get {
                    return ((spectrumRow)(this.GetParentRow(this.Table.ParentRelations["spectrum_productList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["spectrum_productList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isspectrum_IdNull() {
                return this.IsNull(this.tableproductList.spectrum_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setspectrum_IdNull() {
                this[this.tableproductList.spectrum_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRow[] GetproductRows() {
                if ((this.Table.ChildRelations["productList_product"] == null)) {
                    return new productRow[0];
                }
                else {
                    return ((productRow[])(base.GetChildRows(this.Table.ChildRelations["productList_product"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class productRow : global::System.Data.DataRow {
            
            private productDataTable tableproduct;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal productRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableproduct = ((productDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int product_Id {
                get {
                    return ((int)(this[this.tableproduct.product_IdColumn]));
                }
                set {
                    this[this.tableproduct.product_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int productList_Id {
                get {
                    try {
                        return ((int)(this[this.tableproduct.productList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'productList_Id\' in table \'product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct.productList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int chromatogram_Id {
                get {
                    try {
                        return ((int)(this[this.tableproduct.chromatogram_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'chromatogram_Id\' in table \'product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct.chromatogram_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productListRow productListRow {
                get {
                    return ((productListRow)(this.GetParentRow(this.Table.ParentRelations["productList_product"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["productList_product"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramRow chromatogramRow {
                get {
                    return ((chromatogramRow)(this.GetParentRow(this.Table.ParentRelations["chromatogram_product"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["chromatogram_product"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsproductList_IdNull() {
                return this.IsNull(this.tableproduct.productList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetproductList_IdNull() {
                this[this.tableproduct.productList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ischromatogram_IdNull() {
                return this.IsNull(this.tableproduct.chromatogram_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setchromatogram_IdNull() {
                this[this.tableproduct.chromatogram_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isolationWindowRow[] GetisolationWindowRows() {
                if ((this.Table.ChildRelations["product_isolationWindow"] == null)) {
                    return new isolationWindowRow[0];
                }
                else {
                    return ((isolationWindowRow[])(base.GetChildRows(this.Table.ChildRelations["product_isolationWindow"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class binaryDataArrayListRow : global::System.Data.DataRow {
            
            private binaryDataArrayListDataTable tablebinaryDataArrayList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal binaryDataArrayListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablebinaryDataArrayList = ((binaryDataArrayListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong count {
                get {
                    return ((ulong)(this[this.tablebinaryDataArrayList.countColumn]));
                }
                set {
                    this[this.tablebinaryDataArrayList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int binaryDataArrayList_Id {
                get {
                    return ((int)(this[this.tablebinaryDataArrayList.binaryDataArrayList_IdColumn]));
                }
                set {
                    this[this.tablebinaryDataArrayList.binaryDataArrayList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spectrum_Id {
                get {
                    try {
                        return ((int)(this[this.tablebinaryDataArrayList.spectrum_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'spectrum_Id\' in table \'binaryDataArrayList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebinaryDataArrayList.spectrum_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int chromatogram_Id {
                get {
                    try {
                        return ((int)(this[this.tablebinaryDataArrayList.chromatogram_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'chromatogram_Id\' in table \'binaryDataArrayList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebinaryDataArrayList.chromatogram_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumRow spectrumRow {
                get {
                    return ((spectrumRow)(this.GetParentRow(this.Table.ParentRelations["spectrum_binaryDataArrayList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["spectrum_binaryDataArrayList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramRow chromatogramRow {
                get {
                    return ((chromatogramRow)(this.GetParentRow(this.Table.ParentRelations["chromatogram_binaryDataArrayList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["chromatogram_binaryDataArrayList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isspectrum_IdNull() {
                return this.IsNull(this.tablebinaryDataArrayList.spectrum_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setspectrum_IdNull() {
                this[this.tablebinaryDataArrayList.spectrum_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ischromatogram_IdNull() {
                return this.IsNull(this.tablebinaryDataArrayList.chromatogram_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setchromatogram_IdNull() {
                this[this.tablebinaryDataArrayList.chromatogram_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public binaryDataArrayRow[] GetbinaryDataArrayRows() {
                if ((this.Table.ChildRelations["binaryDataArrayList_binaryDataArray"] == null)) {
                    return new binaryDataArrayRow[0];
                }
                else {
                    return ((binaryDataArrayRow[])(base.GetChildRows(this.Table.ChildRelations["binaryDataArrayList_binaryDataArray"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class binaryDataArrayRow : global::System.Data.DataRow {
            
            private binaryDataArrayDataTable tablebinaryDataArray;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal binaryDataArrayRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablebinaryDataArray = ((binaryDataArrayDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong arrayLength {
                get {
                    try {
                        return ((ulong)(this[this.tablebinaryDataArray.arrayLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'arrayLength\' in table \'binaryDataArray\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebinaryDataArray.arrayLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataProcessingRef {
                get {
                    try {
                        return ((string)(this[this.tablebinaryDataArray.dataProcessingRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataProcessingRef\' in table \'binaryDataArray\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebinaryDataArray.dataProcessingRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong encodedLength {
                get {
                    return ((ulong)(this[this.tablebinaryDataArray.encodedLengthColumn]));
                }
                set {
                    this[this.tablebinaryDataArray.encodedLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] binary {
                get {
                    return ((byte[])(this[this.tablebinaryDataArray.binaryColumn]));
                }
                set {
                    this[this.tablebinaryDataArray.binaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int binaryDataArray_Id {
                get {
                    return ((int)(this[this.tablebinaryDataArray.binaryDataArray_IdColumn]));
                }
                set {
                    this[this.tablebinaryDataArray.binaryDataArray_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int binaryDataArrayList_Id {
                get {
                    try {
                        return ((int)(this[this.tablebinaryDataArray.binaryDataArrayList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'binaryDataArrayList_Id\' in table \'binaryDataArray\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablebinaryDataArray.binaryDataArrayList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public binaryDataArrayListRow binaryDataArrayListRow {
                get {
                    return ((binaryDataArrayListRow)(this.GetParentRow(this.Table.ParentRelations["binaryDataArrayList_binaryDataArray"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["binaryDataArrayList_binaryDataArray"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsarrayLengthNull() {
                return this.IsNull(this.tablebinaryDataArray.arrayLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetarrayLengthNull() {
                this[this.tablebinaryDataArray.arrayLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataProcessingRefNull() {
                return this.IsNull(this.tablebinaryDataArray.dataProcessingRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataProcessingRefNull() {
                this[this.tablebinaryDataArray.dataProcessingRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbinaryDataArrayList_IdNull() {
                return this.IsNull(this.tablebinaryDataArray.binaryDataArrayList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbinaryDataArrayList_IdNull() {
                this[this.tablebinaryDataArray.binaryDataArrayList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["binaryDataArray_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["binaryDataArray_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["binaryDataArray_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["binaryDataArray_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["binaryDataArray_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["binaryDataArray_userParam"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class chromatogramListRow : global::System.Data.DataRow {
            
            private chromatogramListDataTable tablechromatogramList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal chromatogramListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablechromatogramList = ((chromatogramListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong count {
                get {
                    return ((ulong)(this[this.tablechromatogramList.countColumn]));
                }
                set {
                    this[this.tablechromatogramList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string defaultDataProcessingRef {
                get {
                    return ((string)(this[this.tablechromatogramList.defaultDataProcessingRefColumn]));
                }
                set {
                    this[this.tablechromatogramList.defaultDataProcessingRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int chromatogramList_Id {
                get {
                    return ((int)(this[this.tablechromatogramList.chromatogramList_IdColumn]));
                }
                set {
                    this[this.tablechromatogramList.chromatogramList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int run_Id {
                get {
                    try {
                        return ((int)(this[this.tablechromatogramList.run_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'run_Id\' in table \'chromatogramList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablechromatogramList.run_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public runRow runRow {
                get {
                    return ((runRow)(this.GetParentRow(this.Table.ParentRelations["run_chromatogramList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["run_chromatogramList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrun_IdNull() {
                return this.IsNull(this.tablechromatogramList.run_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrun_IdNull() {
                this[this.tablechromatogramList.run_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramRow[] GetchromatogramRows() {
                if ((this.Table.ChildRelations["chromatogramList_chromatogram"] == null)) {
                    return new chromatogramRow[0];
                }
                else {
                    return ((chromatogramRow[])(base.GetChildRows(this.Table.ChildRelations["chromatogramList_chromatogram"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class chromatogramRow : global::System.Data.DataRow {
            
            private chromatogramDataTable tablechromatogram;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal chromatogramRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablechromatogram = ((chromatogramDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tablechromatogram.idColumn]));
                }
                set {
                    this[this.tablechromatogram.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong index {
                get {
                    return ((ulong)(this[this.tablechromatogram.indexColumn]));
                }
                set {
                    this[this.tablechromatogram.indexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int defaultArrayLength {
                get {
                    return ((int)(this[this.tablechromatogram.defaultArrayLengthColumn]));
                }
                set {
                    this[this.tablechromatogram.defaultArrayLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataProcessingRef {
                get {
                    try {
                        return ((string)(this[this.tablechromatogram.dataProcessingRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataProcessingRef\' in table \'chromatogram\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablechromatogram.dataProcessingRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int chromatogram_Id {
                get {
                    return ((int)(this[this.tablechromatogram.chromatogram_IdColumn]));
                }
                set {
                    this[this.tablechromatogram.chromatogram_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int chromatogramList_Id {
                get {
                    try {
                        return ((int)(this[this.tablechromatogram.chromatogramList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'chromatogramList_Id\' in table \'chromatogram\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablechromatogram.chromatogramList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramListRow chromatogramListRow {
                get {
                    return ((chromatogramListRow)(this.GetParentRow(this.Table.ParentRelations["chromatogramList_chromatogram"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["chromatogramList_chromatogram"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataProcessingRefNull() {
                return this.IsNull(this.tablechromatogram.dataProcessingRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataProcessingRefNull() {
                this[this.tablechromatogram.dataProcessingRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IschromatogramList_IdNull() {
                return this.IsNull(this.tablechromatogram.chromatogramList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetchromatogramList_IdNull() {
                this[this.tablechromatogram.chromatogramList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow[] GetreferenceableParamGroupRefRows() {
                if ((this.Table.ChildRelations["chromatogram_referenceableParamGroupRef"] == null)) {
                    return new referenceableParamGroupRefRow[0];
                }
                else {
                    return ((referenceableParamGroupRefRow[])(base.GetChildRows(this.Table.ChildRelations["chromatogram_referenceableParamGroupRef"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow[] GetcvParamRows() {
                if ((this.Table.ChildRelations["chromatogram_cvParam"] == null)) {
                    return new cvParamRow[0];
                }
                else {
                    return ((cvParamRow[])(base.GetChildRows(this.Table.ChildRelations["chromatogram_cvParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow[] GetuserParamRows() {
                if ((this.Table.ChildRelations["chromatogram_userParam"] == null)) {
                    return new userParamRow[0];
                }
                else {
                    return ((userParamRow[])(base.GetChildRows(this.Table.ChildRelations["chromatogram_userParam"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public precursorRow[] GetprecursorRows() {
                if ((this.Table.ChildRelations["chromatogram_precursor"] == null)) {
                    return new precursorRow[0];
                }
                else {
                    return ((precursorRow[])(base.GetChildRows(this.Table.ChildRelations["chromatogram_precursor"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRow[] GetproductRows() {
                if ((this.Table.ChildRelations["chromatogram_product"] == null)) {
                    return new productRow[0];
                }
                else {
                    return ((productRow[])(base.GetChildRows(this.Table.ChildRelations["chromatogram_product"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public binaryDataArrayListRow[] GetbinaryDataArrayListRows() {
                if ((this.Table.ChildRelations["chromatogram_binaryDataArrayList"] == null)) {
                    return new binaryDataArrayListRow[0];
                }
                else {
                    return ((binaryDataArrayListRow[])(base.GetChildRows(this.Table.ChildRelations["chromatogram_binaryDataArrayList"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class indexListRow : global::System.Data.DataRow {
            
            private indexListDataTable tableindexList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal indexListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableindexList = ((indexListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong count {
                get {
                    return ((ulong)(this[this.tableindexList.countColumn]));
                }
                set {
                    this[this.tableindexList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int indexList_Id {
                get {
                    return ((int)(this[this.tableindexList.indexList_IdColumn]));
                }
                set {
                    this[this.tableindexList.indexList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int indexedmzML_Id {
                get {
                    try {
                        return ((int)(this[this.tableindexList.indexedmzML_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'indexedmzML_Id\' in table \'indexList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableindexList.indexedmzML_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexedmzMLRow indexedmzMLRow {
                get {
                    return ((indexedmzMLRow)(this.GetParentRow(this.Table.ParentRelations["indexedmzML_indexList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["indexedmzML_indexList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsindexedmzML_IdNull() {
                return this.IsNull(this.tableindexList.indexedmzML_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetindexedmzML_IdNull() {
                this[this.tableindexList.indexedmzML_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexRow[] GetindexRows() {
                if ((this.Table.ChildRelations["indexList_index"] == null)) {
                    return new indexRow[0];
                }
                else {
                    return ((indexRow[])(base.GetChildRows(this.Table.ChildRelations["indexList_index"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class indexRow : global::System.Data.DataRow {
            
            private indexDataTable tableindex;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal indexRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableindex = ((indexDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableindex.nameColumn]));
                }
                set {
                    this[this.tableindex.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int index_Id {
                get {
                    return ((int)(this[this.tableindex.index_IdColumn]));
                }
                set {
                    this[this.tableindex.index_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int indexList_Id {
                get {
                    try {
                        return ((int)(this[this.tableindex.indexList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'indexList_Id\' in table \'index\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableindex.indexList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexListRow indexListRow {
                get {
                    return ((indexListRow)(this.GetParentRow(this.Table.ParentRelations["indexList_index"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["indexList_index"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsindexList_IdNull() {
                return this.IsNull(this.tableindex.indexList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetindexList_IdNull() {
                this[this.tableindex.indexList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public offsetRow[] GetoffsetRows() {
                if ((this.Table.ChildRelations["index_offset"] == null)) {
                    return new offsetRow[0];
                }
                else {
                    return ((offsetRow[])(base.GetChildRows(this.Table.ChildRelations["index_offset"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class offsetRow : global::System.Data.DataRow {
            
            private offsetDataTable tableoffset;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal offsetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableoffset = ((offsetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string idRef {
                get {
                    return ((string)(this[this.tableoffset.idRefColumn]));
                }
                set {
                    this[this.tableoffset.idRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string spotID {
                get {
                    try {
                        return ((string)(this[this.tableoffset.spotIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'spotID\' in table \'offset\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableoffset.spotIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double scanTime {
                get {
                    try {
                        return ((double)(this[this.tableoffset.scanTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scanTime\' in table \'offset\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableoffset.scanTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long offset_text {
                get {
                    return ((long)(this[this.tableoffset.offset_textColumn]));
                }
                set {
                    this[this.tableoffset.offset_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int index_Id {
                get {
                    try {
                        return ((int)(this[this.tableoffset.index_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'index_Id\' in table \'offset\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableoffset.index_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexRow indexRow {
                get {
                    return ((indexRow)(this.GetParentRow(this.Table.ParentRelations["index_offset"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["index_offset"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsspotIDNull() {
                return this.IsNull(this.tableoffset.spotIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetspotIDNull() {
                this[this.tableoffset.spotIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscanTimeNull() {
                return this.IsNull(this.tableoffset.scanTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscanTimeNull() {
                this[this.tableoffset.scanTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isindex_IdNull() {
                return this.IsNull(this.tableoffset.index_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setindex_IdNull() {
                this[this.tableoffset.index_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class indexedmzMLRowChangeEvent : global::System.EventArgs {
            
            private indexedmzMLRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexedmzMLRowChangeEvent(indexedmzMLRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexedmzMLRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class mzMLRowChangeEvent : global::System.EventArgs {
            
            private mzMLRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mzMLRowChangeEvent(mzMLRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mzMLRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class cvListRowChangeEvent : global::System.EventArgs {
            
            private cvListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvListRowChangeEvent(cvListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class cvRowChangeEvent : global::System.EventArgs {
            
            private cvRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvRowChangeEvent(cvRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class fileDescriptionRowChangeEvent : global::System.EventArgs {
            
            private fileDescriptionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileDescriptionRowChangeEvent(fileDescriptionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileDescriptionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class fileContentRowChangeEvent : global::System.EventArgs {
            
            private fileContentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileContentRowChangeEvent(fileContentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileContentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class referenceableParamGroupRefRowChangeEvent : global::System.EventArgs {
            
            private referenceableParamGroupRefRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRowChangeEvent(referenceableParamGroupRefRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRefRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class cvParamRowChangeEvent : global::System.EventArgs {
            
            private cvParamRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRowChangeEvent(cvParamRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cvParamRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class userParamRowChangeEvent : global::System.EventArgs {
            
            private userParamRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRowChangeEvent(userParamRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public userParamRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class sourceFileListRowChangeEvent : global::System.EventArgs {
            
            private sourceFileListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileListRowChangeEvent(sourceFileListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class sourceFileRowChangeEvent : global::System.EventArgs {
            
            private sourceFileRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRowChangeEvent(sourceFileRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class contactRowChangeEvent : global::System.EventArgs {
            
            private contactRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contactRowChangeEvent(contactRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contactRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class referenceableParamGroupListRowChangeEvent : global::System.EventArgs {
            
            private referenceableParamGroupListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupListRowChangeEvent(referenceableParamGroupListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class referenceableParamGroupRowChangeEvent : global::System.EventArgs {
            
            private referenceableParamGroupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRowChangeEvent(referenceableParamGroupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public referenceableParamGroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class sampleListRowChangeEvent : global::System.EventArgs {
            
            private sampleListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sampleListRowChangeEvent(sampleListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sampleListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class sampleRowChangeEvent : global::System.EventArgs {
            
            private sampleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sampleRowChangeEvent(sampleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sampleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class softwareListRowChangeEvent : global::System.EventArgs {
            
            private softwareListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareListRowChangeEvent(softwareListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class softwareRowChangeEvent : global::System.EventArgs {
            
            private softwareRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareRowChangeEvent(softwareRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class scanSettingsListRowChangeEvent : global::System.EventArgs {
            
            private scanSettingsListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanSettingsListRowChangeEvent(scanSettingsListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanSettingsListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class scanSettingsRowChangeEvent : global::System.EventArgs {
            
            private scanSettingsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanSettingsRowChangeEvent(scanSettingsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class sourceFileRefListRowChangeEvent : global::System.EventArgs {
            
            private sourceFileRefListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRefListRowChangeEvent(sourceFileRefListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRefListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class sourceFileRefRowChangeEvent : global::System.EventArgs {
            
            private sourceFileRefRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRefRowChangeEvent(sourceFileRefRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceFileRefRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class targetListRowChangeEvent : global::System.EventArgs {
            
            private targetListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public targetListRowChangeEvent(targetListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public targetListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class targetRowChangeEvent : global::System.EventArgs {
            
            private targetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public targetRowChangeEvent(targetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public targetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class instrumentConfigurationListRowChangeEvent : global::System.EventArgs {
            
            private instrumentConfigurationListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentConfigurationListRowChangeEvent(instrumentConfigurationListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentConfigurationListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class instrumentConfigurationRowChangeEvent : global::System.EventArgs {
            
            private instrumentConfigurationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentConfigurationRowChangeEvent(instrumentConfigurationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentConfigurationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class componentListRowChangeEvent : global::System.EventArgs {
            
            private componentListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public componentListRowChangeEvent(componentListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public componentListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class sourceRowChangeEvent : global::System.EventArgs {
            
            private sourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceRowChangeEvent(sourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class analyzerRowChangeEvent : global::System.EventArgs {
            
            private analyzerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public analyzerRowChangeEvent(analyzerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public analyzerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class detectorRowChangeEvent : global::System.EventArgs {
            
            private detectorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detectorRowChangeEvent(detectorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detectorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class softwareRefRowChangeEvent : global::System.EventArgs {
            
            private softwareRefRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareRefRowChangeEvent(softwareRefRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public softwareRefRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dataProcessingListRowChangeEvent : global::System.EventArgs {
            
            private dataProcessingListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataProcessingListRowChangeEvent(dataProcessingListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataProcessingListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dataProcessingRowChangeEvent : global::System.EventArgs {
            
            private dataProcessingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataProcessingRowChangeEvent(dataProcessingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataProcessingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class processingMethodRowChangeEvent : global::System.EventArgs {
            
            private processingMethodRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public processingMethodRowChangeEvent(processingMethodRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public processingMethodRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class runRowChangeEvent : global::System.EventArgs {
            
            private runRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public runRowChangeEvent(runRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public runRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class spectrumListRowChangeEvent : global::System.EventArgs {
            
            private spectrumListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumListRowChangeEvent(spectrumListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class spectrumRowChangeEvent : global::System.EventArgs {
            
            private spectrumRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumRowChangeEvent(spectrumRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spectrumRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class scanListRowChangeEvent : global::System.EventArgs {
            
            private scanListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanListRowChangeEvent(scanListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class scanRowChangeEvent : global::System.EventArgs {
            
            private scanRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanRowChangeEvent(scanRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class scanWindowListRowChangeEvent : global::System.EventArgs {
            
            private scanWindowListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanWindowListRowChangeEvent(scanWindowListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanWindowListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class scanWindowRowChangeEvent : global::System.EventArgs {
            
            private scanWindowRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanWindowRowChangeEvent(scanWindowRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scanWindowRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class precursorListRowChangeEvent : global::System.EventArgs {
            
            private precursorListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public precursorListRowChangeEvent(precursorListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public precursorListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class precursorRowChangeEvent : global::System.EventArgs {
            
            private precursorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public precursorRowChangeEvent(precursorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public precursorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isolationWindowRowChangeEvent : global::System.EventArgs {
            
            private isolationWindowRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isolationWindowRowChangeEvent(isolationWindowRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isolationWindowRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class selectedIonListRowChangeEvent : global::System.EventArgs {
            
            private selectedIonListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public selectedIonListRowChangeEvent(selectedIonListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public selectedIonListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class selectedIonRowChangeEvent : global::System.EventArgs {
            
            private selectedIonRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public selectedIonRowChangeEvent(selectedIonRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public selectedIonRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class activationRowChangeEvent : global::System.EventArgs {
            
            private activationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public activationRowChangeEvent(activationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public activationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class productListRowChangeEvent : global::System.EventArgs {
            
            private productListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productListRowChangeEvent(productListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class productRowChangeEvent : global::System.EventArgs {
            
            private productRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRowChangeEvent(productRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class binaryDataArrayListRowChangeEvent : global::System.EventArgs {
            
            private binaryDataArrayListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public binaryDataArrayListRowChangeEvent(binaryDataArrayListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public binaryDataArrayListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class binaryDataArrayRowChangeEvent : global::System.EventArgs {
            
            private binaryDataArrayRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public binaryDataArrayRowChangeEvent(binaryDataArrayRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public binaryDataArrayRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class chromatogramListRowChangeEvent : global::System.EventArgs {
            
            private chromatogramListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramListRowChangeEvent(chromatogramListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class chromatogramRowChangeEvent : global::System.EventArgs {
            
            private chromatogramRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramRowChangeEvent(chromatogramRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chromatogramRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class indexListRowChangeEvent : global::System.EventArgs {
            
            private indexListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexListRowChangeEvent(indexListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class indexRowChangeEvent : global::System.EventArgs {
            
            private indexRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexRowChangeEvent(indexRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class offsetRowChangeEvent : global::System.EventArgs {
            
            private offsetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public offsetRowChangeEvent(offsetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public offsetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
