//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 
namespace PSI_Interface.MSData.mzML_DataSet
{
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("IndexedMzMLDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
	public partial class IndexedMzMLDataSet : MzMLDataSet
	{
        
        private indexedmzMLDataTable tableindexedmzML;
        
        private indexListDataTable tableindexList;
        
        private indexDataTable tableindex;
        
        private offsetDataTable tableoffset;
        
        private global::System.Data.DataRelation relationindexedmzML_mzML;
        
        private global::System.Data.DataRelation relationindexedmzML_indexList;
        
        private global::System.Data.DataRelation relationindexList_index;
        
        private global::System.Data.DataRelation relationindex_offset;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IndexedMzMLDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected IndexedMzMLDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["indexedmzML"] != null)) {
                    base.Tables.Add(new indexedmzMLDataTable(ds.Tables["indexedmzML"]));
                }
                if ((ds.Tables["mzML"] != null)) {
                    base.Tables.Add(new mzMLDataTable(ds.Tables["mzML"]));
                }
                if ((ds.Tables["cvList"] != null)) {
                    base.Tables.Add(new cvListDataTable(ds.Tables["cvList"]));
                }
                if ((ds.Tables["cv"] != null)) {
                    base.Tables.Add(new cvDataTable(ds.Tables["cv"]));
                }
                if ((ds.Tables["fileDescription"] != null)) {
                    base.Tables.Add(new fileDescriptionDataTable(ds.Tables["fileDescription"]));
                }
                if ((ds.Tables["fileContent"] != null)) {
                    base.Tables.Add(new fileContentDataTable(ds.Tables["fileContent"]));
                }
                if ((ds.Tables["referenceableParamGroupRef"] != null)) {
                    base.Tables.Add(new referenceableParamGroupRefDataTable(ds.Tables["referenceableParamGroupRef"]));
                }
                if ((ds.Tables["cvParam"] != null)) {
                    base.Tables.Add(new cvParamDataTable(ds.Tables["cvParam"]));
                }
                if ((ds.Tables["userParam"] != null)) {
                    base.Tables.Add(new userParamDataTable(ds.Tables["userParam"]));
                }
                if ((ds.Tables["sourceFileList"] != null)) {
                    base.Tables.Add(new sourceFileListDataTable(ds.Tables["sourceFileList"]));
                }
                if ((ds.Tables["sourceFile"] != null)) {
                    base.Tables.Add(new sourceFileDataTable(ds.Tables["sourceFile"]));
                }
                if ((ds.Tables["contact"] != null)) {
                    base.Tables.Add(new contactDataTable(ds.Tables["contact"]));
                }
                if ((ds.Tables["referenceableParamGroupList"] != null)) {
                    base.Tables.Add(new referenceableParamGroupListDataTable(ds.Tables["referenceableParamGroupList"]));
                }
                if ((ds.Tables["referenceableParamGroup"] != null)) {
                    base.Tables.Add(new referenceableParamGroupDataTable(ds.Tables["referenceableParamGroup"]));
                }
                if ((ds.Tables["sampleList"] != null)) {
                    base.Tables.Add(new sampleListDataTable(ds.Tables["sampleList"]));
                }
                if ((ds.Tables["sample"] != null)) {
                    base.Tables.Add(new sampleDataTable(ds.Tables["sample"]));
                }
                if ((ds.Tables["softwareList"] != null)) {
                    base.Tables.Add(new softwareListDataTable(ds.Tables["softwareList"]));
                }
                if ((ds.Tables["software"] != null)) {
                    base.Tables.Add(new softwareDataTable(ds.Tables["software"]));
                }
                if ((ds.Tables["scanSettingsList"] != null)) {
                    base.Tables.Add(new scanSettingsListDataTable(ds.Tables["scanSettingsList"]));
                }
                if ((ds.Tables["scanSettings"] != null)) {
                    base.Tables.Add(new scanSettingsDataTable(ds.Tables["scanSettings"]));
                }
                if ((ds.Tables["sourceFileRefList"] != null)) {
                    base.Tables.Add(new sourceFileRefListDataTable(ds.Tables["sourceFileRefList"]));
                }
                if ((ds.Tables["sourceFileRef"] != null)) {
                    base.Tables.Add(new sourceFileRefDataTable(ds.Tables["sourceFileRef"]));
                }
                if ((ds.Tables["targetList"] != null)) {
                    base.Tables.Add(new targetListDataTable(ds.Tables["targetList"]));
                }
                if ((ds.Tables["target"] != null)) {
                    base.Tables.Add(new targetDataTable(ds.Tables["target"]));
                }
                if ((ds.Tables["instrumentConfigurationList"] != null)) {
                    base.Tables.Add(new instrumentConfigurationListDataTable(ds.Tables["instrumentConfigurationList"]));
                }
                if ((ds.Tables["instrumentConfiguration"] != null)) {
                    base.Tables.Add(new instrumentConfigurationDataTable(ds.Tables["instrumentConfiguration"]));
                }
                if ((ds.Tables["componentList"] != null)) {
                    base.Tables.Add(new componentListDataTable(ds.Tables["componentList"]));
                }
                if ((ds.Tables["source"] != null)) {
                    base.Tables.Add(new sourceDataTable(ds.Tables["source"]));
                }
                if ((ds.Tables["analyzer"] != null)) {
                    base.Tables.Add(new analyzerDataTable(ds.Tables["analyzer"]));
                }
                if ((ds.Tables["detector"] != null)) {
                    base.Tables.Add(new detectorDataTable(ds.Tables["detector"]));
                }
                if ((ds.Tables["softwareRef"] != null)) {
                    base.Tables.Add(new softwareRefDataTable(ds.Tables["softwareRef"]));
                }
                if ((ds.Tables["dataProcessingList"] != null)) {
                    base.Tables.Add(new dataProcessingListDataTable(ds.Tables["dataProcessingList"]));
                }
                if ((ds.Tables["dataProcessing"] != null)) {
                    base.Tables.Add(new dataProcessingDataTable(ds.Tables["dataProcessing"]));
                }
                if ((ds.Tables["processingMethod"] != null)) {
                    base.Tables.Add(new processingMethodDataTable(ds.Tables["processingMethod"]));
                }
                if ((ds.Tables["run"] != null)) {
                    base.Tables.Add(new runDataTable(ds.Tables["run"]));
                }
                if ((ds.Tables["spectrumList"] != null)) {
                    base.Tables.Add(new spectrumListDataTable(ds.Tables["spectrumList"]));
                }
                if ((ds.Tables["spectrum"] != null)) {
                    base.Tables.Add(new spectrumDataTable(ds.Tables["spectrum"]));
                }
                if ((ds.Tables["scanList"] != null)) {
                    base.Tables.Add(new scanListDataTable(ds.Tables["scanList"]));
                }
                if ((ds.Tables["scan"] != null)) {
                    base.Tables.Add(new scanDataTable(ds.Tables["scan"]));
                }
                if ((ds.Tables["scanWindowList"] != null)) {
                    base.Tables.Add(new scanWindowListDataTable(ds.Tables["scanWindowList"]));
                }
                if ((ds.Tables["scanWindow"] != null)) {
                    base.Tables.Add(new scanWindowDataTable(ds.Tables["scanWindow"]));
                }
                if ((ds.Tables["precursorList"] != null)) {
                    base.Tables.Add(new precursorListDataTable(ds.Tables["precursorList"]));
                }
                if ((ds.Tables["precursor"] != null)) {
                    base.Tables.Add(new precursorDataTable(ds.Tables["precursor"]));
                }
                if ((ds.Tables["isolationWindow"] != null)) {
                    base.Tables.Add(new isolationWindowDataTable(ds.Tables["isolationWindow"]));
                }
                if ((ds.Tables["selectedIonList"] != null)) {
                    base.Tables.Add(new selectedIonListDataTable(ds.Tables["selectedIonList"]));
                }
                if ((ds.Tables["selectedIon"] != null)) {
                    base.Tables.Add(new selectedIonDataTable(ds.Tables["selectedIon"]));
                }
                if ((ds.Tables["activation"] != null)) {
                    base.Tables.Add(new activationDataTable(ds.Tables["activation"]));
                }
                if ((ds.Tables["productList"] != null)) {
                    base.Tables.Add(new productListDataTable(ds.Tables["productList"]));
                }
                if ((ds.Tables["product"] != null)) {
                    base.Tables.Add(new productDataTable(ds.Tables["product"]));
                }
                if ((ds.Tables["binaryDataArrayList"] != null)) {
                    base.Tables.Add(new binaryDataArrayListDataTable(ds.Tables["binaryDataArrayList"]));
                }
                if ((ds.Tables["binaryDataArray"] != null)) {
                    base.Tables.Add(new binaryDataArrayDataTable(ds.Tables["binaryDataArray"]));
                }
                if ((ds.Tables["chromatogramList"] != null)) {
                    base.Tables.Add(new chromatogramListDataTable(ds.Tables["chromatogramList"]));
                }
                if ((ds.Tables["chromatogram"] != null)) {
                    base.Tables.Add(new chromatogramDataTable(ds.Tables["chromatogram"]));
                }
                if ((ds.Tables["indexList"] != null)) {
                    base.Tables.Add(new indexListDataTable(ds.Tables["indexList"]));
                }
                if ((ds.Tables["index"] != null)) {
                    base.Tables.Add(new indexDataTable(ds.Tables["index"]));
                }
                if ((ds.Tables["offset"] != null)) {
                    base.Tables.Add(new offsetDataTable(ds.Tables["offset"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public indexedmzMLDataTable indexedmzML {
            get {
                return this.tableindexedmzML;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public indexListDataTable indexList {
            get {
                return this.tableindexList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public indexDataTable index {
            get {
                return this.tableindex;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public offsetDataTable offset {
            get {
                return this.tableoffset;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
			IndexedMzMLDataSet cln = ((IndexedMzMLDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["indexedmzML"] != null)) {
                    base.Tables.Add(new indexedmzMLDataTable(ds.Tables["indexedmzML"]));
                }
                if ((ds.Tables["mzML"] != null)) {
                    base.Tables.Add(new mzMLDataTable(ds.Tables["mzML"]));
                }
                if ((ds.Tables["cvList"] != null)) {
                    base.Tables.Add(new cvListDataTable(ds.Tables["cvList"]));
                }
                if ((ds.Tables["cv"] != null)) {
                    base.Tables.Add(new cvDataTable(ds.Tables["cv"]));
                }
                if ((ds.Tables["fileDescription"] != null)) {
                    base.Tables.Add(new fileDescriptionDataTable(ds.Tables["fileDescription"]));
                }
                if ((ds.Tables["fileContent"] != null)) {
                    base.Tables.Add(new fileContentDataTable(ds.Tables["fileContent"]));
                }
                if ((ds.Tables["referenceableParamGroupRef"] != null)) {
                    base.Tables.Add(new referenceableParamGroupRefDataTable(ds.Tables["referenceableParamGroupRef"]));
                }
                if ((ds.Tables["cvParam"] != null)) {
                    base.Tables.Add(new cvParamDataTable(ds.Tables["cvParam"]));
                }
                if ((ds.Tables["userParam"] != null)) {
                    base.Tables.Add(new userParamDataTable(ds.Tables["userParam"]));
                }
                if ((ds.Tables["sourceFileList"] != null)) {
                    base.Tables.Add(new sourceFileListDataTable(ds.Tables["sourceFileList"]));
                }
                if ((ds.Tables["sourceFile"] != null)) {
                    base.Tables.Add(new sourceFileDataTable(ds.Tables["sourceFile"]));
                }
                if ((ds.Tables["contact"] != null)) {
                    base.Tables.Add(new contactDataTable(ds.Tables["contact"]));
                }
                if ((ds.Tables["referenceableParamGroupList"] != null)) {
                    base.Tables.Add(new referenceableParamGroupListDataTable(ds.Tables["referenceableParamGroupList"]));
                }
                if ((ds.Tables["referenceableParamGroup"] != null)) {
                    base.Tables.Add(new referenceableParamGroupDataTable(ds.Tables["referenceableParamGroup"]));
                }
                if ((ds.Tables["sampleList"] != null)) {
                    base.Tables.Add(new sampleListDataTable(ds.Tables["sampleList"]));
                }
                if ((ds.Tables["sample"] != null)) {
                    base.Tables.Add(new sampleDataTable(ds.Tables["sample"]));
                }
                if ((ds.Tables["softwareList"] != null)) {
                    base.Tables.Add(new softwareListDataTable(ds.Tables["softwareList"]));
                }
                if ((ds.Tables["software"] != null)) {
                    base.Tables.Add(new softwareDataTable(ds.Tables["software"]));
                }
                if ((ds.Tables["scanSettingsList"] != null)) {
                    base.Tables.Add(new scanSettingsListDataTable(ds.Tables["scanSettingsList"]));
                }
                if ((ds.Tables["scanSettings"] != null)) {
                    base.Tables.Add(new scanSettingsDataTable(ds.Tables["scanSettings"]));
                }
                if ((ds.Tables["sourceFileRefList"] != null)) {
                    base.Tables.Add(new sourceFileRefListDataTable(ds.Tables["sourceFileRefList"]));
                }
                if ((ds.Tables["sourceFileRef"] != null)) {
                    base.Tables.Add(new sourceFileRefDataTable(ds.Tables["sourceFileRef"]));
                }
                if ((ds.Tables["targetList"] != null)) {
                    base.Tables.Add(new targetListDataTable(ds.Tables["targetList"]));
                }
                if ((ds.Tables["target"] != null)) {
                    base.Tables.Add(new targetDataTable(ds.Tables["target"]));
                }
                if ((ds.Tables["instrumentConfigurationList"] != null)) {
                    base.Tables.Add(new instrumentConfigurationListDataTable(ds.Tables["instrumentConfigurationList"]));
                }
                if ((ds.Tables["instrumentConfiguration"] != null)) {
                    base.Tables.Add(new instrumentConfigurationDataTable(ds.Tables["instrumentConfiguration"]));
                }
                if ((ds.Tables["componentList"] != null)) {
                    base.Tables.Add(new componentListDataTable(ds.Tables["componentList"]));
                }
                if ((ds.Tables["source"] != null)) {
                    base.Tables.Add(new sourceDataTable(ds.Tables["source"]));
                }
                if ((ds.Tables["analyzer"] != null)) {
                    base.Tables.Add(new analyzerDataTable(ds.Tables["analyzer"]));
                }
                if ((ds.Tables["detector"] != null)) {
                    base.Tables.Add(new detectorDataTable(ds.Tables["detector"]));
                }
                if ((ds.Tables["softwareRef"] != null)) {
                    base.Tables.Add(new softwareRefDataTable(ds.Tables["softwareRef"]));
                }
                if ((ds.Tables["dataProcessingList"] != null)) {
                    base.Tables.Add(new dataProcessingListDataTable(ds.Tables["dataProcessingList"]));
                }
                if ((ds.Tables["dataProcessing"] != null)) {
                    base.Tables.Add(new dataProcessingDataTable(ds.Tables["dataProcessing"]));
                }
                if ((ds.Tables["processingMethod"] != null)) {
                    base.Tables.Add(new processingMethodDataTable(ds.Tables["processingMethod"]));
                }
                if ((ds.Tables["run"] != null)) {
                    base.Tables.Add(new runDataTable(ds.Tables["run"]));
                }
                if ((ds.Tables["spectrumList"] != null)) {
                    base.Tables.Add(new spectrumListDataTable(ds.Tables["spectrumList"]));
                }
                if ((ds.Tables["spectrum"] != null)) {
                    base.Tables.Add(new spectrumDataTable(ds.Tables["spectrum"]));
                }
                if ((ds.Tables["scanList"] != null)) {
                    base.Tables.Add(new scanListDataTable(ds.Tables["scanList"]));
                }
                if ((ds.Tables["scan"] != null)) {
                    base.Tables.Add(new scanDataTable(ds.Tables["scan"]));
                }
                if ((ds.Tables["scanWindowList"] != null)) {
                    base.Tables.Add(new scanWindowListDataTable(ds.Tables["scanWindowList"]));
                }
                if ((ds.Tables["scanWindow"] != null)) {
                    base.Tables.Add(new scanWindowDataTable(ds.Tables["scanWindow"]));
                }
                if ((ds.Tables["precursorList"] != null)) {
                    base.Tables.Add(new precursorListDataTable(ds.Tables["precursorList"]));
                }
                if ((ds.Tables["precursor"] != null)) {
                    base.Tables.Add(new precursorDataTable(ds.Tables["precursor"]));
                }
                if ((ds.Tables["isolationWindow"] != null)) {
                    base.Tables.Add(new isolationWindowDataTable(ds.Tables["isolationWindow"]));
                }
                if ((ds.Tables["selectedIonList"] != null)) {
                    base.Tables.Add(new selectedIonListDataTable(ds.Tables["selectedIonList"]));
                }
                if ((ds.Tables["selectedIon"] != null)) {
                    base.Tables.Add(new selectedIonDataTable(ds.Tables["selectedIon"]));
                }
                if ((ds.Tables["activation"] != null)) {
                    base.Tables.Add(new activationDataTable(ds.Tables["activation"]));
                }
                if ((ds.Tables["productList"] != null)) {
                    base.Tables.Add(new productListDataTable(ds.Tables["productList"]));
                }
                if ((ds.Tables["product"] != null)) {
                    base.Tables.Add(new productDataTable(ds.Tables["product"]));
                }
                if ((ds.Tables["binaryDataArrayList"] != null)) {
                    base.Tables.Add(new binaryDataArrayListDataTable(ds.Tables["binaryDataArrayList"]));
                }
                if ((ds.Tables["binaryDataArray"] != null)) {
                    base.Tables.Add(new binaryDataArrayDataTable(ds.Tables["binaryDataArray"]));
                }
                if ((ds.Tables["chromatogramList"] != null)) {
                    base.Tables.Add(new chromatogramListDataTable(ds.Tables["chromatogramList"]));
                }
                if ((ds.Tables["chromatogram"] != null)) {
                    base.Tables.Add(new chromatogramDataTable(ds.Tables["chromatogram"]));
                }
                if ((ds.Tables["indexList"] != null)) {
                    base.Tables.Add(new indexListDataTable(ds.Tables["indexList"]));
                }
                if ((ds.Tables["index"] != null)) {
                    base.Tables.Add(new indexDataTable(ds.Tables["index"]));
                }
                if ((ds.Tables["offset"] != null)) {
                    base.Tables.Add(new offsetDataTable(ds.Tables["offset"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal new void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal new void InitVars(bool initTable) {
            this.tableindexedmzML = ((indexedmzMLDataTable)(base.Tables["indexedmzML"]));
            if ((initTable == true)) {
                if ((this.tableindexedmzML != null)) {
                    this.tableindexedmzML.InitVars();
                }
            }
            this.tablemzML = ((mzMLDataTable)(base.Tables["mzML"]));
            if ((initTable == true)) {
                if ((this.tablemzML != null)) {
                    this.tablemzML.InitVars();
                }
            }
            this.tablecvList = ((cvListDataTable)(base.Tables["cvList"]));
            if ((initTable == true)) {
                if ((this.tablecvList != null)) {
                    this.tablecvList.InitVars();
                }
            }
            this.tablecv = ((cvDataTable)(base.Tables["cv"]));
            if ((initTable == true)) {
                if ((this.tablecv != null)) {
                    this.tablecv.InitVars();
                }
            }
            this.tablefileDescription = ((fileDescriptionDataTable)(base.Tables["fileDescription"]));
            if ((initTable == true)) {
                if ((this.tablefileDescription != null)) {
                    this.tablefileDescription.InitVars();
                }
            }
            this.tablefileContent = ((fileContentDataTable)(base.Tables["fileContent"]));
            if ((initTable == true)) {
                if ((this.tablefileContent != null)) {
                    this.tablefileContent.InitVars();
                }
            }
            this.tablereferenceableParamGroupRef = ((referenceableParamGroupRefDataTable)(base.Tables["referenceableParamGroupRef"]));
            if ((initTable == true)) {
                if ((this.tablereferenceableParamGroupRef != null)) {
                    this.tablereferenceableParamGroupRef.InitVars();
                }
            }
            this.tablecvParam = ((cvParamDataTable)(base.Tables["cvParam"]));
            if ((initTable == true)) {
                if ((this.tablecvParam != null)) {
                    this.tablecvParam.InitVars();
                }
            }
            this.tableuserParam = ((userParamDataTable)(base.Tables["userParam"]));
            if ((initTable == true)) {
                if ((this.tableuserParam != null)) {
                    this.tableuserParam.InitVars();
                }
            }
            this.tablesourceFileList = ((sourceFileListDataTable)(base.Tables["sourceFileList"]));
            if ((initTable == true)) {
                if ((this.tablesourceFileList != null)) {
                    this.tablesourceFileList.InitVars();
                }
            }
            this.tablesourceFile = ((sourceFileDataTable)(base.Tables["sourceFile"]));
            if ((initTable == true)) {
                if ((this.tablesourceFile != null)) {
                    this.tablesourceFile.InitVars();
                }
            }
            this.tablecontact = ((contactDataTable)(base.Tables["contact"]));
            if ((initTable == true)) {
                if ((this.tablecontact != null)) {
                    this.tablecontact.InitVars();
                }
            }
            this.tablereferenceableParamGroupList = ((referenceableParamGroupListDataTable)(base.Tables["referenceableParamGroupList"]));
            if ((initTable == true)) {
                if ((this.tablereferenceableParamGroupList != null)) {
                    this.tablereferenceableParamGroupList.InitVars();
                }
            }
            this.tablereferenceableParamGroup = ((referenceableParamGroupDataTable)(base.Tables["referenceableParamGroup"]));
            if ((initTable == true)) {
                if ((this.tablereferenceableParamGroup != null)) {
                    this.tablereferenceableParamGroup.InitVars();
                }
            }
            this.tablesampleList = ((sampleListDataTable)(base.Tables["sampleList"]));
            if ((initTable == true)) {
                if ((this.tablesampleList != null)) {
                    this.tablesampleList.InitVars();
                }
            }
            this.tablesample = ((sampleDataTable)(base.Tables["sample"]));
            if ((initTable == true)) {
                if ((this.tablesample != null)) {
                    this.tablesample.InitVars();
                }
            }
            this.tablesoftwareList = ((softwareListDataTable)(base.Tables["softwareList"]));
            if ((initTable == true)) {
                if ((this.tablesoftwareList != null)) {
                    this.tablesoftwareList.InitVars();
                }
            }
            this.tablesoftware = ((softwareDataTable)(base.Tables["software"]));
            if ((initTable == true)) {
                if ((this.tablesoftware != null)) {
                    this.tablesoftware.InitVars();
                }
            }
            this.tablescanSettingsList = ((scanSettingsListDataTable)(base.Tables["scanSettingsList"]));
            if ((initTable == true)) {
                if ((this.tablescanSettingsList != null)) {
                    this.tablescanSettingsList.InitVars();
                }
            }
            this.tablescanSettings = ((scanSettingsDataTable)(base.Tables["scanSettings"]));
            if ((initTable == true)) {
                if ((this.tablescanSettings != null)) {
                    this.tablescanSettings.InitVars();
                }
            }
            this.tablesourceFileRefList = ((sourceFileRefListDataTable)(base.Tables["sourceFileRefList"]));
            if ((initTable == true)) {
                if ((this.tablesourceFileRefList != null)) {
                    this.tablesourceFileRefList.InitVars();
                }
            }
            this.tablesourceFileRef = ((sourceFileRefDataTable)(base.Tables["sourceFileRef"]));
            if ((initTable == true)) {
                if ((this.tablesourceFileRef != null)) {
                    this.tablesourceFileRef.InitVars();
                }
            }
            this.tabletargetList = ((targetListDataTable)(base.Tables["targetList"]));
            if ((initTable == true)) {
                if ((this.tabletargetList != null)) {
                    this.tabletargetList.InitVars();
                }
            }
            this.tabletarget = ((targetDataTable)(base.Tables["target"]));
            if ((initTable == true)) {
                if ((this.tabletarget != null)) {
                    this.tabletarget.InitVars();
                }
            }
            this.tableinstrumentConfigurationList = ((instrumentConfigurationListDataTable)(base.Tables["instrumentConfigurationList"]));
            if ((initTable == true)) {
                if ((this.tableinstrumentConfigurationList != null)) {
                    this.tableinstrumentConfigurationList.InitVars();
                }
            }
            this.tableinstrumentConfiguration = ((instrumentConfigurationDataTable)(base.Tables["instrumentConfiguration"]));
            if ((initTable == true)) {
                if ((this.tableinstrumentConfiguration != null)) {
                    this.tableinstrumentConfiguration.InitVars();
                }
            }
            this.tablecomponentList = ((componentListDataTable)(base.Tables["componentList"]));
            if ((initTable == true)) {
                if ((this.tablecomponentList != null)) {
                    this.tablecomponentList.InitVars();
                }
            }
            this.tablesource = ((sourceDataTable)(base.Tables["source"]));
            if ((initTable == true)) {
                if ((this.tablesource != null)) {
                    this.tablesource.InitVars();
                }
            }
            this.tableanalyzer = ((analyzerDataTable)(base.Tables["analyzer"]));
            if ((initTable == true)) {
                if ((this.tableanalyzer != null)) {
                    this.tableanalyzer.InitVars();
                }
            }
            this.tabledetector = ((detectorDataTable)(base.Tables["detector"]));
            if ((initTable == true)) {
                if ((this.tabledetector != null)) {
                    this.tabledetector.InitVars();
                }
            }
            this.tablesoftwareRef = ((softwareRefDataTable)(base.Tables["softwareRef"]));
            if ((initTable == true)) {
                if ((this.tablesoftwareRef != null)) {
                    this.tablesoftwareRef.InitVars();
                }
            }
            this.tabledataProcessingList = ((dataProcessingListDataTable)(base.Tables["dataProcessingList"]));
            if ((initTable == true)) {
                if ((this.tabledataProcessingList != null)) {
                    this.tabledataProcessingList.InitVars();
                }
            }
            this.tabledataProcessing = ((dataProcessingDataTable)(base.Tables["dataProcessing"]));
            if ((initTable == true)) {
                if ((this.tabledataProcessing != null)) {
                    this.tabledataProcessing.InitVars();
                }
            }
            this.tableprocessingMethod = ((processingMethodDataTable)(base.Tables["processingMethod"]));
            if ((initTable == true)) {
                if ((this.tableprocessingMethod != null)) {
                    this.tableprocessingMethod.InitVars();
                }
            }
            this.tablerun = ((runDataTable)(base.Tables["run"]));
            if ((initTable == true)) {
                if ((this.tablerun != null)) {
                    this.tablerun.InitVars();
                }
            }
            this.tablespectrumList = ((spectrumListDataTable)(base.Tables["spectrumList"]));
            if ((initTable == true)) {
                if ((this.tablespectrumList != null)) {
                    this.tablespectrumList.InitVars();
                }
            }
            this.tablespectrum = ((spectrumDataTable)(base.Tables["spectrum"]));
            if ((initTable == true)) {
                if ((this.tablespectrum != null)) {
                    this.tablespectrum.InitVars();
                }
            }
            this.tablescanList = ((scanListDataTable)(base.Tables["scanList"]));
            if ((initTable == true)) {
                if ((this.tablescanList != null)) {
                    this.tablescanList.InitVars();
                }
            }
            this.tablescan = ((scanDataTable)(base.Tables["scan"]));
            if ((initTable == true)) {
                if ((this.tablescan != null)) {
                    this.tablescan.InitVars();
                }
            }
            this.tablescanWindowList = ((scanWindowListDataTable)(base.Tables["scanWindowList"]));
            if ((initTable == true)) {
                if ((this.tablescanWindowList != null)) {
                    this.tablescanWindowList.InitVars();
                }
            }
            this.tablescanWindow = ((scanWindowDataTable)(base.Tables["scanWindow"]));
            if ((initTable == true)) {
                if ((this.tablescanWindow != null)) {
                    this.tablescanWindow.InitVars();
                }
            }
            this.tableprecursorList = ((precursorListDataTable)(base.Tables["precursorList"]));
            if ((initTable == true)) {
                if ((this.tableprecursorList != null)) {
                    this.tableprecursorList.InitVars();
                }
            }
            this.tableprecursor = ((precursorDataTable)(base.Tables["precursor"]));
            if ((initTable == true)) {
                if ((this.tableprecursor != null)) {
                    this.tableprecursor.InitVars();
                }
            }
            this.tableisolationWindow = ((isolationWindowDataTable)(base.Tables["isolationWindow"]));
            if ((initTable == true)) {
                if ((this.tableisolationWindow != null)) {
                    this.tableisolationWindow.InitVars();
                }
            }
            this.tableselectedIonList = ((selectedIonListDataTable)(base.Tables["selectedIonList"]));
            if ((initTable == true)) {
                if ((this.tableselectedIonList != null)) {
                    this.tableselectedIonList.InitVars();
                }
            }
            this.tableselectedIon = ((selectedIonDataTable)(base.Tables["selectedIon"]));
            if ((initTable == true)) {
                if ((this.tableselectedIon != null)) {
                    this.tableselectedIon.InitVars();
                }
            }
            this.tableactivation = ((activationDataTable)(base.Tables["activation"]));
            if ((initTable == true)) {
                if ((this.tableactivation != null)) {
                    this.tableactivation.InitVars();
                }
            }
            this.tableproductList = ((productListDataTable)(base.Tables["productList"]));
            if ((initTable == true)) {
                if ((this.tableproductList != null)) {
                    this.tableproductList.InitVars();
                }
            }
            this.tableproduct = ((productDataTable)(base.Tables["product"]));
            if ((initTable == true)) {
                if ((this.tableproduct != null)) {
                    this.tableproduct.InitVars();
                }
            }
            this.tablebinaryDataArrayList = ((binaryDataArrayListDataTable)(base.Tables["binaryDataArrayList"]));
            if ((initTable == true)) {
                if ((this.tablebinaryDataArrayList != null)) {
                    this.tablebinaryDataArrayList.InitVars();
                }
            }
            this.tablebinaryDataArray = ((binaryDataArrayDataTable)(base.Tables["binaryDataArray"]));
            if ((initTable == true)) {
                if ((this.tablebinaryDataArray != null)) {
                    this.tablebinaryDataArray.InitVars();
                }
            }
            this.tablechromatogramList = ((chromatogramListDataTable)(base.Tables["chromatogramList"]));
            if ((initTable == true)) {
                if ((this.tablechromatogramList != null)) {
                    this.tablechromatogramList.InitVars();
                }
            }
            this.tablechromatogram = ((chromatogramDataTable)(base.Tables["chromatogram"]));
            if ((initTable == true)) {
                if ((this.tablechromatogram != null)) {
                    this.tablechromatogram.InitVars();
                }
            }
            this.tableindexList = ((indexListDataTable)(base.Tables["indexList"]));
            if ((initTable == true)) {
                if ((this.tableindexList != null)) {
                    this.tableindexList.InitVars();
                }
            }
            this.tableindex = ((indexDataTable)(base.Tables["index"]));
            if ((initTable == true)) {
                if ((this.tableindex != null)) {
                    this.tableindex.InitVars();
                }
            }
            this.tableoffset = ((offsetDataTable)(base.Tables["offset"]));
            if ((initTable == true)) {
                if ((this.tableoffset != null)) {
                    this.tableoffset.InitVars();
                }
            }
            this.relationindexedmzML_mzML = this.Relations["indexedmzML_mzML"];
            this.relationmzML_cvList = this.Relations["mzML_cvList"];
            this.relationcvList_cv = this.Relations["cvList_cv"];
            this.relationmzML_fileDescription = this.Relations["mzML_fileDescription"];
            this.relationfileDescription_fileContent = this.Relations["fileDescription_fileContent"];
            this.relationfileContent_referenceableParamGroupRef = this.Relations["fileContent_referenceableParamGroupRef"];
            this.relationsourceFile_referenceableParamGroupRef = this.Relations["sourceFile_referenceableParamGroupRef"];
            this.relationcontact_referenceableParamGroupRef = this.Relations["contact_referenceableParamGroupRef"];
            this.relationsample_referenceableParamGroupRef = this.Relations["sample_referenceableParamGroupRef"];
            this.relationsoftware_referenceableParamGroupRef = this.Relations["software_referenceableParamGroupRef"];
            this.relationtarget_referenceableParamGroupRef = this.Relations["target_referenceableParamGroupRef"];
            this.relationscanSettings_referenceableParamGroupRef = this.Relations["scanSettings_referenceableParamGroupRef"];
            this.relationsource_referenceableParamGroupRef = this.Relations["source_referenceableParamGroupRef"];
            this.relationanalyzer_referenceableParamGroupRef = this.Relations["analyzer_referenceableParamGroupRef"];
            this.relationdetector_referenceableParamGroupRef = this.Relations["detector_referenceableParamGroupRef"];
            this.relationinstrumentConfiguration_referenceableParamGroupRef = this.Relations["instrumentConfiguration_referenceableParamGroupRef"];
            this.relationprocessingMethod_referenceableParamGroupRef = this.Relations["processingMethod_referenceableParamGroupRef"];
            this.relationscanWindow_referenceableParamGroupRef = this.Relations["scanWindow_referenceableParamGroupRef"];
            this.relationscan_referenceableParamGroupRef = this.Relations["scan_referenceableParamGroupRef"];
            this.relationscanList_referenceableParamGroupRef = this.Relations["scanList_referenceableParamGroupRef"];
            this.relationisolationWindow_referenceableParamGroupRef = this.Relations["isolationWindow_referenceableParamGroupRef"];
            this.relationselectedIon_referenceableParamGroupRef = this.Relations["selectedIon_referenceableParamGroupRef"];
            this.relationactivation_referenceableParamGroupRef = this.Relations["activation_referenceableParamGroupRef"];
            this.relationbinaryDataArray_referenceableParamGroupRef = this.Relations["binaryDataArray_referenceableParamGroupRef"];
            this.relationspectrum_referenceableParamGroupRef = this.Relations["spectrum_referenceableParamGroupRef"];
            this.relationchromatogram_referenceableParamGroupRef = this.Relations["chromatogram_referenceableParamGroupRef"];
            this.relationrun_referenceableParamGroupRef = this.Relations["run_referenceableParamGroupRef"];
            this.relationfileContent_cvParam = this.Relations["fileContent_cvParam"];
            this.relationsourceFile_cvParam = this.Relations["sourceFile_cvParam"];
            this.relationcontact_cvParam = this.Relations["contact_cvParam"];
            this.relationreferenceableParamGroup_cvParam = this.Relations["referenceableParamGroup_cvParam"];
            this.relationsample_cvParam = this.Relations["sample_cvParam"];
            this.relationsoftware_cvParam = this.Relations["software_cvParam"];
            this.relationtarget_cvParam = this.Relations["target_cvParam"];
            this.relationscanSettings_cvParam = this.Relations["scanSettings_cvParam"];
            this.relationsource_cvParam = this.Relations["source_cvParam"];
            this.relationanalyzer_cvParam = this.Relations["analyzer_cvParam"];
            this.relationdetector_cvParam = this.Relations["detector_cvParam"];
            this.relationinstrumentConfiguration_cvParam = this.Relations["instrumentConfiguration_cvParam"];
            this.relationprocessingMethod_cvParam = this.Relations["processingMethod_cvParam"];
            this.relationscanWindow_cvParam = this.Relations["scanWindow_cvParam"];
            this.relationscan_cvParam = this.Relations["scan_cvParam"];
            this.relationscanList_cvParam = this.Relations["scanList_cvParam"];
            this.relationisolationWindow_cvParam = this.Relations["isolationWindow_cvParam"];
            this.relationselectedIon_cvParam = this.Relations["selectedIon_cvParam"];
            this.relationactivation_cvParam = this.Relations["activation_cvParam"];
            this.relationbinaryDataArray_cvParam = this.Relations["binaryDataArray_cvParam"];
            this.relationspectrum_cvParam = this.Relations["spectrum_cvParam"];
            this.relationchromatogram_cvParam = this.Relations["chromatogram_cvParam"];
            this.relationrun_cvParam = this.Relations["run_cvParam"];
            this.relationfileContent_userParam = this.Relations["fileContent_userParam"];
            this.relationsourceFile_userParam = this.Relations["sourceFile_userParam"];
            this.relationcontact_userParam = this.Relations["contact_userParam"];
            this.relationreferenceableParamGroup_userParam = this.Relations["referenceableParamGroup_userParam"];
            this.relationsample_userParam = this.Relations["sample_userParam"];
            this.relationsoftware_userParam = this.Relations["software_userParam"];
            this.relationtarget_userParam = this.Relations["target_userParam"];
            this.relationscanSettings_userParam = this.Relations["scanSettings_userParam"];
            this.relationsource_userParam = this.Relations["source_userParam"];
            this.relationanalyzer_userParam = this.Relations["analyzer_userParam"];
            this.relationdetector_userParam = this.Relations["detector_userParam"];
            this.relationinstrumentConfiguration_userParam = this.Relations["instrumentConfiguration_userParam"];
            this.relationprocessingMethod_userParam = this.Relations["processingMethod_userParam"];
            this.relationscanWindow_userParam = this.Relations["scanWindow_userParam"];
            this.relationscan_userParam = this.Relations["scan_userParam"];
            this.relationscanList_userParam = this.Relations["scanList_userParam"];
            this.relationisolationWindow_userParam = this.Relations["isolationWindow_userParam"];
            this.relationselectedIon_userParam = this.Relations["selectedIon_userParam"];
            this.relationactivation_userParam = this.Relations["activation_userParam"];
            this.relationbinaryDataArray_userParam = this.Relations["binaryDataArray_userParam"];
            this.relationspectrum_userParam = this.Relations["spectrum_userParam"];
            this.relationchromatogram_userParam = this.Relations["chromatogram_userParam"];
            this.relationrun_userParam = this.Relations["run_userParam"];
            this.relationfileDescription_sourceFileList = this.Relations["fileDescription_sourceFileList"];
            this.relationsourceFileList_sourceFile = this.Relations["sourceFileList_sourceFile"];
            this.relationfileDescription_contact = this.Relations["fileDescription_contact"];
            this.relationmzML_referenceableParamGroupList = this.Relations["mzML_referenceableParamGroupList"];
            this.relationreferenceableParamGroupList_referenceableParamGroup = this.Relations["referenceableParamGroupList_referenceableParamGroup"];
            this.relationmzML_sampleList = this.Relations["mzML_sampleList"];
            this.relationsampleList_sample = this.Relations["sampleList_sample"];
            this.relationmzML_softwareList = this.Relations["mzML_softwareList"];
            this.relationsoftwareList_software = this.Relations["softwareList_software"];
            this.relationmzML_scanSettingsList = this.Relations["mzML_scanSettingsList"];
            this.relationscanSettingsList_scanSettings = this.Relations["scanSettingsList_scanSettings"];
            this.relationscanSettings_sourceFileRefList = this.Relations["scanSettings_sourceFileRefList"];
            this.relationsourceFileRefList_sourceFileRef = this.Relations["sourceFileRefList_sourceFileRef"];
            this.relationscanSettings_targetList = this.Relations["scanSettings_targetList"];
            this.relationtargetList_target = this.Relations["targetList_target"];
            this.relationmzML_instrumentConfigurationList = this.Relations["mzML_instrumentConfigurationList"];
            this.relationinstrumentConfigurationList_instrumentConfiguration = this.Relations["instrumentConfigurationList_instrumentConfiguration"];
            this.relationinstrumentConfiguration_componentList = this.Relations["instrumentConfiguration_componentList"];
            this.relationcomponentList_source = this.Relations["componentList_source"];
            this.relationcomponentList_analyzer = this.Relations["componentList_analyzer"];
            this.relationcomponentList_detector = this.Relations["componentList_detector"];
            this.relationinstrumentConfiguration_softwareRef = this.Relations["instrumentConfiguration_softwareRef"];
            this.relationmzML_dataProcessingList = this.Relations["mzML_dataProcessingList"];
            this.relationdataProcessingList_dataProcessing = this.Relations["dataProcessingList_dataProcessing"];
            this.relationdataProcessing_processingMethod = this.Relations["dataProcessing_processingMethod"];
            this.relationmzML_run = this.Relations["mzML_run"];
            this.relationrun_spectrumList = this.Relations["run_spectrumList"];
            this.relationspectrumList_spectrum = this.Relations["spectrumList_spectrum"];
            this.relationspectrum_scanList = this.Relations["spectrum_scanList"];
            this.relationscanList_scan = this.Relations["scanList_scan"];
            this.relationscan_scanWindowList = this.Relations["scan_scanWindowList"];
            this.relationscanWindowList_scanWindow = this.Relations["scanWindowList_scanWindow"];
            this.relationspectrum_precursorList = this.Relations["spectrum_precursorList"];
            this.relationprecursorList_precursor = this.Relations["precursorList_precursor"];
            this.relationchromatogram_precursor = this.Relations["chromatogram_precursor"];
            this.relationprecursor_isolationWindow = this.Relations["precursor_isolationWindow"];
            this.relationproduct_isolationWindow = this.Relations["product_isolationWindow"];
            this.relationprecursor_selectedIonList = this.Relations["precursor_selectedIonList"];
            this.relationselectedIonList_selectedIon = this.Relations["selectedIonList_selectedIon"];
            this.relationprecursor_activation = this.Relations["precursor_activation"];
            this.relationspectrum_productList = this.Relations["spectrum_productList"];
            this.relationproductList_product = this.Relations["productList_product"];
            this.relationchromatogram_product = this.Relations["chromatogram_product"];
            this.relationspectrum_binaryDataArrayList = this.Relations["spectrum_binaryDataArrayList"];
            this.relationchromatogram_binaryDataArrayList = this.Relations["chromatogram_binaryDataArrayList"];
            this.relationbinaryDataArrayList_binaryDataArray = this.Relations["binaryDataArrayList_binaryDataArray"];
            this.relationrun_chromatogramList = this.Relations["run_chromatogramList"];
            this.relationchromatogramList_chromatogram = this.Relations["chromatogramList_chromatogram"];
            this.relationindexedmzML_indexList = this.Relations["indexedmzML_indexList"];
            this.relationindexList_index = this.Relations["indexList_index"];
            this.relationindex_offset = this.Relations["index_offset"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private new void InitClass() {
            this.DataSetName = "IndexedMzMLDataSet";
            this.Prefix = "";
            this.Namespace = "http://psi.hupo.org/ms/mzml";
            this.Locale = new global::System.Globalization.CultureInfo("");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableindexedmzML = new indexedmzMLDataTable();
            base.Tables.Add(this.tableindexedmzML);
            this.tablemzML = new mzMLDataTable();
            base.Tables.Add(this.tablemzML);
            this.tablecvList = new cvListDataTable();
            base.Tables.Add(this.tablecvList);
            this.tablecv = new cvDataTable();
            base.Tables.Add(this.tablecv);
            this.tablefileDescription = new fileDescriptionDataTable();
            base.Tables.Add(this.tablefileDescription);
            this.tablefileContent = new fileContentDataTable();
            base.Tables.Add(this.tablefileContent);
            this.tablereferenceableParamGroupRef = new referenceableParamGroupRefDataTable();
            base.Tables.Add(this.tablereferenceableParamGroupRef);
            this.tablecvParam = new cvParamDataTable();
            base.Tables.Add(this.tablecvParam);
            this.tableuserParam = new userParamDataTable();
            base.Tables.Add(this.tableuserParam);
            this.tablesourceFileList = new sourceFileListDataTable();
            base.Tables.Add(this.tablesourceFileList);
            this.tablesourceFile = new sourceFileDataTable();
            base.Tables.Add(this.tablesourceFile);
            this.tablecontact = new contactDataTable();
            base.Tables.Add(this.tablecontact);
            this.tablereferenceableParamGroupList = new referenceableParamGroupListDataTable();
            base.Tables.Add(this.tablereferenceableParamGroupList);
            this.tablereferenceableParamGroup = new referenceableParamGroupDataTable();
            base.Tables.Add(this.tablereferenceableParamGroup);
            this.tablesampleList = new sampleListDataTable();
            base.Tables.Add(this.tablesampleList);
            this.tablesample = new sampleDataTable();
            base.Tables.Add(this.tablesample);
            this.tablesoftwareList = new softwareListDataTable();
            base.Tables.Add(this.tablesoftwareList);
            this.tablesoftware = new softwareDataTable();
            base.Tables.Add(this.tablesoftware);
            this.tablescanSettingsList = new scanSettingsListDataTable();
            base.Tables.Add(this.tablescanSettingsList);
            this.tablescanSettings = new scanSettingsDataTable();
            base.Tables.Add(this.tablescanSettings);
            this.tablesourceFileRefList = new sourceFileRefListDataTable();
            base.Tables.Add(this.tablesourceFileRefList);
            this.tablesourceFileRef = new sourceFileRefDataTable();
            base.Tables.Add(this.tablesourceFileRef);
            this.tabletargetList = new targetListDataTable();
            base.Tables.Add(this.tabletargetList);
            this.tabletarget = new targetDataTable();
            base.Tables.Add(this.tabletarget);
            this.tableinstrumentConfigurationList = new instrumentConfigurationListDataTable();
            base.Tables.Add(this.tableinstrumentConfigurationList);
            this.tableinstrumentConfiguration = new instrumentConfigurationDataTable();
            base.Tables.Add(this.tableinstrumentConfiguration);
            this.tablecomponentList = new componentListDataTable();
            base.Tables.Add(this.tablecomponentList);
            this.tablesource = new sourceDataTable();
            base.Tables.Add(this.tablesource);
            this.tableanalyzer = new analyzerDataTable();
            base.Tables.Add(this.tableanalyzer);
            this.tabledetector = new detectorDataTable();
            base.Tables.Add(this.tabledetector);
            this.tablesoftwareRef = new softwareRefDataTable();
            base.Tables.Add(this.tablesoftwareRef);
            this.tabledataProcessingList = new dataProcessingListDataTable();
            base.Tables.Add(this.tabledataProcessingList);
            this.tabledataProcessing = new dataProcessingDataTable();
            base.Tables.Add(this.tabledataProcessing);
            this.tableprocessingMethod = new processingMethodDataTable();
            base.Tables.Add(this.tableprocessingMethod);
            this.tablerun = new runDataTable();
            base.Tables.Add(this.tablerun);
            this.tablespectrumList = new spectrumListDataTable();
            base.Tables.Add(this.tablespectrumList);
            this.tablespectrum = new spectrumDataTable();
            base.Tables.Add(this.tablespectrum);
            this.tablescanList = new scanListDataTable();
            base.Tables.Add(this.tablescanList);
            this.tablescan = new scanDataTable();
            base.Tables.Add(this.tablescan);
            this.tablescanWindowList = new scanWindowListDataTable();
            base.Tables.Add(this.tablescanWindowList);
            this.tablescanWindow = new scanWindowDataTable();
            base.Tables.Add(this.tablescanWindow);
            this.tableprecursorList = new precursorListDataTable();
            base.Tables.Add(this.tableprecursorList);
            this.tableprecursor = new precursorDataTable();
            base.Tables.Add(this.tableprecursor);
            this.tableisolationWindow = new isolationWindowDataTable();
            base.Tables.Add(this.tableisolationWindow);
            this.tableselectedIonList = new selectedIonListDataTable();
            base.Tables.Add(this.tableselectedIonList);
            this.tableselectedIon = new selectedIonDataTable();
            base.Tables.Add(this.tableselectedIon);
            this.tableactivation = new activationDataTable();
            base.Tables.Add(this.tableactivation);
            this.tableproductList = new productListDataTable();
            base.Tables.Add(this.tableproductList);
            this.tableproduct = new productDataTable();
            base.Tables.Add(this.tableproduct);
            this.tablebinaryDataArrayList = new binaryDataArrayListDataTable();
            base.Tables.Add(this.tablebinaryDataArrayList);
            this.tablebinaryDataArray = new binaryDataArrayDataTable();
            base.Tables.Add(this.tablebinaryDataArray);
            this.tablechromatogramList = new chromatogramListDataTable();
            base.Tables.Add(this.tablechromatogramList);
            this.tablechromatogram = new chromatogramDataTable();
            base.Tables.Add(this.tablechromatogram);
            this.tableindexList = new indexListDataTable();
            base.Tables.Add(this.tableindexList);
            this.tableindex = new indexDataTable();
            base.Tables.Add(this.tableindex);
            this.tableoffset = new offsetDataTable();
            base.Tables.Add(this.tableoffset);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("indexedmzML_mzML", new global::System.Data.DataColumn[] {
                        this.tableindexedmzML.indexedmzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablemzML.indexedmzML_IdColumn});
            this.tablemzML.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("mzML_cvList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvList.mzML_IdColumn});
            this.tablecvList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("cvList_cv", new global::System.Data.DataColumn[] {
                        this.tablecvList.cvList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecv.cvList_IdColumn});
            this.tablecv.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("mzML_fileDescription", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablefileDescription.mzML_IdColumn});
            this.tablefileDescription.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("fileDescription_fileContent", new global::System.Data.DataColumn[] {
                        this.tablefileDescription.fileDescription_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablefileContent.fileDescription_IdColumn});
            this.tablefileContent.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("fileContent_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablefileContent.fileContent_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.fileContent_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("sourceFile_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablesourceFile.sourceFile_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.sourceFile_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("contact_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablecontact.contact_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.contact_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("sample_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablesample.sample_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.sample_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("software_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablesoftware.software_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.software_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("target_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tabletarget.target_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.target_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanSettings_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.scanSettings_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("source_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablesource.source_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.source_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("analyzer_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableanalyzer.analyzer_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.analyzer_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("detector_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tabledetector.detector_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.detector_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("instrumentConfiguration_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.instrumentConfiguration_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("processingMethod_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableprocessingMethod.processingMethod_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.processingMethod_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanWindow_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablescanWindow.scanWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.scanWindow_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scan_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablescan.scan_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.scan_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanList_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablescanList.scanList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.scanList_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("isolationWindow_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableisolationWindow.isolationWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.isolationWindow_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("selectedIon_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableselectedIon.selectedIon_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.selectedIon_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("activation_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableactivation.activation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.activation_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("binaryDataArray_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArray.binaryDataArray_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.binaryDataArray_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("spectrum_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.spectrum_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("chromatogram_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.chromatogram_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("run_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablerun.run_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.run_IdColumn});
            this.tablereferenceableParamGroupRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("fileContent_cvParam", new global::System.Data.DataColumn[] {
                        this.tablefileContent.fileContent_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.fileContent_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("sourceFile_cvParam", new global::System.Data.DataColumn[] {
                        this.tablesourceFile.sourceFile_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.sourceFile_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("contact_cvParam", new global::System.Data.DataColumn[] {
                        this.tablecontact.contact_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.contact_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("referenceableParamGroup_cvParam", new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroup.referenceableParamGroup_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.referenceableParamGroup_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("sample_cvParam", new global::System.Data.DataColumn[] {
                        this.tablesample.sample_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.sample_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("software_cvParam", new global::System.Data.DataColumn[] {
                        this.tablesoftware.software_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.software_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("target_cvParam", new global::System.Data.DataColumn[] {
                        this.tabletarget.target_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.target_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanSettings_cvParam", new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.scanSettings_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("source_cvParam", new global::System.Data.DataColumn[] {
                        this.tablesource.source_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.source_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("analyzer_cvParam", new global::System.Data.DataColumn[] {
                        this.tableanalyzer.analyzer_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.analyzer_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("detector_cvParam", new global::System.Data.DataColumn[] {
                        this.tabledetector.detector_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.detector_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("instrumentConfiguration_cvParam", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.instrumentConfiguration_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("processingMethod_cvParam", new global::System.Data.DataColumn[] {
                        this.tableprocessingMethod.processingMethod_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.processingMethod_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanWindow_cvParam", new global::System.Data.DataColumn[] {
                        this.tablescanWindow.scanWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.scanWindow_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scan_cvParam", new global::System.Data.DataColumn[] {
                        this.tablescan.scan_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.scan_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanList_cvParam", new global::System.Data.DataColumn[] {
                        this.tablescanList.scanList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.scanList_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("isolationWindow_cvParam", new global::System.Data.DataColumn[] {
                        this.tableisolationWindow.isolationWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.isolationWindow_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("selectedIon_cvParam", new global::System.Data.DataColumn[] {
                        this.tableselectedIon.selectedIon_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.selectedIon_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("activation_cvParam", new global::System.Data.DataColumn[] {
                        this.tableactivation.activation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.activation_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("binaryDataArray_cvParam", new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArray.binaryDataArray_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.binaryDataArray_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("spectrum_cvParam", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.spectrum_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("chromatogram_cvParam", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.chromatogram_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("run_cvParam", new global::System.Data.DataColumn[] {
                        this.tablerun.run_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.run_IdColumn});
            this.tablecvParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("fileContent_userParam", new global::System.Data.DataColumn[] {
                        this.tablefileContent.fileContent_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.fileContent_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("sourceFile_userParam", new global::System.Data.DataColumn[] {
                        this.tablesourceFile.sourceFile_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.sourceFile_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("contact_userParam", new global::System.Data.DataColumn[] {
                        this.tablecontact.contact_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.contact_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("referenceableParamGroup_userParam", new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroup.referenceableParamGroup_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.referenceableParamGroup_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("sample_userParam", new global::System.Data.DataColumn[] {
                        this.tablesample.sample_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.sample_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("software_userParam", new global::System.Data.DataColumn[] {
                        this.tablesoftware.software_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.software_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("target_userParam", new global::System.Data.DataColumn[] {
                        this.tabletarget.target_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.target_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanSettings_userParam", new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.scanSettings_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("source_userParam", new global::System.Data.DataColumn[] {
                        this.tablesource.source_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.source_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("analyzer_userParam", new global::System.Data.DataColumn[] {
                        this.tableanalyzer.analyzer_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.analyzer_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("detector_userParam", new global::System.Data.DataColumn[] {
                        this.tabledetector.detector_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.detector_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("instrumentConfiguration_userParam", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.instrumentConfiguration_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("processingMethod_userParam", new global::System.Data.DataColumn[] {
                        this.tableprocessingMethod.processingMethod_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.processingMethod_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanWindow_userParam", new global::System.Data.DataColumn[] {
                        this.tablescanWindow.scanWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.scanWindow_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scan_userParam", new global::System.Data.DataColumn[] {
                        this.tablescan.scan_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.scan_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanList_userParam", new global::System.Data.DataColumn[] {
                        this.tablescanList.scanList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.scanList_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("isolationWindow_userParam", new global::System.Data.DataColumn[] {
                        this.tableisolationWindow.isolationWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.isolationWindow_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("selectedIon_userParam", new global::System.Data.DataColumn[] {
                        this.tableselectedIon.selectedIon_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.selectedIon_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("activation_userParam", new global::System.Data.DataColumn[] {
                        this.tableactivation.activation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.activation_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("binaryDataArray_userParam", new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArray.binaryDataArray_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.binaryDataArray_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("spectrum_userParam", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.spectrum_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("chromatogram_userParam", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.chromatogram_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("run_userParam", new global::System.Data.DataColumn[] {
                        this.tablerun.run_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.run_IdColumn});
            this.tableuserParam.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("fileDescription_sourceFileList", new global::System.Data.DataColumn[] {
                        this.tablefileDescription.fileDescription_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesourceFileList.fileDescription_IdColumn});
            this.tablesourceFileList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("sourceFileList_sourceFile", new global::System.Data.DataColumn[] {
                        this.tablesourceFileList.sourceFileList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesourceFile.sourceFileList_IdColumn});
            this.tablesourceFile.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("fileDescription_contact", new global::System.Data.DataColumn[] {
                        this.tablefileDescription.fileDescription_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecontact.fileDescription_IdColumn});
            this.tablecontact.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("mzML_referenceableParamGroupList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupList.mzML_IdColumn});
            this.tablereferenceableParamGroupList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("referenceableParamGroupList_referenceableParamGroup", new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupList.referenceableParamGroupList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroup.referenceableParamGroupList_IdColumn});
            this.tablereferenceableParamGroup.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("mzML_sampleList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesampleList.mzML_IdColumn});
            this.tablesampleList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("sampleList_sample", new global::System.Data.DataColumn[] {
                        this.tablesampleList.sampleList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesample.sampleList_IdColumn});
            this.tablesample.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("mzML_softwareList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesoftwareList.mzML_IdColumn});
            this.tablesoftwareList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("softwareList_software", new global::System.Data.DataColumn[] {
                        this.tablesoftwareList.softwareList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesoftware.softwareList_IdColumn});
            this.tablesoftware.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("mzML_scanSettingsList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescanSettingsList.mzML_IdColumn});
            this.tablescanSettingsList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanSettingsList_scanSettings", new global::System.Data.DataColumn[] {
                        this.tablescanSettingsList.scanSettingsList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettingsList_IdColumn});
            this.tablescanSettings.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanSettings_sourceFileRefList", new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesourceFileRefList.scanSettings_IdColumn});
            this.tablesourceFileRefList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("sourceFileRefList_sourceFileRef", new global::System.Data.DataColumn[] {
                        this.tablesourceFileRefList.sourceFileRefList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesourceFileRef.sourceFileRefList_IdColumn});
            this.tablesourceFileRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanSettings_targetList", new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletargetList.scanSettings_IdColumn});
            this.tabletargetList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("targetList_target", new global::System.Data.DataColumn[] {
                        this.tabletargetList.targetList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletarget.targetList_IdColumn});
            this.tabletarget.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("mzML_instrumentConfigurationList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfigurationList.mzML_IdColumn});
            this.tableinstrumentConfigurationList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("instrumentConfigurationList_instrumentConfiguration", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfigurationList.instrumentConfigurationList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfigurationList_IdColumn});
            this.tableinstrumentConfiguration.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("instrumentConfiguration_componentList", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecomponentList.instrumentConfiguration_IdColumn});
            this.tablecomponentList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("componentList_source", new global::System.Data.DataColumn[] {
                        this.tablecomponentList.componentList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesource.componentList_IdColumn});
            this.tablesource.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("componentList_analyzer", new global::System.Data.DataColumn[] {
                        this.tablecomponentList.componentList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableanalyzer.componentList_IdColumn});
            this.tableanalyzer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("componentList_detector", new global::System.Data.DataColumn[] {
                        this.tablecomponentList.componentList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledetector.componentList_IdColumn});
            this.tabledetector.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("instrumentConfiguration_softwareRef", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesoftwareRef.instrumentConfiguration_IdColumn});
            this.tablesoftwareRef.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("mzML_dataProcessingList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledataProcessingList.mzML_IdColumn});
            this.tabledataProcessingList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("dataProcessingList_dataProcessing", new global::System.Data.DataColumn[] {
                        this.tabledataProcessingList.dataProcessingList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledataProcessing.dataProcessingList_IdColumn});
            this.tabledataProcessing.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("dataProcessing_processingMethod", new global::System.Data.DataColumn[] {
                        this.tabledataProcessing.dataProcessing_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprocessingMethod.dataProcessing_IdColumn});
            this.tableprocessingMethod.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("mzML_run", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablerun.mzML_IdColumn});
            this.tablerun.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("run_spectrumList", new global::System.Data.DataColumn[] {
                        this.tablerun.run_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablespectrumList.run_IdColumn});
            this.tablespectrumList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("spectrumList_spectrum", new global::System.Data.DataColumn[] {
                        this.tablespectrumList.spectrumList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrumList_IdColumn});
            this.tablespectrum.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("spectrum_scanList", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescanList.spectrum_IdColumn});
            this.tablescanList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanList_scan", new global::System.Data.DataColumn[] {
                        this.tablescanList.scanList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescan.scanList_IdColumn});
            this.tablescan.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scan_scanWindowList", new global::System.Data.DataColumn[] {
                        this.tablescan.scan_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescanWindowList.scan_IdColumn});
            this.tablescanWindowList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("scanWindowList_scanWindow", new global::System.Data.DataColumn[] {
                        this.tablescanWindowList.scanWindowList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescanWindow.scanWindowList_IdColumn});
            this.tablescanWindow.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("spectrum_precursorList", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprecursorList.spectrum_IdColumn});
            this.tableprecursorList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("precursorList_precursor", new global::System.Data.DataColumn[] {
                        this.tableprecursorList.precursorList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprecursor.precursorList_IdColumn});
            this.tableprecursor.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("chromatogram_precursor", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprecursor.chromatogram_IdColumn});
            this.tableprecursor.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("precursor_isolationWindow", new global::System.Data.DataColumn[] {
                        this.tableprecursor.precursor_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableisolationWindow.precursor_IdColumn});
            this.tableisolationWindow.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("product_isolationWindow", new global::System.Data.DataColumn[] {
                        this.tableproduct.product_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableisolationWindow.product_IdColumn});
            this.tableisolationWindow.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("precursor_selectedIonList", new global::System.Data.DataColumn[] {
                        this.tableprecursor.precursor_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableselectedIonList.precursor_IdColumn});
            this.tableselectedIonList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("selectedIonList_selectedIon", new global::System.Data.DataColumn[] {
                        this.tableselectedIonList.selectedIonList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableselectedIon.selectedIonList_IdColumn});
            this.tableselectedIon.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("precursor_activation", new global::System.Data.DataColumn[] {
                        this.tableprecursor.precursor_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableactivation.precursor_IdColumn});
            this.tableactivation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("spectrum_productList", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableproductList.spectrum_IdColumn});
            this.tableproductList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("productList_product", new global::System.Data.DataColumn[] {
                        this.tableproductList.productList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableproduct.productList_IdColumn});
            this.tableproduct.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("chromatogram_product", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableproduct.chromatogram_IdColumn});
            this.tableproduct.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("spectrum_binaryDataArrayList", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArrayList.spectrum_IdColumn});
            this.tablebinaryDataArrayList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("chromatogram_binaryDataArrayList", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArrayList.chromatogram_IdColumn});
            this.tablebinaryDataArrayList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("binaryDataArrayList_binaryDataArray", new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArrayList.binaryDataArrayList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArray.binaryDataArrayList_IdColumn});
            this.tablebinaryDataArray.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("run_chromatogramList", new global::System.Data.DataColumn[] {
                        this.tablerun.run_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablechromatogramList.run_IdColumn});
            this.tablechromatogramList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("chromatogramList_chromatogram", new global::System.Data.DataColumn[] {
                        this.tablechromatogramList.chromatogramList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogramList_IdColumn});
            this.tablechromatogram.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("indexedmzML_indexList", new global::System.Data.DataColumn[] {
                        this.tableindexedmzML.indexedmzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableindexList.indexedmzML_IdColumn});
            this.tableindexList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("indexList_index", new global::System.Data.DataColumn[] {
                        this.tableindexList.indexList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableindex.indexList_IdColumn});
            this.tableindex.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("index_offset", new global::System.Data.DataColumn[] {
                        this.tableindex.index_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableoffset.index_IdColumn});
            this.tableoffset.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationindexedmzML_mzML = new global::System.Data.DataRelation("indexedmzML_mzML", new global::System.Data.DataColumn[] {
                        this.tableindexedmzML.indexedmzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablemzML.indexedmzML_IdColumn}, false);
            this.relationindexedmzML_mzML.Nested = true;
            this.Relations.Add(this.relationindexedmzML_mzML);
            this.relationmzML_cvList = new global::System.Data.DataRelation("mzML_cvList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvList.mzML_IdColumn}, false);
            this.relationmzML_cvList.Nested = true;
            this.Relations.Add(this.relationmzML_cvList);
            this.relationcvList_cv = new global::System.Data.DataRelation("cvList_cv", new global::System.Data.DataColumn[] {
                        this.tablecvList.cvList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecv.cvList_IdColumn}, false);
            this.relationcvList_cv.Nested = true;
            this.Relations.Add(this.relationcvList_cv);
            this.relationmzML_fileDescription = new global::System.Data.DataRelation("mzML_fileDescription", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablefileDescription.mzML_IdColumn}, false);
            this.relationmzML_fileDescription.Nested = true;
            this.Relations.Add(this.relationmzML_fileDescription);
            this.relationfileDescription_fileContent = new global::System.Data.DataRelation("fileDescription_fileContent", new global::System.Data.DataColumn[] {
                        this.tablefileDescription.fileDescription_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablefileContent.fileDescription_IdColumn}, false);
            this.relationfileDescription_fileContent.Nested = true;
            this.Relations.Add(this.relationfileDescription_fileContent);
            this.relationfileContent_referenceableParamGroupRef = new global::System.Data.DataRelation("fileContent_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablefileContent.fileContent_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.fileContent_IdColumn}, false);
            this.relationfileContent_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationfileContent_referenceableParamGroupRef);
            this.relationsourceFile_referenceableParamGroupRef = new global::System.Data.DataRelation("sourceFile_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablesourceFile.sourceFile_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.sourceFile_IdColumn}, false);
            this.relationsourceFile_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationsourceFile_referenceableParamGroupRef);
            this.relationcontact_referenceableParamGroupRef = new global::System.Data.DataRelation("contact_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablecontact.contact_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.contact_IdColumn}, false);
            this.relationcontact_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationcontact_referenceableParamGroupRef);
            this.relationsample_referenceableParamGroupRef = new global::System.Data.DataRelation("sample_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablesample.sample_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.sample_IdColumn}, false);
            this.relationsample_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationsample_referenceableParamGroupRef);
            this.relationsoftware_referenceableParamGroupRef = new global::System.Data.DataRelation("software_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablesoftware.software_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.software_IdColumn}, false);
            this.relationsoftware_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationsoftware_referenceableParamGroupRef);
            this.relationtarget_referenceableParamGroupRef = new global::System.Data.DataRelation("target_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tabletarget.target_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.target_IdColumn}, false);
            this.relationtarget_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationtarget_referenceableParamGroupRef);
            this.relationscanSettings_referenceableParamGroupRef = new global::System.Data.DataRelation("scanSettings_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.scanSettings_IdColumn}, false);
            this.relationscanSettings_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationscanSettings_referenceableParamGroupRef);
            this.relationsource_referenceableParamGroupRef = new global::System.Data.DataRelation("source_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablesource.source_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.source_IdColumn}, false);
            this.relationsource_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationsource_referenceableParamGroupRef);
            this.relationanalyzer_referenceableParamGroupRef = new global::System.Data.DataRelation("analyzer_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableanalyzer.analyzer_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.analyzer_IdColumn}, false);
            this.relationanalyzer_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationanalyzer_referenceableParamGroupRef);
            this.relationdetector_referenceableParamGroupRef = new global::System.Data.DataRelation("detector_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tabledetector.detector_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.detector_IdColumn}, false);
            this.relationdetector_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationdetector_referenceableParamGroupRef);
            this.relationinstrumentConfiguration_referenceableParamGroupRef = new global::System.Data.DataRelation("instrumentConfiguration_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.instrumentConfiguration_IdColumn}, false);
            this.relationinstrumentConfiguration_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationinstrumentConfiguration_referenceableParamGroupRef);
            this.relationprocessingMethod_referenceableParamGroupRef = new global::System.Data.DataRelation("processingMethod_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableprocessingMethod.processingMethod_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.processingMethod_IdColumn}, false);
            this.relationprocessingMethod_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationprocessingMethod_referenceableParamGroupRef);
            this.relationscanWindow_referenceableParamGroupRef = new global::System.Data.DataRelation("scanWindow_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablescanWindow.scanWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.scanWindow_IdColumn}, false);
            this.relationscanWindow_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationscanWindow_referenceableParamGroupRef);
            this.relationscan_referenceableParamGroupRef = new global::System.Data.DataRelation("scan_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablescan.scan_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.scan_IdColumn}, false);
            this.relationscan_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationscan_referenceableParamGroupRef);
            this.relationscanList_referenceableParamGroupRef = new global::System.Data.DataRelation("scanList_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablescanList.scanList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.scanList_IdColumn}, false);
            this.relationscanList_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationscanList_referenceableParamGroupRef);
            this.relationisolationWindow_referenceableParamGroupRef = new global::System.Data.DataRelation("isolationWindow_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableisolationWindow.isolationWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.isolationWindow_IdColumn}, false);
            this.relationisolationWindow_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationisolationWindow_referenceableParamGroupRef);
            this.relationselectedIon_referenceableParamGroupRef = new global::System.Data.DataRelation("selectedIon_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableselectedIon.selectedIon_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.selectedIon_IdColumn}, false);
            this.relationselectedIon_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationselectedIon_referenceableParamGroupRef);
            this.relationactivation_referenceableParamGroupRef = new global::System.Data.DataRelation("activation_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tableactivation.activation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.activation_IdColumn}, false);
            this.relationactivation_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationactivation_referenceableParamGroupRef);
            this.relationbinaryDataArray_referenceableParamGroupRef = new global::System.Data.DataRelation("binaryDataArray_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArray.binaryDataArray_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.binaryDataArray_IdColumn}, false);
            this.relationbinaryDataArray_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationbinaryDataArray_referenceableParamGroupRef);
            this.relationspectrum_referenceableParamGroupRef = new global::System.Data.DataRelation("spectrum_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.spectrum_IdColumn}, false);
            this.relationspectrum_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationspectrum_referenceableParamGroupRef);
            this.relationchromatogram_referenceableParamGroupRef = new global::System.Data.DataRelation("chromatogram_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.chromatogram_IdColumn}, false);
            this.relationchromatogram_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationchromatogram_referenceableParamGroupRef);
            this.relationrun_referenceableParamGroupRef = new global::System.Data.DataRelation("run_referenceableParamGroupRef", new global::System.Data.DataColumn[] {
                        this.tablerun.run_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupRef.run_IdColumn}, false);
            this.relationrun_referenceableParamGroupRef.Nested = true;
            this.Relations.Add(this.relationrun_referenceableParamGroupRef);
            this.relationfileContent_cvParam = new global::System.Data.DataRelation("fileContent_cvParam", new global::System.Data.DataColumn[] {
                        this.tablefileContent.fileContent_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.fileContent_IdColumn}, false);
            this.relationfileContent_cvParam.Nested = true;
            this.Relations.Add(this.relationfileContent_cvParam);
            this.relationsourceFile_cvParam = new global::System.Data.DataRelation("sourceFile_cvParam", new global::System.Data.DataColumn[] {
                        this.tablesourceFile.sourceFile_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.sourceFile_IdColumn}, false);
            this.relationsourceFile_cvParam.Nested = true;
            this.Relations.Add(this.relationsourceFile_cvParam);
            this.relationcontact_cvParam = new global::System.Data.DataRelation("contact_cvParam", new global::System.Data.DataColumn[] {
                        this.tablecontact.contact_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.contact_IdColumn}, false);
            this.relationcontact_cvParam.Nested = true;
            this.Relations.Add(this.relationcontact_cvParam);
            this.relationreferenceableParamGroup_cvParam = new global::System.Data.DataRelation("referenceableParamGroup_cvParam", new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroup.referenceableParamGroup_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.referenceableParamGroup_IdColumn}, false);
            this.relationreferenceableParamGroup_cvParam.Nested = true;
            this.Relations.Add(this.relationreferenceableParamGroup_cvParam);
            this.relationsample_cvParam = new global::System.Data.DataRelation("sample_cvParam", new global::System.Data.DataColumn[] {
                        this.tablesample.sample_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.sample_IdColumn}, false);
            this.relationsample_cvParam.Nested = true;
            this.Relations.Add(this.relationsample_cvParam);
            this.relationsoftware_cvParam = new global::System.Data.DataRelation("software_cvParam", new global::System.Data.DataColumn[] {
                        this.tablesoftware.software_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.software_IdColumn}, false);
            this.relationsoftware_cvParam.Nested = true;
            this.Relations.Add(this.relationsoftware_cvParam);
            this.relationtarget_cvParam = new global::System.Data.DataRelation("target_cvParam", new global::System.Data.DataColumn[] {
                        this.tabletarget.target_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.target_IdColumn}, false);
            this.relationtarget_cvParam.Nested = true;
            this.Relations.Add(this.relationtarget_cvParam);
            this.relationscanSettings_cvParam = new global::System.Data.DataRelation("scanSettings_cvParam", new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.scanSettings_IdColumn}, false);
            this.relationscanSettings_cvParam.Nested = true;
            this.Relations.Add(this.relationscanSettings_cvParam);
            this.relationsource_cvParam = new global::System.Data.DataRelation("source_cvParam", new global::System.Data.DataColumn[] {
                        this.tablesource.source_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.source_IdColumn}, false);
            this.relationsource_cvParam.Nested = true;
            this.Relations.Add(this.relationsource_cvParam);
            this.relationanalyzer_cvParam = new global::System.Data.DataRelation("analyzer_cvParam", new global::System.Data.DataColumn[] {
                        this.tableanalyzer.analyzer_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.analyzer_IdColumn}, false);
            this.relationanalyzer_cvParam.Nested = true;
            this.Relations.Add(this.relationanalyzer_cvParam);
            this.relationdetector_cvParam = new global::System.Data.DataRelation("detector_cvParam", new global::System.Data.DataColumn[] {
                        this.tabledetector.detector_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.detector_IdColumn}, false);
            this.relationdetector_cvParam.Nested = true;
            this.Relations.Add(this.relationdetector_cvParam);
            this.relationinstrumentConfiguration_cvParam = new global::System.Data.DataRelation("instrumentConfiguration_cvParam", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.instrumentConfiguration_IdColumn}, false);
            this.relationinstrumentConfiguration_cvParam.Nested = true;
            this.Relations.Add(this.relationinstrumentConfiguration_cvParam);
            this.relationprocessingMethod_cvParam = new global::System.Data.DataRelation("processingMethod_cvParam", new global::System.Data.DataColumn[] {
                        this.tableprocessingMethod.processingMethod_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.processingMethod_IdColumn}, false);
            this.relationprocessingMethod_cvParam.Nested = true;
            this.Relations.Add(this.relationprocessingMethod_cvParam);
            this.relationscanWindow_cvParam = new global::System.Data.DataRelation("scanWindow_cvParam", new global::System.Data.DataColumn[] {
                        this.tablescanWindow.scanWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.scanWindow_IdColumn}, false);
            this.relationscanWindow_cvParam.Nested = true;
            this.Relations.Add(this.relationscanWindow_cvParam);
            this.relationscan_cvParam = new global::System.Data.DataRelation("scan_cvParam", new global::System.Data.DataColumn[] {
                        this.tablescan.scan_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.scan_IdColumn}, false);
            this.relationscan_cvParam.Nested = true;
            this.Relations.Add(this.relationscan_cvParam);
            this.relationscanList_cvParam = new global::System.Data.DataRelation("scanList_cvParam", new global::System.Data.DataColumn[] {
                        this.tablescanList.scanList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.scanList_IdColumn}, false);
            this.relationscanList_cvParam.Nested = true;
            this.Relations.Add(this.relationscanList_cvParam);
            this.relationisolationWindow_cvParam = new global::System.Data.DataRelation("isolationWindow_cvParam", new global::System.Data.DataColumn[] {
                        this.tableisolationWindow.isolationWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.isolationWindow_IdColumn}, false);
            this.relationisolationWindow_cvParam.Nested = true;
            this.Relations.Add(this.relationisolationWindow_cvParam);
            this.relationselectedIon_cvParam = new global::System.Data.DataRelation("selectedIon_cvParam", new global::System.Data.DataColumn[] {
                        this.tableselectedIon.selectedIon_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.selectedIon_IdColumn}, false);
            this.relationselectedIon_cvParam.Nested = true;
            this.Relations.Add(this.relationselectedIon_cvParam);
            this.relationactivation_cvParam = new global::System.Data.DataRelation("activation_cvParam", new global::System.Data.DataColumn[] {
                        this.tableactivation.activation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.activation_IdColumn}, false);
            this.relationactivation_cvParam.Nested = true;
            this.Relations.Add(this.relationactivation_cvParam);
            this.relationbinaryDataArray_cvParam = new global::System.Data.DataRelation("binaryDataArray_cvParam", new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArray.binaryDataArray_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.binaryDataArray_IdColumn}, false);
            this.relationbinaryDataArray_cvParam.Nested = true;
            this.Relations.Add(this.relationbinaryDataArray_cvParam);
            this.relationspectrum_cvParam = new global::System.Data.DataRelation("spectrum_cvParam", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.spectrum_IdColumn}, false);
            this.relationspectrum_cvParam.Nested = true;
            this.Relations.Add(this.relationspectrum_cvParam);
            this.relationchromatogram_cvParam = new global::System.Data.DataRelation("chromatogram_cvParam", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.chromatogram_IdColumn}, false);
            this.relationchromatogram_cvParam.Nested = true;
            this.Relations.Add(this.relationchromatogram_cvParam);
            this.relationrun_cvParam = new global::System.Data.DataRelation("run_cvParam", new global::System.Data.DataColumn[] {
                        this.tablerun.run_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecvParam.run_IdColumn}, false);
            this.relationrun_cvParam.Nested = true;
            this.Relations.Add(this.relationrun_cvParam);
            this.relationfileContent_userParam = new global::System.Data.DataRelation("fileContent_userParam", new global::System.Data.DataColumn[] {
                        this.tablefileContent.fileContent_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.fileContent_IdColumn}, false);
            this.relationfileContent_userParam.Nested = true;
            this.Relations.Add(this.relationfileContent_userParam);
            this.relationsourceFile_userParam = new global::System.Data.DataRelation("sourceFile_userParam", new global::System.Data.DataColumn[] {
                        this.tablesourceFile.sourceFile_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.sourceFile_IdColumn}, false);
            this.relationsourceFile_userParam.Nested = true;
            this.Relations.Add(this.relationsourceFile_userParam);
            this.relationcontact_userParam = new global::System.Data.DataRelation("contact_userParam", new global::System.Data.DataColumn[] {
                        this.tablecontact.contact_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.contact_IdColumn}, false);
            this.relationcontact_userParam.Nested = true;
            this.Relations.Add(this.relationcontact_userParam);
            this.relationreferenceableParamGroup_userParam = new global::System.Data.DataRelation("referenceableParamGroup_userParam", new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroup.referenceableParamGroup_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.referenceableParamGroup_IdColumn}, false);
            this.relationreferenceableParamGroup_userParam.Nested = true;
            this.Relations.Add(this.relationreferenceableParamGroup_userParam);
            this.relationsample_userParam = new global::System.Data.DataRelation("sample_userParam", new global::System.Data.DataColumn[] {
                        this.tablesample.sample_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.sample_IdColumn}, false);
            this.relationsample_userParam.Nested = true;
            this.Relations.Add(this.relationsample_userParam);
            this.relationsoftware_userParam = new global::System.Data.DataRelation("software_userParam", new global::System.Data.DataColumn[] {
                        this.tablesoftware.software_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.software_IdColumn}, false);
            this.relationsoftware_userParam.Nested = true;
            this.Relations.Add(this.relationsoftware_userParam);
            this.relationtarget_userParam = new global::System.Data.DataRelation("target_userParam", new global::System.Data.DataColumn[] {
                        this.tabletarget.target_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.target_IdColumn}, false);
            this.relationtarget_userParam.Nested = true;
            this.Relations.Add(this.relationtarget_userParam);
            this.relationscanSettings_userParam = new global::System.Data.DataRelation("scanSettings_userParam", new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.scanSettings_IdColumn}, false);
            this.relationscanSettings_userParam.Nested = true;
            this.Relations.Add(this.relationscanSettings_userParam);
            this.relationsource_userParam = new global::System.Data.DataRelation("source_userParam", new global::System.Data.DataColumn[] {
                        this.tablesource.source_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.source_IdColumn}, false);
            this.relationsource_userParam.Nested = true;
            this.Relations.Add(this.relationsource_userParam);
            this.relationanalyzer_userParam = new global::System.Data.DataRelation("analyzer_userParam", new global::System.Data.DataColumn[] {
                        this.tableanalyzer.analyzer_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.analyzer_IdColumn}, false);
            this.relationanalyzer_userParam.Nested = true;
            this.Relations.Add(this.relationanalyzer_userParam);
            this.relationdetector_userParam = new global::System.Data.DataRelation("detector_userParam", new global::System.Data.DataColumn[] {
                        this.tabledetector.detector_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.detector_IdColumn}, false);
            this.relationdetector_userParam.Nested = true;
            this.Relations.Add(this.relationdetector_userParam);
            this.relationinstrumentConfiguration_userParam = new global::System.Data.DataRelation("instrumentConfiguration_userParam", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.instrumentConfiguration_IdColumn}, false);
            this.relationinstrumentConfiguration_userParam.Nested = true;
            this.Relations.Add(this.relationinstrumentConfiguration_userParam);
            this.relationprocessingMethod_userParam = new global::System.Data.DataRelation("processingMethod_userParam", new global::System.Data.DataColumn[] {
                        this.tableprocessingMethod.processingMethod_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.processingMethod_IdColumn}, false);
            this.relationprocessingMethod_userParam.Nested = true;
            this.Relations.Add(this.relationprocessingMethod_userParam);
            this.relationscanWindow_userParam = new global::System.Data.DataRelation("scanWindow_userParam", new global::System.Data.DataColumn[] {
                        this.tablescanWindow.scanWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.scanWindow_IdColumn}, false);
            this.relationscanWindow_userParam.Nested = true;
            this.Relations.Add(this.relationscanWindow_userParam);
            this.relationscan_userParam = new global::System.Data.DataRelation("scan_userParam", new global::System.Data.DataColumn[] {
                        this.tablescan.scan_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.scan_IdColumn}, false);
            this.relationscan_userParam.Nested = true;
            this.Relations.Add(this.relationscan_userParam);
            this.relationscanList_userParam = new global::System.Data.DataRelation("scanList_userParam", new global::System.Data.DataColumn[] {
                        this.tablescanList.scanList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.scanList_IdColumn}, false);
            this.relationscanList_userParam.Nested = true;
            this.Relations.Add(this.relationscanList_userParam);
            this.relationisolationWindow_userParam = new global::System.Data.DataRelation("isolationWindow_userParam", new global::System.Data.DataColumn[] {
                        this.tableisolationWindow.isolationWindow_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.isolationWindow_IdColumn}, false);
            this.relationisolationWindow_userParam.Nested = true;
            this.Relations.Add(this.relationisolationWindow_userParam);
            this.relationselectedIon_userParam = new global::System.Data.DataRelation("selectedIon_userParam", new global::System.Data.DataColumn[] {
                        this.tableselectedIon.selectedIon_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.selectedIon_IdColumn}, false);
            this.relationselectedIon_userParam.Nested = true;
            this.Relations.Add(this.relationselectedIon_userParam);
            this.relationactivation_userParam = new global::System.Data.DataRelation("activation_userParam", new global::System.Data.DataColumn[] {
                        this.tableactivation.activation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.activation_IdColumn}, false);
            this.relationactivation_userParam.Nested = true;
            this.Relations.Add(this.relationactivation_userParam);
            this.relationbinaryDataArray_userParam = new global::System.Data.DataRelation("binaryDataArray_userParam", new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArray.binaryDataArray_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.binaryDataArray_IdColumn}, false);
            this.relationbinaryDataArray_userParam.Nested = true;
            this.Relations.Add(this.relationbinaryDataArray_userParam);
            this.relationspectrum_userParam = new global::System.Data.DataRelation("spectrum_userParam", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.spectrum_IdColumn}, false);
            this.relationspectrum_userParam.Nested = true;
            this.Relations.Add(this.relationspectrum_userParam);
            this.relationchromatogram_userParam = new global::System.Data.DataRelation("chromatogram_userParam", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.chromatogram_IdColumn}, false);
            this.relationchromatogram_userParam.Nested = true;
            this.Relations.Add(this.relationchromatogram_userParam);
            this.relationrun_userParam = new global::System.Data.DataRelation("run_userParam", new global::System.Data.DataColumn[] {
                        this.tablerun.run_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableuserParam.run_IdColumn}, false);
            this.relationrun_userParam.Nested = true;
            this.Relations.Add(this.relationrun_userParam);
            this.relationfileDescription_sourceFileList = new global::System.Data.DataRelation("fileDescription_sourceFileList", new global::System.Data.DataColumn[] {
                        this.tablefileDescription.fileDescription_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesourceFileList.fileDescription_IdColumn}, false);
            this.relationfileDescription_sourceFileList.Nested = true;
            this.Relations.Add(this.relationfileDescription_sourceFileList);
            this.relationsourceFileList_sourceFile = new global::System.Data.DataRelation("sourceFileList_sourceFile", new global::System.Data.DataColumn[] {
                        this.tablesourceFileList.sourceFileList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesourceFile.sourceFileList_IdColumn}, false);
            this.relationsourceFileList_sourceFile.Nested = true;
            this.Relations.Add(this.relationsourceFileList_sourceFile);
            this.relationfileDescription_contact = new global::System.Data.DataRelation("fileDescription_contact", new global::System.Data.DataColumn[] {
                        this.tablefileDescription.fileDescription_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecontact.fileDescription_IdColumn}, false);
            this.relationfileDescription_contact.Nested = true;
            this.Relations.Add(this.relationfileDescription_contact);
            this.relationmzML_referenceableParamGroupList = new global::System.Data.DataRelation("mzML_referenceableParamGroupList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupList.mzML_IdColumn}, false);
            this.relationmzML_referenceableParamGroupList.Nested = true;
            this.Relations.Add(this.relationmzML_referenceableParamGroupList);
            this.relationreferenceableParamGroupList_referenceableParamGroup = new global::System.Data.DataRelation("referenceableParamGroupList_referenceableParamGroup", new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroupList.referenceableParamGroupList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereferenceableParamGroup.referenceableParamGroupList_IdColumn}, false);
            this.relationreferenceableParamGroupList_referenceableParamGroup.Nested = true;
            this.Relations.Add(this.relationreferenceableParamGroupList_referenceableParamGroup);
            this.relationmzML_sampleList = new global::System.Data.DataRelation("mzML_sampleList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesampleList.mzML_IdColumn}, false);
            this.relationmzML_sampleList.Nested = true;
            this.Relations.Add(this.relationmzML_sampleList);
            this.relationsampleList_sample = new global::System.Data.DataRelation("sampleList_sample", new global::System.Data.DataColumn[] {
                        this.tablesampleList.sampleList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesample.sampleList_IdColumn}, false);
            this.relationsampleList_sample.Nested = true;
            this.Relations.Add(this.relationsampleList_sample);
            this.relationmzML_softwareList = new global::System.Data.DataRelation("mzML_softwareList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesoftwareList.mzML_IdColumn}, false);
            this.relationmzML_softwareList.Nested = true;
            this.Relations.Add(this.relationmzML_softwareList);
            this.relationsoftwareList_software = new global::System.Data.DataRelation("softwareList_software", new global::System.Data.DataColumn[] {
                        this.tablesoftwareList.softwareList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesoftware.softwareList_IdColumn}, false);
            this.relationsoftwareList_software.Nested = true;
            this.Relations.Add(this.relationsoftwareList_software);
            this.relationmzML_scanSettingsList = new global::System.Data.DataRelation("mzML_scanSettingsList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescanSettingsList.mzML_IdColumn}, false);
            this.relationmzML_scanSettingsList.Nested = true;
            this.Relations.Add(this.relationmzML_scanSettingsList);
            this.relationscanSettingsList_scanSettings = new global::System.Data.DataRelation("scanSettingsList_scanSettings", new global::System.Data.DataColumn[] {
                        this.tablescanSettingsList.scanSettingsList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettingsList_IdColumn}, false);
            this.relationscanSettingsList_scanSettings.Nested = true;
            this.Relations.Add(this.relationscanSettingsList_scanSettings);
            this.relationscanSettings_sourceFileRefList = new global::System.Data.DataRelation("scanSettings_sourceFileRefList", new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesourceFileRefList.scanSettings_IdColumn}, false);
            this.relationscanSettings_sourceFileRefList.Nested = true;
            this.Relations.Add(this.relationscanSettings_sourceFileRefList);
            this.relationsourceFileRefList_sourceFileRef = new global::System.Data.DataRelation("sourceFileRefList_sourceFileRef", new global::System.Data.DataColumn[] {
                        this.tablesourceFileRefList.sourceFileRefList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesourceFileRef.sourceFileRefList_IdColumn}, false);
            this.relationsourceFileRefList_sourceFileRef.Nested = true;
            this.Relations.Add(this.relationsourceFileRefList_sourceFileRef);
            this.relationscanSettings_targetList = new global::System.Data.DataRelation("scanSettings_targetList", new global::System.Data.DataColumn[] {
                        this.tablescanSettings.scanSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletargetList.scanSettings_IdColumn}, false);
            this.relationscanSettings_targetList.Nested = true;
            this.Relations.Add(this.relationscanSettings_targetList);
            this.relationtargetList_target = new global::System.Data.DataRelation("targetList_target", new global::System.Data.DataColumn[] {
                        this.tabletargetList.targetList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletarget.targetList_IdColumn}, false);
            this.relationtargetList_target.Nested = true;
            this.Relations.Add(this.relationtargetList_target);
            this.relationmzML_instrumentConfigurationList = new global::System.Data.DataRelation("mzML_instrumentConfigurationList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfigurationList.mzML_IdColumn}, false);
            this.relationmzML_instrumentConfigurationList.Nested = true;
            this.Relations.Add(this.relationmzML_instrumentConfigurationList);
            this.relationinstrumentConfigurationList_instrumentConfiguration = new global::System.Data.DataRelation("instrumentConfigurationList_instrumentConfiguration", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfigurationList.instrumentConfigurationList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfigurationList_IdColumn}, false);
            this.relationinstrumentConfigurationList_instrumentConfiguration.Nested = true;
            this.Relations.Add(this.relationinstrumentConfigurationList_instrumentConfiguration);
            this.relationinstrumentConfiguration_componentList = new global::System.Data.DataRelation("instrumentConfiguration_componentList", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecomponentList.instrumentConfiguration_IdColumn}, false);
            this.relationinstrumentConfiguration_componentList.Nested = true;
            this.Relations.Add(this.relationinstrumentConfiguration_componentList);
            this.relationcomponentList_source = new global::System.Data.DataRelation("componentList_source", new global::System.Data.DataColumn[] {
                        this.tablecomponentList.componentList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesource.componentList_IdColumn}, false);
            this.relationcomponentList_source.Nested = true;
            this.Relations.Add(this.relationcomponentList_source);
            this.relationcomponentList_analyzer = new global::System.Data.DataRelation("componentList_analyzer", new global::System.Data.DataColumn[] {
                        this.tablecomponentList.componentList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableanalyzer.componentList_IdColumn}, false);
            this.relationcomponentList_analyzer.Nested = true;
            this.Relations.Add(this.relationcomponentList_analyzer);
            this.relationcomponentList_detector = new global::System.Data.DataRelation("componentList_detector", new global::System.Data.DataColumn[] {
                        this.tablecomponentList.componentList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledetector.componentList_IdColumn}, false);
            this.relationcomponentList_detector.Nested = true;
            this.Relations.Add(this.relationcomponentList_detector);
            this.relationinstrumentConfiguration_softwareRef = new global::System.Data.DataRelation("instrumentConfiguration_softwareRef", new global::System.Data.DataColumn[] {
                        this.tableinstrumentConfiguration.instrumentConfiguration_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablesoftwareRef.instrumentConfiguration_IdColumn}, false);
            this.relationinstrumentConfiguration_softwareRef.Nested = true;
            this.Relations.Add(this.relationinstrumentConfiguration_softwareRef);
            this.relationmzML_dataProcessingList = new global::System.Data.DataRelation("mzML_dataProcessingList", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledataProcessingList.mzML_IdColumn}, false);
            this.relationmzML_dataProcessingList.Nested = true;
            this.Relations.Add(this.relationmzML_dataProcessingList);
            this.relationdataProcessingList_dataProcessing = new global::System.Data.DataRelation("dataProcessingList_dataProcessing", new global::System.Data.DataColumn[] {
                        this.tabledataProcessingList.dataProcessingList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledataProcessing.dataProcessingList_IdColumn}, false);
            this.relationdataProcessingList_dataProcessing.Nested = true;
            this.Relations.Add(this.relationdataProcessingList_dataProcessing);
            this.relationdataProcessing_processingMethod = new global::System.Data.DataRelation("dataProcessing_processingMethod", new global::System.Data.DataColumn[] {
                        this.tabledataProcessing.dataProcessing_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprocessingMethod.dataProcessing_IdColumn}, false);
            this.relationdataProcessing_processingMethod.Nested = true;
            this.Relations.Add(this.relationdataProcessing_processingMethod);
            this.relationmzML_run = new global::System.Data.DataRelation("mzML_run", new global::System.Data.DataColumn[] {
                        this.tablemzML.mzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablerun.mzML_IdColumn}, false);
            this.relationmzML_run.Nested = true;
            this.Relations.Add(this.relationmzML_run);
            this.relationrun_spectrumList = new global::System.Data.DataRelation("run_spectrumList", new global::System.Data.DataColumn[] {
                        this.tablerun.run_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablespectrumList.run_IdColumn}, false);
            this.relationrun_spectrumList.Nested = true;
            this.Relations.Add(this.relationrun_spectrumList);
            this.relationspectrumList_spectrum = new global::System.Data.DataRelation("spectrumList_spectrum", new global::System.Data.DataColumn[] {
                        this.tablespectrumList.spectrumList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrumList_IdColumn}, false);
            this.relationspectrumList_spectrum.Nested = true;
            this.Relations.Add(this.relationspectrumList_spectrum);
            this.relationspectrum_scanList = new global::System.Data.DataRelation("spectrum_scanList", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescanList.spectrum_IdColumn}, false);
            this.relationspectrum_scanList.Nested = true;
            this.Relations.Add(this.relationspectrum_scanList);
            this.relationscanList_scan = new global::System.Data.DataRelation("scanList_scan", new global::System.Data.DataColumn[] {
                        this.tablescanList.scanList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescan.scanList_IdColumn}, false);
            this.relationscanList_scan.Nested = true;
            this.Relations.Add(this.relationscanList_scan);
            this.relationscan_scanWindowList = new global::System.Data.DataRelation("scan_scanWindowList", new global::System.Data.DataColumn[] {
                        this.tablescan.scan_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescanWindowList.scan_IdColumn}, false);
            this.relationscan_scanWindowList.Nested = true;
            this.Relations.Add(this.relationscan_scanWindowList);
            this.relationscanWindowList_scanWindow = new global::System.Data.DataRelation("scanWindowList_scanWindow", new global::System.Data.DataColumn[] {
                        this.tablescanWindowList.scanWindowList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescanWindow.scanWindowList_IdColumn}, false);
            this.relationscanWindowList_scanWindow.Nested = true;
            this.Relations.Add(this.relationscanWindowList_scanWindow);
            this.relationspectrum_precursorList = new global::System.Data.DataRelation("spectrum_precursorList", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprecursorList.spectrum_IdColumn}, false);
            this.relationspectrum_precursorList.Nested = true;
            this.Relations.Add(this.relationspectrum_precursorList);
            this.relationprecursorList_precursor = new global::System.Data.DataRelation("precursorList_precursor", new global::System.Data.DataColumn[] {
                        this.tableprecursorList.precursorList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprecursor.precursorList_IdColumn}, false);
            this.relationprecursorList_precursor.Nested = true;
            this.Relations.Add(this.relationprecursorList_precursor);
            this.relationchromatogram_precursor = new global::System.Data.DataRelation("chromatogram_precursor", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprecursor.chromatogram_IdColumn}, false);
            this.relationchromatogram_precursor.Nested = true;
            this.Relations.Add(this.relationchromatogram_precursor);
            this.relationprecursor_isolationWindow = new global::System.Data.DataRelation("precursor_isolationWindow", new global::System.Data.DataColumn[] {
                        this.tableprecursor.precursor_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableisolationWindow.precursor_IdColumn}, false);
            this.relationprecursor_isolationWindow.Nested = true;
            this.Relations.Add(this.relationprecursor_isolationWindow);
            this.relationproduct_isolationWindow = new global::System.Data.DataRelation("product_isolationWindow", new global::System.Data.DataColumn[] {
                        this.tableproduct.product_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableisolationWindow.product_IdColumn}, false);
            this.relationproduct_isolationWindow.Nested = true;
            this.Relations.Add(this.relationproduct_isolationWindow);
            this.relationprecursor_selectedIonList = new global::System.Data.DataRelation("precursor_selectedIonList", new global::System.Data.DataColumn[] {
                        this.tableprecursor.precursor_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableselectedIonList.precursor_IdColumn}, false);
            this.relationprecursor_selectedIonList.Nested = true;
            this.Relations.Add(this.relationprecursor_selectedIonList);
            this.relationselectedIonList_selectedIon = new global::System.Data.DataRelation("selectedIonList_selectedIon", new global::System.Data.DataColumn[] {
                        this.tableselectedIonList.selectedIonList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableselectedIon.selectedIonList_IdColumn}, false);
            this.relationselectedIonList_selectedIon.Nested = true;
            this.Relations.Add(this.relationselectedIonList_selectedIon);
            this.relationprecursor_activation = new global::System.Data.DataRelation("precursor_activation", new global::System.Data.DataColumn[] {
                        this.tableprecursor.precursor_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableactivation.precursor_IdColumn}, false);
            this.relationprecursor_activation.Nested = true;
            this.Relations.Add(this.relationprecursor_activation);
            this.relationspectrum_productList = new global::System.Data.DataRelation("spectrum_productList", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableproductList.spectrum_IdColumn}, false);
            this.relationspectrum_productList.Nested = true;
            this.Relations.Add(this.relationspectrum_productList);
            this.relationproductList_product = new global::System.Data.DataRelation("productList_product", new global::System.Data.DataColumn[] {
                        this.tableproductList.productList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableproduct.productList_IdColumn}, false);
            this.relationproductList_product.Nested = true;
            this.Relations.Add(this.relationproductList_product);
            this.relationchromatogram_product = new global::System.Data.DataRelation("chromatogram_product", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableproduct.chromatogram_IdColumn}, false);
            this.relationchromatogram_product.Nested = true;
            this.Relations.Add(this.relationchromatogram_product);
            this.relationspectrum_binaryDataArrayList = new global::System.Data.DataRelation("spectrum_binaryDataArrayList", new global::System.Data.DataColumn[] {
                        this.tablespectrum.spectrum_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArrayList.spectrum_IdColumn}, false);
            this.relationspectrum_binaryDataArrayList.Nested = true;
            this.Relations.Add(this.relationspectrum_binaryDataArrayList);
            this.relationchromatogram_binaryDataArrayList = new global::System.Data.DataRelation("chromatogram_binaryDataArrayList", new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogram_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArrayList.chromatogram_IdColumn}, false);
            this.relationchromatogram_binaryDataArrayList.Nested = true;
            this.Relations.Add(this.relationchromatogram_binaryDataArrayList);
            this.relationbinaryDataArrayList_binaryDataArray = new global::System.Data.DataRelation("binaryDataArrayList_binaryDataArray", new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArrayList.binaryDataArrayList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablebinaryDataArray.binaryDataArrayList_IdColumn}, false);
            this.relationbinaryDataArrayList_binaryDataArray.Nested = true;
            this.Relations.Add(this.relationbinaryDataArrayList_binaryDataArray);
            this.relationrun_chromatogramList = new global::System.Data.DataRelation("run_chromatogramList", new global::System.Data.DataColumn[] {
                        this.tablerun.run_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablechromatogramList.run_IdColumn}, false);
            this.relationrun_chromatogramList.Nested = true;
            this.Relations.Add(this.relationrun_chromatogramList);
            this.relationchromatogramList_chromatogram = new global::System.Data.DataRelation("chromatogramList_chromatogram", new global::System.Data.DataColumn[] {
                        this.tablechromatogramList.chromatogramList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablechromatogram.chromatogramList_IdColumn}, false);
            this.relationchromatogramList_chromatogram.Nested = true;
            this.Relations.Add(this.relationchromatogramList_chromatogram);
            this.relationindexedmzML_indexList = new global::System.Data.DataRelation("indexedmzML_indexList", new global::System.Data.DataColumn[] {
                        this.tableindexedmzML.indexedmzML_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableindexList.indexedmzML_IdColumn}, false);
            this.relationindexedmzML_indexList.Nested = true;
            this.Relations.Add(this.relationindexedmzML_indexList);
            this.relationindexList_index = new global::System.Data.DataRelation("indexList_index", new global::System.Data.DataColumn[] {
                        this.tableindexList.indexList_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableindex.indexList_IdColumn}, false);
            this.relationindexList_index.Nested = true;
            this.Relations.Add(this.relationindexList_index);
            this.relationindex_offset = new global::System.Data.DataRelation("index_offset", new global::System.Data.DataColumn[] {
                        this.tableindex.index_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableoffset.index_IdColumn}, false);
            this.relationindex_offset.Nested = true;
            this.Relations.Add(this.relationindex_offset);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeindexedmzML() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeindexList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeindex() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeoffset() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private new void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
			IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void indexedmzMLRowChangeEventHandler(object sender, indexedmzMLRowChangeEvent e);
        
        public delegate void indexListRowChangeEventHandler(object sender, indexListRowChangeEvent e);
        
        public delegate void indexRowChangeEventHandler(object sender, indexRowChangeEvent e);
        
        public delegate void offsetRowChangeEventHandler(object sender, offsetRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class indexedmzMLDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnindexListOffset;
            
            private global::System.Data.DataColumn columnfileChecksum;
            
            private global::System.Data.DataColumn columnindexedmzML_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexedmzMLDataTable() {
                this.TableName = "indexedmzML";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal indexedmzMLDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected indexedmzMLDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn indexListOffsetColumn {
                get {
                    return this.columnindexListOffset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fileChecksumColumn {
                get {
                    return this.columnfileChecksum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn indexedmzML_IdColumn {
                get {
                    return this.columnindexedmzML_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexedmzMLRow this[int index] {
                get {
                    return ((indexedmzMLRow)(this.Rows[index]));
                }
            }
            
            public event indexedmzMLRowChangeEventHandler indexedmzMLRowChanging;
            
            public event indexedmzMLRowChangeEventHandler indexedmzMLRowChanged;
            
            public event indexedmzMLRowChangeEventHandler indexedmzMLRowDeleting;
            
            public event indexedmzMLRowChangeEventHandler indexedmzMLRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddindexedmzMLRow(indexedmzMLRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexedmzMLRow AddindexedmzMLRow(long indexListOffset, string fileChecksum) {
                indexedmzMLRow rowindexedmzMLRow = ((indexedmzMLRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        indexListOffset,
                        fileChecksum,
                        null};
                rowindexedmzMLRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowindexedmzMLRow);
                return rowindexedmzMLRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                indexedmzMLDataTable cln = ((indexedmzMLDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new indexedmzMLDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnindexListOffset = base.Columns["indexListOffset"];
                this.columnfileChecksum = base.Columns["fileChecksum"];
                this.columnindexedmzML_Id = base.Columns["indexedmzML_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnindexListOffset = new global::System.Data.DataColumn("indexListOffset", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnindexListOffset);
                this.columnfileChecksum = new global::System.Data.DataColumn("fileChecksum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfileChecksum);
                this.columnindexedmzML_Id = new global::System.Data.DataColumn("indexedmzML_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnindexedmzML_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnindexedmzML_Id}, true));
                this.columnfileChecksum.AllowDBNull = false;
                this.columnindexedmzML_Id.AutoIncrement = true;
                this.columnindexedmzML_Id.AllowDBNull = false;
                this.columnindexedmzML_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexedmzMLRow NewindexedmzMLRow() {
                return ((indexedmzMLRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new indexedmzMLRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(indexedmzMLRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.indexedmzMLRowChanged != null)) {
                    this.indexedmzMLRowChanged(this, new indexedmzMLRowChangeEvent(((indexedmzMLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.indexedmzMLRowChanging != null)) {
                    this.indexedmzMLRowChanging(this, new indexedmzMLRowChangeEvent(((indexedmzMLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.indexedmzMLRowDeleted != null)) {
                    this.indexedmzMLRowDeleted(this, new indexedmzMLRowChangeEvent(((indexedmzMLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.indexedmzMLRowDeleting != null)) {
                    this.indexedmzMLRowDeleting(this, new indexedmzMLRowChangeEvent(((indexedmzMLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveindexedmzMLRow(indexedmzMLRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "indexedmzMLDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class indexListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columnindexList_Id;
            
            private global::System.Data.DataColumn columnindexedmzML_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexListDataTable() {
                this.TableName = "indexList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal indexListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected indexListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn indexList_IdColumn {
                get {
                    return this.columnindexList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn indexedmzML_IdColumn {
                get {
                    return this.columnindexedmzML_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexListRow this[int index] {
                get {
                    return ((indexListRow)(this.Rows[index]));
                }
            }
            
            public event indexListRowChangeEventHandler indexListRowChanging;
            
            public event indexListRowChangeEventHandler indexListRowChanged;
            
            public event indexListRowChangeEventHandler indexListRowDeleting;
            
            public event indexListRowChangeEventHandler indexListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddindexListRow(indexListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexListRow AddindexListRow(ulong count, indexedmzMLRow parentindexedmzMLRowByindexedmzML_indexList) {
                indexListRow rowindexListRow = ((indexListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        count,
                        null,
                        null};
                if ((parentindexedmzMLRowByindexedmzML_indexList != null)) {
                    columnValuesArray[2] = parentindexedmzMLRowByindexedmzML_indexList[2];
                }
                rowindexListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowindexListRow);
                return rowindexListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                indexListDataTable cln = ((indexListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new indexListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncount = base.Columns["count"];
                this.columnindexList_Id = base.Columns["indexList_Id"];
                this.columnindexedmzML_Id = base.Columns["indexedmzML_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncount = new global::System.Data.DataColumn("count", typeof(ulong), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columnindexList_Id = new global::System.Data.DataColumn("indexList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnindexList_Id);
                this.columnindexedmzML_Id = new global::System.Data.DataColumn("indexedmzML_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnindexedmzML_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnindexList_Id}, true));
                this.columncount.AllowDBNull = false;
                this.columncount.Namespace = "";
                this.columnindexList_Id.AutoIncrement = true;
                this.columnindexList_Id.AllowDBNull = false;
                this.columnindexList_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexListRow NewindexListRow() {
                return ((indexListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new indexListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(indexListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.indexListRowChanged != null)) {
                    this.indexListRowChanged(this, new indexListRowChangeEvent(((indexListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.indexListRowChanging != null)) {
                    this.indexListRowChanging(this, new indexListRowChangeEvent(((indexListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.indexListRowDeleted != null)) {
                    this.indexListRowDeleted(this, new indexListRowChangeEvent(((indexListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.indexListRowDeleting != null)) {
                    this.indexListRowDeleting(this, new indexListRowChangeEvent(((indexListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveindexListRow(indexListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "indexListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class indexDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnindex_Id;
            
            private global::System.Data.DataColumn columnindexList_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexDataTable() {
                this.TableName = "index";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal indexDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected indexDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn index_IdColumn {
                get {
                    return this.columnindex_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn indexList_IdColumn {
                get {
                    return this.columnindexList_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexRow this[int index] {
                get {
                    return ((indexRow)(this.Rows[index]));
                }
            }
            
            public event indexRowChangeEventHandler indexRowChanging;
            
            public event indexRowChangeEventHandler indexRowChanged;
            
            public event indexRowChangeEventHandler indexRowDeleting;
            
            public event indexRowChangeEventHandler indexRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddindexRow(indexRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexRow AddindexRow(string name, indexListRow parentindexListRowByindexList_index) {
                indexRow rowindexRow = ((indexRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name,
                        null,
                        null};
                if ((parentindexListRowByindexList_index != null)) {
                    columnValuesArray[2] = parentindexListRowByindexList_index[1];
                }
                rowindexRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowindexRow);
                return rowindexRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                indexDataTable cln = ((indexDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new indexDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columnindex_Id = base.Columns["index_Id"];
                this.columnindexList_Id = base.Columns["indexList_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columnindex_Id = new global::System.Data.DataColumn("index_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnindex_Id);
                this.columnindexList_Id = new global::System.Data.DataColumn("indexList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnindexList_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnindex_Id}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columnindex_Id.AutoIncrement = true;
                this.columnindex_Id.AllowDBNull = false;
                this.columnindex_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexRow NewindexRow() {
                return ((indexRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new indexRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(indexRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.indexRowChanged != null)) {
                    this.indexRowChanged(this, new indexRowChangeEvent(((indexRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.indexRowChanging != null)) {
                    this.indexRowChanging(this, new indexRowChangeEvent(((indexRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.indexRowDeleted != null)) {
                    this.indexRowDeleted(this, new indexRowChangeEvent(((indexRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.indexRowDeleting != null)) {
                    this.indexRowDeleting(this, new indexRowChangeEvent(((indexRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveindexRow(indexRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "indexDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class offsetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnidRef;
            
            private global::System.Data.DataColumn columnspotID;
            
            private global::System.Data.DataColumn columnscanTime;
            
            private global::System.Data.DataColumn columnoffset_text;
            
            private global::System.Data.DataColumn columnindex_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public offsetDataTable() {
                this.TableName = "offset";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal offsetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected offsetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idRefColumn {
                get {
                    return this.columnidRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spotIDColumn {
                get {
                    return this.columnspotID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanTimeColumn {
                get {
                    return this.columnscanTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn offset_textColumn {
                get {
                    return this.columnoffset_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn index_IdColumn {
                get {
                    return this.columnindex_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public offsetRow this[int index] {
                get {
                    return ((offsetRow)(this.Rows[index]));
                }
            }
            
            public event offsetRowChangeEventHandler offsetRowChanging;
            
            public event offsetRowChangeEventHandler offsetRowChanged;
            
            public event offsetRowChangeEventHandler offsetRowDeleting;
            
            public event offsetRowChangeEventHandler offsetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddoffsetRow(offsetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public offsetRow AddoffsetRow(string idRef, string spotID, double scanTime, long offset_text, indexRow parentindexRowByindex_offset) {
                offsetRow rowoffsetRow = ((offsetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        idRef,
                        spotID,
                        scanTime,
                        offset_text,
                        null};
                if ((parentindexRowByindex_offset != null)) {
                    columnValuesArray[4] = parentindexRowByindex_offset[1];
                }
                rowoffsetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowoffsetRow);
                return rowoffsetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                offsetDataTable cln = ((offsetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new offsetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidRef = base.Columns["idRef"];
                this.columnspotID = base.Columns["spotID"];
                this.columnscanTime = base.Columns["scanTime"];
                this.columnoffset_text = base.Columns["offset_text"];
                this.columnindex_Id = base.Columns["index_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidRef = new global::System.Data.DataColumn("idRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnidRef);
                this.columnspotID = new global::System.Data.DataColumn("spotID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnspotID);
                this.columnscanTime = new global::System.Data.DataColumn("scanTime", typeof(double), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnscanTime);
                this.columnoffset_text = new global::System.Data.DataColumn("offset_text", typeof(long), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnoffset_text);
                this.columnindex_Id = new global::System.Data.DataColumn("index_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnindex_Id);
                this.columnidRef.AllowDBNull = false;
                this.columnidRef.Namespace = "";
                this.columnspotID.Namespace = "";
                this.columnscanTime.Namespace = "";
                this.columnoffset_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public offsetRow NewoffsetRow() {
                return ((offsetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new offsetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(offsetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.offsetRowChanged != null)) {
                    this.offsetRowChanged(this, new offsetRowChangeEvent(((offsetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.offsetRowChanging != null)) {
                    this.offsetRowChanging(this, new offsetRowChangeEvent(((offsetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.offsetRowDeleted != null)) {
                    this.offsetRowDeleted(this, new offsetRowChangeEvent(((offsetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.offsetRowDeleting != null)) {
                    this.offsetRowDeleting(this, new offsetRowChangeEvent(((offsetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveoffsetRow(offsetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexedMzMLDataSet ds = new IndexedMzMLDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "offsetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class indexedmzMLRow : global::System.Data.DataRow {
            
            private indexedmzMLDataTable tableindexedmzML;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal indexedmzMLRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableindexedmzML = ((indexedmzMLDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long indexListOffset {
                get {
                    try {
                        return ((long)(this[this.tableindexedmzML.indexListOffsetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'indexListOffset\' in table \'indexedmzML\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableindexedmzML.indexListOffsetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fileChecksum {
                get {
                    return ((string)(this[this.tableindexedmzML.fileChecksumColumn]));
                }
                set {
                    this[this.tableindexedmzML.fileChecksumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int indexedmzML_Id {
                get {
                    return ((int)(this[this.tableindexedmzML.indexedmzML_IdColumn]));
                }
                set {
                    this[this.tableindexedmzML.indexedmzML_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsindexListOffsetNull() {
                return this.IsNull(this.tableindexedmzML.indexListOffsetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetindexListOffsetNull() {
                this[this.tableindexedmzML.indexListOffsetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mzMLRow[] GetmzMLRows() {
                if ((this.Table.ChildRelations["indexedmzML_mzML"] == null)) {
                    return new mzMLRow[0];
                }
                else {
                    return ((mzMLRow[])(base.GetChildRows(this.Table.ChildRelations["indexedmzML_mzML"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexListRow[] GetindexListRows() {
                if ((this.Table.ChildRelations["indexedmzML_indexList"] == null)) {
                    return new indexListRow[0];
                }
                else {
                    return ((indexListRow[])(base.GetChildRows(this.Table.ChildRelations["indexedmzML_indexList"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class indexListRow : global::System.Data.DataRow {
            
            private indexListDataTable tableindexList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal indexListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableindexList = ((indexListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong count {
                get {
                    return ((ulong)(this[this.tableindexList.countColumn]));
                }
                set {
                    this[this.tableindexList.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int indexList_Id {
                get {
                    return ((int)(this[this.tableindexList.indexList_IdColumn]));
                }
                set {
                    this[this.tableindexList.indexList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int indexedmzML_Id {
                get {
                    try {
                        return ((int)(this[this.tableindexList.indexedmzML_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'indexedmzML_Id\' in table \'indexList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableindexList.indexedmzML_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexedmzMLRow indexedmzMLRow {
                get {
                    return ((indexedmzMLRow)(this.GetParentRow(this.Table.ParentRelations["indexedmzML_indexList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["indexedmzML_indexList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsindexedmzML_IdNull() {
                return this.IsNull(this.tableindexList.indexedmzML_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetindexedmzML_IdNull() {
                this[this.tableindexList.indexedmzML_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexRow[] GetindexRows() {
                if ((this.Table.ChildRelations["indexList_index"] == null)) {
                    return new indexRow[0];
                }
                else {
                    return ((indexRow[])(base.GetChildRows(this.Table.ChildRelations["indexList_index"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class indexRow : global::System.Data.DataRow {
            
            private indexDataTable tableindex;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal indexRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableindex = ((indexDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableindex.nameColumn]));
                }
                set {
                    this[this.tableindex.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int index_Id {
                get {
                    return ((int)(this[this.tableindex.index_IdColumn]));
                }
                set {
                    this[this.tableindex.index_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int indexList_Id {
                get {
                    try {
                        return ((int)(this[this.tableindex.indexList_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'indexList_Id\' in table \'index\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableindex.indexList_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexListRow indexListRow {
                get {
                    return ((indexListRow)(this.GetParentRow(this.Table.ParentRelations["indexList_index"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["indexList_index"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsindexList_IdNull() {
                return this.IsNull(this.tableindex.indexList_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetindexList_IdNull() {
                this[this.tableindex.indexList_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public offsetRow[] GetoffsetRows() {
                if ((this.Table.ChildRelations["index_offset"] == null)) {
                    return new offsetRow[0];
                }
                else {
                    return ((offsetRow[])(base.GetChildRows(this.Table.ChildRelations["index_offset"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class offsetRow : global::System.Data.DataRow {
            
            private offsetDataTable tableoffset;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal offsetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableoffset = ((offsetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string idRef {
                get {
                    return ((string)(this[this.tableoffset.idRefColumn]));
                }
                set {
                    this[this.tableoffset.idRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string spotID {
                get {
                    try {
                        return ((string)(this[this.tableoffset.spotIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'spotID\' in table \'offset\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableoffset.spotIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double scanTime {
                get {
                    try {
                        return ((double)(this[this.tableoffset.scanTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scanTime\' in table \'offset\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableoffset.scanTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long offset_text {
                get {
                    return ((long)(this[this.tableoffset.offset_textColumn]));
                }
                set {
                    this[this.tableoffset.offset_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int index_Id {
                get {
                    try {
                        return ((int)(this[this.tableoffset.index_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'index_Id\' in table \'offset\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableoffset.index_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexRow indexRow {
                get {
                    return ((indexRow)(this.GetParentRow(this.Table.ParentRelations["index_offset"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["index_offset"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsspotIDNull() {
                return this.IsNull(this.tableoffset.spotIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetspotIDNull() {
                this[this.tableoffset.spotIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscanTimeNull() {
                return this.IsNull(this.tableoffset.scanTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscanTimeNull() {
                this[this.tableoffset.scanTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isindex_IdNull() {
                return this.IsNull(this.tableoffset.index_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setindex_IdNull() {
                this[this.tableoffset.index_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class indexedmzMLRowChangeEvent : global::System.EventArgs {
            
            private indexedmzMLRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexedmzMLRowChangeEvent(indexedmzMLRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexedmzMLRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class indexListRowChangeEvent : global::System.EventArgs {
            
            private indexListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexListRowChangeEvent(indexListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class indexRowChangeEvent : global::System.EventArgs {
            
            private indexRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexRowChangeEvent(indexRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public indexRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class offsetRowChangeEvent : global::System.EventArgs {
            
            private offsetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public offsetRowChangeEvent(offsetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public offsetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
